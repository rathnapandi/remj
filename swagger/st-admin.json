{
    "swagger": "2.0",
    "info": {
        "version": "1.4.0",
        "title": "SecureTransport Administrator API v1.4",
        "description": ""
    },
    "basePath": "/api/v1.4",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json",
        "application/xml"
    ],
    "produces": [
        "application/json",
        "application/xml"
    ],
    "securityDefinitions": {
        "basicAuthScheme": {
            "type": "basic"
        }
    },
    "paths": {
        "/accounts/{accountName}": {
            "parameters": [
                {
                    "name": "accountName",
                    "in": "path",
                    "description": "The name of the accout that will be deleted and/or will has it's home folder purged.",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "operationId": "deleteAccount",
                "summary": "Delete and/or purge an account entity.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Delete an account entity with the specified name and/or purge the account's home folder.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n",
                "parameters": [
                    {
                        "name": "purge",
                        "in": "query",
                        "description": "This parameter marks whether or not to purge the user's home folder.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted account with the specified name and/or purged the account's home folder."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an account with the specified name can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "updateAccountProperties",
                "summary": "Update an account entity properties.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Update an account entity properties. Custom properties with null values will get deleted.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated account properties."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an account with the specified name can not be found on the ST server."
                    }
                }
            },
            "get": {
                "operationId": "getAccount",
                "summary": "Get an account account entity.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Get an account entity.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an account with the specified name can not be found on the ST server."
                    }
                }
            },
            "put": {
                "operationId": "createOrUpdateAccount",
                "summary": "Create or update an account entity.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Create an account entity or replace existing account entity with the same name.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully created account (or successfully replaced existing account)."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an account with the specified name can not be found on the ST server."
                    }
                }
            }
        },
        "/accounts/{accountName}/users/{userName}": {
            "parameters": [
                {
                    "name": "accountName",
                    "in": "path",
                    "description": "The name of the account which user want to get.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "userName",
                    "in": "path",
                    "description": "The name of the user.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getUser",
                "summary": "Get an user with the given name.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Get an user with the given name.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an account or the user with the specified name(s) can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "updateUserProperties",
                "summary": "Update properties of an user of account entity.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Update properties of an user of account entity. \n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\nCurrent password policies will be applied if the password has been specified. If passwordDigest is specified password policies will not be applied. \n\nNOTE: `lastLogin`, `lastFailedAuth` and `lastPasswordChange` properties of an user are read only properties and can not be modified via the REST API. Secure Transport server sets these properties on: successful user login, failed user login and password change.\n\n**Known Issue:**  Secure Transport REST API v1.4 cannot delete user that belongs to an account when the user update request is executed. The user will be updated successfully and the old one will be preserved.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an account or the user with the specified name(s) can not be found on the ST server."
                    }
                }
            },
            "put": {
                "operationId": "createOrUpdateUser",
                "summary": "Create (replace) an user for an account entity.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Creates or updates an user for an account entity. Persist a new user associated with an account if there is no user with the same login name. If there is a user with the same login name, replaces it with the given one. In this version of the API only one user per account is allowed. \n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\nCurrent password policies will be applied if the password has been specified. If passwordDigest is specified password policies will not be applied. \n\nNOTE: `lastLogin`, `lastFailedAuth` and `lastPasswordChange` properties of an user are read only properties and can not be modified via the REST API. Secure Transport server sets these properties on: successful user login, failed user login and password change.\n\n**Known Issue:**  Secure Transport REST API v1.4 cannot delete user that belongs to an account when the user update request is executed. The user will be updated successfully and the old one will be preserved.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an account or the user with the specified name(s) can not be found on the ST server."
                    }
                }
            },
            "delete": {
                "operationId": "deleteUser",
                "summary": "Delete an user with the given name.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Delete a user with the given identifier from the account.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n",
                "responses": {
                    "204": {
                        "description": "Successfully deleted user."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an account or the user with the specified name(s) can not be found on the ST server."
                    }
                }
            }
        },
        "/accounts": {
            "get": {
                "operationId": "getAccounts",
                "summary": "Get accounts collection on the ST server.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Get collection of accounts on the ST server. Get method returns fully equipped account entities or partial ones based on 'fields' query parameter. One of these links is 'certificates'. \n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\nThree certificate types are supported for an account entity - login, partner and private. `Login` certificates are used when an account needs to login to ST Server using a certificate or SSH Key. `Partner` certificates are used for encrypting PGP and AS2 data to an account and verifying the signature of data from an account. `Private` certificates are used by ST Server to login to remote Transfer Sites for account as well as for decryption and signing of PGP and AS2 data.\n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "businessUnit",
                        "in": "query",
                        "description": "The bisuness unit name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "route",
                        "in": "query",
                        "description": "The route id to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "accountType",
                        "in": "query",
                        "description": "The types of account to filter by. Could be more than one parameter with the same name. Account types are: 'user', 'service' and 'template'.\n",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nameContains",
                        "in": "query",
                        "description": "Account name fragment to filter by, the name that the accounts name or login name contains. That parameter is used in conjunction with fields only.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "searchLoginName",
                        "in": "query",
                        "description": "When true also search for login names matching this criteria.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "The fields of account entity to return. That parameter is used in conjunction with nameContains only. At that version of the API only 'name' field of the account entity is supported.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Account statuses to filter by. Could be more than one parameter with the same name. Account status can be: 'ACTIVE', 'DISABLED', 'LOCKED', 'PENDING' and 'REJECTED'.\n",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Accounts"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request. Example: response code 400 can be observed when set limit or offset parameters to have a negative value or set incorect fields query parameter.\n"
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if businessUnit with specified name or route with specified ID can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "createAccounts",
                "summary": "Create accounts collection on the ST server.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Create collection of accounts on the ST server. \n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\nDepending on the account `type` property there are three types of accounts: user, service and template.\n\nAccount entites support custom attributes which can be added via the ST RESTful API. The custom attributes are in the following format: `userVars.{attribute_name}: {attribute_value}`. \n\nAccount entities support repository encryption mode named `encryptMode`. There are two possible options for the encryptMode: 'ENABLED' and 'UNSPECIFIED'. When ENABLED is set then repository encryption for the account is enabled. When UNSPECIFIED is set then repository encryption for the account is not enabled and can be specified with EncryptClass. \n\nAccount entities support a custom property named 'transfersWebServiceAllowed' which is an attribute name to indicate whether access to the transfers resource from the end user RESTful API is allowed.\n\nAccount entities support a custom property named 'transferType' which is an attribute name to indicate the transfer type of the account's transfer site. It can be unspecified (`N`), internal (`I`), partner(`E`). By default is unspecified.\n\nAccount entities support repository encryption mode named 'routingMode'. There are three possible options for the routingMode: `accept` (the value for Routing Mode that accept transfers), `reject` (the value for Routing Mode that reject transfers) and `ignore` (the value for Routing Mode that ignores transfers). By default is 'reject'.\n\nAccount entities support a custom property named 'accountFileArchivingPolicy' that can be set only if the global File Archiving is anabled. There are three possible options for the accountFileArchivingPolicy - `enabled`, `disabled` and `default`. When 'enabled' is set, file archiving will be enabled for this account. When 'disabled' is set, file archiving will be disabled for this account. When 'default' is set, then the following apply: if the account is assigned to business unit, it will inherit its policy, otherwise, the global archiving policy applies.\n\nAccount entities support a custom property name 'bandwidthInboundLimit' which defines maximum kb/s applied for inbound transfers per account. The limit will be applied regardless of cluster/streaming deployment configurations or number of sessions open up by each account.\n\nAccount entities support a custom property name 'bandwidthOutboundLimit' which defines maximum kb/s applied for outbound transfers per account. The limit will be applied regardless of cluster/streaming deployment configurations or number of sessions open up by each account.\n\nAccount entities which are part of the Maker/Checker process flow support the following custom properties named 'verificationStatus', 'submitForApprove' and 'rejectReason'.\n- The 'verificationStatus' property indicates whether the account is verified, rejected or pending approval. It has three possible values - 'PENDING', 'APPROVED' and  'REJECTED'. Its value can be changed by Checker or Master administrator.\n- The 'submitForApprove' property indicates whether the account is submitted by Maker administrator to be verified by Checker administrator. It can be either 'true' or 'false'. Its value can be changed by Maker or Master administrator. Checker administrators can update the verification status of submitted for approval accounts.\n- The 'rejectReason' property can be used to store reasons for rejection and additional notes by Checker and Master administratos.\n\nIf an account's type is a template, additional templateClass(String) variable is required - the user class of the template account.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Accounts"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully created accounts."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    }
                }
            }
        },
        "/accounts/{name}/addressBookSources": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "the name of an account which address books needs to be retrieved.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getAccountAddressBookSources",
                "summary": "Gets account's address book sources.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Returns assigned address book sources to an account. The result list may be empty if there are no entries satisfying the search cretieria.\n",
                "parameters": [
                    {
                        "name": "abname",
                        "in": "query",
                        "description": "The address book source name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The address book source type to filter by. Expected 'local', 'ldap' or 'custom'",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "parentGroup",
                        "in": "query",
                        "description": "The address book source parentGroup to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "description": "The address book source enabled to filter by. Expected 'true' or 'false' value.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Defines maximum count of returned entries. Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with offset query parameter to get entries at portions.\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Defines the first entry number of an ordered result to get; last entry number to return is (offset + limit - 1). Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with limit query parameter to get entries at portions.\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AddressBookSources"
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "Account not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            },
            "put": {
                "operationId": "overwriteAccountAddressBookSources",
                "summary": "Replaces address book sources assigned to an account.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Replaces address book sources.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AddressBookSources"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AddressBookSources"
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "Account or an address book source not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            }
        },
        "/accounts/{accountName}/users": {
            "parameters": [
                {
                    "name": "accountName",
                    "in": "path",
                    "description": "The name of the account that will create a user for.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "createUsers",
                "summary": "Create users for an account entity.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Create users for an account entity. In this version of the API only one user per account is allowed. Current password policies will be applied if the password has been specified. If passwordDigest is specified password policies will not be applied.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Users"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an account with the specified name can not be found on the ST server."
                    }
                }
            },
            "get": {
                "operationId": "getUsers",
                "summary": "Get users for a given account entity.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Get the users for a given account entity.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Users"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an account with the specified name can not be found on the ST server."
                    }
                }
            }
        },
        "/accounts/{accountName}/addressBook/contacts/{id}": {
            "parameters": [
                {
                    "name": "accountName",
                    "in": "path",
                    "description": "The name of the account which the address book contact will be updated.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "id",
                    "in": "path",
                    "description": "The ID of the address book contact that will be updated.",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "operationId": "updateAddressBookContact",
                "summary": "Update an address book contact of an account entity.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Update an address book contact of a specified account entity.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AddressBookContact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfuly updated address book contacts."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an account with the specified name and/or AddressBookContact with the given ID can not be found on the ST server."
                    }
                }
            },
            "delete": {
                "operationId": "deleteAddressBookContact",
                "summary": "Delete an address book contact of an account entity.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Delete an address book contact of a specified account entity.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n",
                "responses": {
                    "200": {
                        "description": "Successfully deleted address book contact."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an account with the specified name and/or AddressBookContact with the given ID can not be found on the ST server."
                    }
                }
            }
        },
        "/accounts/{name}/addressBookSources/{id}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "the name of an account",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "id",
                    "in": "path",
                    "description": "Id of the address book source that needs to be assigned/updated for the given account",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getAccountAddressBookSource",
                "summary": "Gets an address book source assigned to an account.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Gets an address book source assigned to an account.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AddressBookSource"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "Account or address book not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            },
            "post": {
                "operationId": "updateAccountAddressBookSource",
                "summary": "Assigns or updates an address book source to an account.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Assigns or updates an address book source to an account.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AddressBookSource"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "Account or address book not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            },
            "delete": {
                "operationId": "deleteAccountAddressBookSource",
                "summary": "Removes an address book source from the list of assigned to an account.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Removes an address book source from the list of assigned to an account.\n",
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "Account or address book not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            }
        },
        "/accounts/{accountName}/convertToLicensed": {
            "parameters": [
                {
                    "name": "accountName",
                    "in": "path",
                    "description": "The name of the account that will be converted to licensed.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "convertAccountToLicensed",
                "summary": "Convert an account entity to licensed.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Convert an account entity to a licensed account entity.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n",
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an account with the specified name can not be found on the ST server."
                    }
                }
            }
        },
        "/accounts/{accountName}/addressBook/contacts": {
            "parameters": [
                {
                    "name": "accountName",
                    "in": "path",
                    "description": "The name of the account which address book contacts want to get.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getAddressBookContacts",
                "summary": "Get address book contacts of a specified account entity.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Get address book contacts of a specified account entity.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\n**Known Issue:** The address book contacts collection does not comply with the common json objects representation.\n",
                "parameters": [
                    {
                        "name": "fullName",
                        "in": "query",
                        "description": "The fullName of the address book contact by which to filter. Wildcard matching is supported. Wildcard matching is done in anywhere in its fullName are included.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "primaryEmail",
                        "in": "query",
                        "description": "The primaryEmail of the address book contact by which to filter.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed rows. The limit parameter can not has a null value.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The start row to list. The offset parameter can not has a null value.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AddressBookContacts"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an account with the specified name can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "createAddressBookContact",
                "summary": "Create address book contacts to a specified account entity.",
                "tags": [
                    "accounts",
                    "Accounts"
                ],
                "description": "Persist a new address book contact associated with a specified account entity.        \n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\n**Known Issue:** The address book contacts collection does not comply with the common json objects representation.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AddressBookContacts"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfuly created address book contacts.",
                        "schema": {
                            "$ref": "#/definitions/AddressBookContacts"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an account with the specified name can not be found on the ST server."
                    }
                }
            }
        },
        "/addressBookSources/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "The id of the address book source to be retrieved.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getAddressBookSource",
                "summary": "Gets an address book source.",
                "tags": [
                    "addressBookSources",
                    "Addressbooksources"
                ],
                "description": "Retrieve an address book source.\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AddressBookSource"
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "Address book source not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            },
            "post": {
                "operationId": "updateAddressBookSource",
                "summary": "Updates an existing address book source.",
                "tags": [
                    "addressBookSources",
                    "Addressbooksources"
                ],
                "description": "Updates some properties of an address book source.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AddressBookSource"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "Address book source not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            }
        },
        "/addressBookSources": {
            "get": {
                "operationId": "getAddressBookSources",
                "summary": "Gets Address book sources.",
                "tags": [
                    "addressBookSources",
                    "Addressbooksources"
                ],
                "description": "Returns the list of address book sources registered in a SecureTransport instance. \nThe result list may be empty if there are no entries satisfying the search criteria.\n",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The address book source name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The address book source type to filter by. Expected 'local', 'ldap' or 'custom'",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "parentGroup",
                        "in": "query",
                        "description": "The address book source parentGroup to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "description": "The address book source enabled to filter by. Expected 'true' or 'false' value.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Defines maximum count of returned entries. Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with offset query parameter to get entries at portions.\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Defines the first entry number of an ordered result to get; last entry number to return is (offset + limit - 1). Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with limit query parameter to get entries at portions.\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AddressBookSources"
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            }
        },
        "/addressBookSources/settings/{name}/": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "the name of the configuration option",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "updateAddressBookSettings",
                "summary": "Updates AddressBook.AllowCollaboration server configuration",
                "tags": [
                    "addressBookSources",
                    "Addressbooksources"
                ],
                "description": "Updates AddressBook.AllowCollaboration server configuration",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationOption"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfull operation",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationOption"
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            }
        },
        "/addressBookSources/settings/": {
            "get": {
                "operationId": "getAddressBookSettings",
                "summary": "Gets an address book related server configurations",
                "tags": [
                    "addressBookSources",
                    "Addressbooksources"
                ],
                "description": "Gets address book server configurations AddressBook.Enabled and AddressBook.AllowCollaboration.",
                "responses": {
                    "200": {
                        "description": "Sueccessful operation",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationOptions"
                        }
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            }
        },
        "/administrativeRoles/{name}/members": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the administrative role which members must be extracted.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getAdministrativeRoleMembers",
                "summary": "Get a collection of administrators that are assigned to this administrative role.",
                "tags": [
                    "administrativeRoles",
                    "Administrativeroles"
                ],
                "description": "Get a collection of administrators bounded to this administrative role.\n",
                "responses": {
                    "200": {
                        "description": "successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AdministrativeRoleMembers"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/administrativeRoles/{name}/menus": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the administrative role to assign menus to.",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "operationId": "putAdministrativeRoleMenus",
                "summary": "Assign a collection of accessible menus to an administrative role.",
                "tags": [
                    "administrativeRoles",
                    "Administrativeroles"
                ],
                "description": "Assign a collection of accessible menus to an administrative role.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AdministrativeRoleMenus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation."
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "get": {
                "operationId": "getAdministrativeRoleMenus",
                "summary": "Get a collection of menus an administrative role can access.",
                "tags": [
                    "administrativeRoles",
                    "Administrativeroles"
                ],
                "description": "Get a collection of menus an administrative role can access.\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AdministrativeRoleMenus"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/administrativeRoles/{name}/menus/{menuName}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the administrative role.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "menuName",
                    "in": "path",
                    "description": "The name of the menu which will be added to menus an administrative role can access.",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "operationId": "putAdministrativeRoleMenus",
                "summary": "Add a menu to a collection of menus an administrative role can access.",
                "tags": [
                    "administrativeRoles",
                    "Administrativeroles"
                ],
                "description": "Add a menu to a collection of menus an administrative role can access.",
                "responses": {
                    "200": {
                        "description": "successful operation."
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "delete": {
                "operationId": "removeAdministrativeRoleMenus",
                "summary": "Remove a menu from a collection of menus an administrative role can access.",
                "tags": [
                    "administrativeRoles",
                    "Administrativeroles"
                ],
                "description": "Remove a menu from a collection of menus an administrative role can access.",
                "responses": {
                    "204": {
                        "description": "successful operation."
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/administrativeRoles/{name}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the administrative role which will be deleted.",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "operationId": "deleteAdministrativeRole",
                "summary": "Delete an administrative role instance.",
                "tags": [
                    "administrativeRoles",
                    "Administrativeroles"
                ],
                "description": "Delete an administrative role instance. All administrators assigned to this role will also be deleted.\n",
                "responses": {
                    "204": {
                        "description": "A successfully deleted administrative role."
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an administrative role with specified name can not be found on the SecureTransport server."
                    },
                    "409": {
                        "description": "Conflict - an administrative role with the same properties already exists on the SecureTransport Server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "put": {
                "operationId": "updateAdministrativeRole",
                "summary": "Update an existing administrative role on the SecureTransport server.",
                "tags": [
                    "administrativeRoles",
                    "Administrativeroles"
                ],
                "description": "Update an existing on SecureTransport Server administrative role. The update fully overrides the previously existing administrative role on the SecureTransport server.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AdministrativeRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully updated administrative role."
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "409": {
                        "description": "Conflict - an administrative role with the same properties already exists on SecureTransport Server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "get": {
                "operationId": "getAdministrativeRole",
                "summary": "Get an instance of an administrative role associated with the provided name.",
                "tags": [
                    "administrativeRoles",
                    "Administrativeroles"
                ],
                "description": "Get an instance of an administrative role associated with the provided name.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AdministrativeRole"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/administrativeRoles/{name}/moveMembersToRole={targetRoleName}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the administrative role which will be deleted.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "targetRoleName",
                    "in": "path",
                    "description": "The name of the administrative role to which administrators will be moved.",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "operationId": "deleteAdministrativeRole",
                "summary": "Delete an administrative role instance.",
                "tags": [
                    "administrativeRoles",
                    "Administrativeroles"
                ],
                "description": "Delete an administrative role instance. All administrators assigned to this role will\nbe moved to a target administrative role, specified with a second query parameter.\n",
                "responses": {
                    "204": {
                        "description": "A successfully deleted administrative role."
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an administrative role with a specified name can not be found on the SecureTransport server."
                    },
                    "409": {
                        "description": "Conflict - an administrative role with the same properties already exists on the SecureTransport Server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/administrativeRoles": {
            "post": {
                "operationId": "POST_administrativeRoles",
                "summary": "Create a single instance of an administrative role on the SecureTransport server.",
                "tags": [
                    "administrativeRoles",
                    "Administrativeroles"
                ],
                "description": "Create a single instance of an administrative role on the SecureTransport server.",
                "produces": [
                    "text/plain"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AdministrativeRole"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "A successfully created administrative role. Location header points to the URL from which a newly-created resource can be accessed.\n"
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "409": {
                        "description": "Conflict â€“ the administrative role with the same properties already exists on the SecureTransport server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "get": {
                "operationId": "getAdministrativeRoles",
                "summary": "Get a collection of available administrative roles on SecureTransport server.",
                "tags": [
                    "administrativeRoles",
                    "Administrativeroles"
                ],
                "description": "Get a collection of all administrative roles on the SecureTransport server.",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed rows. The limit parameter can only have a non-negative integer value. If the limit parameter is set to 0 or it is null, then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The initial row to list all administrative roles. The offset parameter can only have a non-negative integer value. If this parameter is not set, then it is considered 0.\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "roleName",
                        "in": "query",
                        "description": "An administrative role name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "roleType",
                        "in": "query",
                        "description": "An administrative role type. Possible values can be limited or master.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "isBounceAllowed",
                        "in": "query",
                        "description": "Is bouncing of a server currently allowed for this administrative role.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AdministrativeRoles"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/administrators/{name}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the administrator.",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "operationId": "deleteAdministrator",
                "summary": "Delete an administrator.",
                "tags": [
                    "administrators",
                    "Administrators"
                ],
                "description": "Delete an administrator.",
                "responses": {
                    "204": {
                        "description": "Successfully deleted the administrator."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - the administrator with the specified name was not found."
                    },
                    "405": {
                        "description": "Method Not Allowed - the administrator cannot be deleted."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "get": {
                "operationId": "getAdministrator",
                "summary": "Get an administrator.",
                "tags": [
                    "administrators",
                    "Administrators"
                ],
                "description": "Get an Administrator on the SecureTransport server.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Administrator"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - the administrator with the specified name was not found."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "put": {
                "operationId": "updateAdministrator",
                "summary": "Update an administrator.",
                "tags": [
                    "administrators",
                    "Administrators"
                ],
                "description": "Update an existing administrator on the SecureTransport server. The update fully overrides the previously existing administrator on the SecureTransport server.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AdministratorRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "A successfully updated administrator."
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - the administrator with the specified name was not found."
                    },
                    "405": {
                        "description": "Method Not Allowed - the administrator cannot be updated."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/administrators/{name}/businessUnits": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the administrator.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getAdministratorBusinessUnits",
                "summary": "Get business units assigned to an administrator.",
                "tags": [
                    "administrators",
                    "Administrators"
                ],
                "description": "Get a collection with the names of the business units assigned to a delegated administrator.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - administrator with the specified name was not found."
                    },
                    "405": {
                        "description": "Method Not Allowed - the administrator is not a delegated administrator."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "put": {
                "operationId": "assignBusinessUnitsToAdministrator",
                "summary": "Assign a business units to an administrator.",
                "tags": [
                    "administrators",
                    "Administrators"
                ],
                "description": "Assign a business units to a delegated administrator.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AdministratorBUs"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - the administrator and/or the business unit with such names were not found."
                    },
                    "405": {
                        "description": "Method Not Allowed - the administrator is not a delegated administrator."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/administrators": {
            "get": {
                "operationId": "getAdministrators",
                "summary": "Get available administrators.",
                "tags": [
                    "administrators",
                    "Administrators"
                ],
                "description": "Get a collection of all administrators on the SecureTransport server.",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed rows. The limit parameter can only have a non-negative integer value. If the limit parameter is set to 0 or it is null, then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The initial row to list all administrators. The offset parameter can only have a non-negative integer value. If this parameter is not set, then it is considered 0.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The administrator's name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "roleName",
                        "in": "query",
                        "description": "Name of the administrator's administrative role.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "roleType",
                        "in": "query",
                        "description": "Type of the administrator's administrative role.",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "MASTER",
                            "LIMITED"
                        ]
                    },
                    {
                        "name": "localAuthentication",
                        "in": "query",
                        "description": "Search for local-authenticated or external-authenticated administrators.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "passwordExpired",
                        "in": "query",
                        "description": "Search for administrators with an expired password.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "dualAuthentication",
                        "in": "query",
                        "description": "Search for administrators which authenticate with a certificate and password.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "locked",
                        "in": "query",
                        "description": "Search for locked administrators.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Administrators"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "post": {
                "operationId": "createAdministrator",
                "summary": "Create an administrator.",
                "tags": [
                    "administrators",
                    "Administrators"
                ],
                "description": "Create an administrator on the SecureTransport server.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AdministratorRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "A successfully created administrator. Location header points to the URL from which a newly-created resource can be accessed."
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/administrators/{name}/businessUnits/{buName}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the administrator.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "buName",
                    "in": "path",
                    "description": "The name of the business unit.",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "operationId": "assignBusinessUnitToAdministrator",
                "summary": "Assign a business unit to an administrator.",
                "tags": [
                    "administrators",
                    "Administrators"
                ],
                "description": "Assign a business unit to a delegated administrator.",
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - the administrator and/or the business unit with such names were not found."
                    },
                    "405": {
                        "description": "Method Not Allowed - the administrator is not a delegated administrator."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "delete": {
                "operationId": "unassignBusinessUnitFromAdministrator",
                "summary": "Unassign a business unit from an administrator.",
                "tags": [
                    "administrators",
                    "Administrators"
                ],
                "description": "Unassign a business unit from a delegated administrator.",
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - the administrator and/or the business unit with such names were not found."
                    },
                    "405": {
                        "description": "Method Not Allowed - the administrator is not a delegated administrator."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/applications/{name}/schedules": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the application entity.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getApplicationSchedules",
                "summary": "Get the schedule for an application entity with a with given name.",
                "tags": [
                    "applications",
                    "Applications"
                ],
                "description": "Get the schedule for an application entity with a with given name.\n\n`Permissions`: \"APPLICATION_FORM\". \n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Schedules"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an application with the specified name can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "createApplicationSchedules",
                "summary": "Create a schedule for an application entity with a with given name.",
                "tags": [
                    "applications",
                    "Applications"
                ],
                "description": "Create a schedule for an application entity with a with given name. Creation of schedule is supported only for application of types: 'TransferLogMaint', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'PackageRetentionMaint', 'UnlicensedAccountMaint', 'AuditLogMaint', and 'LoginThresholdMaintenance'.\n\n`Permissions`: \"APPLICATION_FORM\". \n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Schedules"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully created schedules for the given application entity."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an application with the specified name can not be found on the ST server."
                    }
                }
            }
        },
        "/applications/{name}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the application entity.",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "operationId": "createOrUpdateApplication",
                "summary": "Create an application entity or replace existing application entity.",
                "tags": [
                    "applications",
                    "Applications"
                ],
                "description": "Create an application entity or replace existing application entity with the same name.\n\n`Permissions`: \"APPLICATION_FORM\". \n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Application"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully created application entity or successfully replaced existing application entity."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an application with the specified name can not be found on the ST server."
                    }
                }
            },
            "get": {
                "operationId": "getApplication",
                "summary": "Get an application entity.",
                "tags": [
                    "applications",
                    "Applications"
                ],
                "description": "Get an application entity.\n\n`Permissions`: \"APPLICATION_FORM\". \n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Application"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an application with the specified name can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "updateApplicationProperties",
                "summary": "Update properties of an application entity.",
                "tags": [
                    "applications",
                    "Applications"
                ],
                "description": "Update properties of an application entity.\n\n`Permissions`: \"APPLICATION_FORM\". \n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Application"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated properties of the application entity."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an application with the specified name can not be found on the ST server."
                    }
                }
            },
            "delete": {
                "operationId": "deleteApplication",
                "summary": "Delete an application entity.",
                "tags": [
                    "applications",
                    "Applications"
                ],
                "description": "Delete an application entity.\n\n`Permissions`: \"APPLICATION_FORM\". \n",
                "responses": {
                    "204": {
                        "description": "Successfully deleted application entity from the ST server."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an application with the specified name can not be found on the ST server."
                    }
                }
            }
        },
        "/applications/{name}/schedules/{scheduleTag}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the application entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "scheduleTag",
                    "in": "path",
                    "description": "The schedule tag name.",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "operationId": "createOrUpdateApplicationSchedule",
                "summary": "Create a schedule or replace existing application schedule with the same tag.",
                "tags": [
                    "applications",
                    "Applications"
                ],
                "description": "Create a schedule or replace existing application schedule with the same tag.\n\n`Permissions`: \"APPLICATION_FORM\". \n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Schedule"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully created (replaced) schedule for the given application entity."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an application with the specified name or/and an schedule tag for the given application entity can not be found on the ST server."
                    }
                }
            },
            "get": {
                "operationId": "getApplicationSchedule",
                "summary": "Get schedule for an application entity with a with given name.",
                "tags": [
                    "applications",
                    "Applications"
                ],
                "description": "Get schedule for an application entity with a with given name.\n\n`Permissions`: \"APPLICATION_FORM\". \n",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Schedule"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an application with the specified name or/and an schedule tag for the given application entity can not be found on the ST server."
                    }
                }
            },
            "delete": {
                "operationId": "deleteApplicationSchedule",
                "summary": "Deletes a schedule for a given application entity.",
                "tags": [
                    "applications",
                    "Applications"
                ],
                "description": "Deletes a schedule for a given application entity.\n\n`Permissions`: \"APPLICATION_FORM\". \n",
                "responses": {
                    "204": {
                        "description": "Successfully deleted schedule for the given application entity."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an application with the specified name or/and an schedule tag for the given application entity can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "updateApplicationScheduleProperties",
                "summary": "Update schedule properties for an application entity.",
                "tags": [
                    "applications",
                    "Applications"
                ],
                "description": "Update schedule properties for an application entity.\n\n`Permissions`: \"APPLICATION_FORM\". \n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Schedule"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated schedule properties for the given application entity."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an application with the specified name or/and an schedule tag for the given application entity can not be found on the ST server."
                    }
                }
            }
        },
        "/applications": {
            "get": {
                "operationId": "getApplications",
                "summary": "Get collection of applications on the ST server.",
                "tags": [
                    "applications",
                    "Applications"
                ],
                "description": "Get collection of applications on the ST server.\n\n`Permissions`: \"APPLICATION_FORM\". \n\n**Known Issue:** The 'businessUnits' property is not being returned in the application entities.\n",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The application name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The application type to filter by. Application types are: 'HumanSystem', 'StandardRouter', 'SiteMailbox', 'SharedFolder', 'TransferLogMaint', 'Basic', 'AdvancedRouting', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'SynchronyTransfer', 'MBFT', 'PackageRetentionMaint', 'UnlicensedAccountMaint', 'AuditLogMaint', 'LoginThresholdMaintenance'.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "businessUnit",
                        "in": "query",
                        "description": "The business unit to filter by.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Applications"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if businessUnit with specified name can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "createApplications",
                "summary": "Create collection of applications on the ST server.\n",
                "tags": [
                    "applications",
                    "Applications"
                ],
                "description": "Create collection of applications on the ST server. Depending on the application `type` property there are 16 types of accounts: 'HumanSystem', 'StandardRouter', 'SiteMailbox', 'SharedFolder', 'TransferLogMaint', 'Basic', 'AdvancedRouting', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'SynchronyTransfer', 'MBFT', 'PackageRetentionMaint', 'UnlicensedAccountMaint', 'AuditLogMaint' and 'LoginThresholdMaintenance'.\n\n`Permissions`: \"APPLICATION_FORM\".\n\nNote: application types that does not support subscribing to are: 'TransferLogMaint', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'UnlicensedAccountMaint', 'PackageRetentionMaint'\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Applications"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfuly created collection of application entities."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    }
                }
            }
        },
        "/auditLog/count": {
            "get": {
                "operationId": "getAuditLogEntriesCount",
                "summary": "Get the count of audit log entities on the ST server.",
                "tags": [
                    "auditLog",
                    "Auditlog"
                ],
                "description": "Get the count of audit log entities on the ST server.\n\n`Permissions`: \"AUDIT_LOG_FORM\", \"AUDIT_LOG_FORM_1\".\n",
                "parameters": [
                    {
                        "name": "fromDate",
                        "in": "query",
                        "description": "The from date in RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "The end date in RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "duration",
                        "in": "query",
                        "description": "The time duration in hours.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "userName",
                        "in": "query",
                        "description": "The name/part of name of the user who modified the object.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "remoteAddress",
                        "in": "query",
                        "description": "The IP address of the remote client that sent the request.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "objectType",
                        "in": "query",
                        "description": "The type of the object modified.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "objectName",
                        "in": "query",
                        "description": "The name/part of name of the object modified.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "objectIdentifier",
                        "in": "query",
                        "description": "The object identifier.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "operationType",
                        "in": "query",
                        "description": "The type of the operation.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "The description/part of description of the audit operation.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "configurationId",
                        "in": "query",
                        "description": "A list of cluster node configuration id-s.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/CollectionEntriesCount"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a userName with specified name/part of name can not be found on the ST server."
                    }
                }
            }
        },
        "/auditLog": {
            "get": {
                "operationId": "getAuditLogEntries",
                "summary": "Get the collection of audit log entities on the ST server.",
                "tags": [
                    "auditLog",
                    "Auditlog"
                ],
                "description": "Get the collection of audit log entities on the ST server.\n\n`Permissions`: \"AUDIT_LOG_FORM\", \"AUDIT_LOG_FORM_1\".\n\n**Known Issue:** The audit log entries collection does not comply with the common json objects representation.\n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The number of entries to list (the number must be a positive number). If limit is set to 0 then the default limit value of 100 entries applies. The maximum allowed number of entries is 200.\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The offset from the first result. By default is 0.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "fromDate",
                        "in": "query",
                        "description": "The from date in RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "The end date in RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "duration",
                        "in": "query",
                        "description": "The time duration in hours.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "userName",
                        "in": "query",
                        "description": "The name/part of name of the user who modified the object.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "remoteAddress",
                        "in": "query",
                        "description": "The IP address of the remote client that sent the request.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "objectType",
                        "in": "query",
                        "description": "The type of the object modified.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "objectName",
                        "in": "query",
                        "description": "The name/part of name of the object modified.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "objectIdentifier",
                        "in": "query",
                        "description": "The object identifier.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "operationType",
                        "in": "query",
                        "description": "The type of the operation.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "The description/part of description of the audit operation.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "configurationId",
                        "in": "query",
                        "description": "A list of cluster node configuration id-s.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Set of comma separated strings of audit log properties to return.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AuditLogEntries"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a userName with specified name/part of name can not be found on the ST server."
                    }
                }
            }
        },
        "/auditLog/{auditLogId}": {
            "parameters": [
                {
                    "name": "auditLogId",
                    "in": "path",
                    "description": "The id of the audit log entity.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getAuditLogEntry",
                "summary": "Get a single audit log entity.",
                "tags": [
                    "auditLog",
                    "Auditlog"
                ],
                "description": "Get a single audit log entity.\n\n`Permissions`: \"AUDIT_LOG_FORM\", \"AUDIT_LOG_FORM_1\".\n",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuditLogEntry"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - if audit log entity with specified ID can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "updateAuditLogEntryDescription",
                "summary": "Update description of an audit log entity.",
                "tags": [
                    "auditLog",
                    "Auditlog"
                ],
                "description": "Updates an audit log entry description.\n\n`Permissions`: \"AUDIT_LOG_FORM\", \"AUDIT_LOG_FORM_1\".\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AuditLogEntry"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuditLogEntry"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - if audit log entity with specified ID can not be found on the ST server."
                    }
                }
            }
        },
        "/auditLog/export": {
            "get": {
                "operationId": "exportAuditLog",
                "summary": "Get the audit log entities in a CSV format.",
                "tags": [
                    "auditLog",
                    "Auditlog"
                ],
                "description": "Get the audit log entities on the ST server in a CSV format based on the specified criteria.\n\n`Permissions`: \"AUDIT_LOG_FORM\", \"AUDIT_LOG_FORM_1\".\n",
                "produces": [
                    "text/csv"
                ],
                "parameters": [
                    {
                        "name": "fromDate",
                        "in": "query",
                        "description": "The from date in RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "The end date in RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "duration",
                        "in": "query",
                        "description": "The time duration in hours.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "userName",
                        "in": "query",
                        "description": "The name/part of name of the user who modified the object.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "remoteAddress",
                        "in": "query",
                        "description": "The IP address of the remote client that sent the request.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "objectType",
                        "in": "query",
                        "description": "The type of the object modified.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "objectName",
                        "in": "query",
                        "description": "The name/part of name of the object modified.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "objectIdentifier",
                        "in": "query",
                        "description": "The object identifier.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "operationType",
                        "in": "query",
                        "description": "The type of the operation.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "description",
                        "in": "query",
                        "description": "The description/part of description of the audit operation.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "configurationId",
                        "in": "query",
                        "description": "A list of cluster node configuration id-s.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a userName with specified name/part of name can not be found on the ST server."
                    }
                }
            }
        },
        "/auditLog/objectTypes": {
            "get": {
                "operationId": "getAuditedObjectTypes",
                "summary": "Get types of the audited objects.",
                "tags": [
                    "auditLog",
                    "Auditlog"
                ],
                "description": "Get types of the audited objects.\n\n`Permissions`: \"AUDIT_LOG_FORM\", \"AUDIT_LOG_FORM_1\".\n",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuditedObjectTypes"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    }
                }
            }
        },
        "/businessUnits/{name}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the business unit that need to be updated.",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "operationId": "createOrUpdateBusinessUnit",
                "summary": "Create business unit entity on the ST server or replace existing business unit entity with the same name.",
                "tags": [
                    "businessUnits",
                    "Businessunits"
                ],
                "description": "Create business unit entity on the ST server or replace existing business unit entity with the same name.\n\n`Permissions`: \"BUSINESS_UNIT_FORM\".\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BusinessUnit"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully created (replaced) business unit entity."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - if a business unit with specified name can not be found on the ST server."
                    }
                }
            },
            "delete": {
                "operationId": "deleteBusinessUnit",
                "summary": "Delete a business unit entity from the ST server.",
                "tags": [
                    "businessUnits",
                    "Businessunits"
                ],
                "description": "Delete a business unit entity from the ST server.\n\n`Permissions`: \"BUSINESS_UNIT_FORM\".\n",
                "responses": {
                    "204": {
                        "description": "Successfully deleted business unit entity."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - if a business unit with specified name can not be found on the ST server."
                    }
                }
            },
            "get": {
                "operationId": "getBusinessUnit",
                "summary": "Get a specific business unit entity.",
                "tags": [
                    "businessUnits",
                    "Businessunits"
                ],
                "description": "Get a specific business unit entity.\n\n`Permissions`: \"BUSINESS_UNIT_FORM\".\n",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/BusinessUnit"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - if a business unit with specified name can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "updateBusinessUnitProperties",
                "summary": "Update properties of business unit entity.",
                "tags": [
                    "businessUnits",
                    "Businessunits"
                ],
                "description": "Update properties of business unit entity.\n\n`Permissions`: \"BUSINESS_UNIT_FORM\".\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BusinessUnit"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated properties of specified business unit entity."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - if a business unit with specified name can not be found on the ST server."
                    }
                }
            }
        },
        "/businessUnits/{name}/addressBookSources/{id}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "the name of a business unit",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "id",
                    "in": "path",
                    "description": "Id of the address book source that needs to be removed",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "operationId": "deleteBuAddressBookSource",
                "summary": "Removes an address book source from ones assigned to a business unit",
                "tags": [
                    "businessUnits",
                    "Businessunits"
                ],
                "description": "Removes an address book source from ones assigned to a business unit\n",
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "Business unit or address book source not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            },
            "post": {
                "operationId": "updateBuAddressBookSource",
                "summary": "Assigns and updates an address book source to a business unit.",
                "tags": [
                    "businessUnits",
                    "Businessunits"
                ],
                "description": "Assigns and updates an address book source to a business unit.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AddressBookSource"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "Business unit or address book not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            },
            "get": {
                "operationId": "getBuAddressBookSource",
                "summary": "Gets an address book source assigned to a business unit.",
                "tags": [
                    "businessUnits",
                    "Businessunits"
                ],
                "description": "Gets an address book source assigned to a business unit.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AddressBookSource"
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "Business unit or address book source not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            }
        },
        "/businessUnits/{name}/addressBookSources": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "the name of a business unit which address books needs to be retrieved.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getBuAddressBookSources",
                "summary": "Gets Business unit address book sources.",
                "tags": [
                    "businessUnits",
                    "Businessunits"
                ],
                "description": "Returns the list of assigned address book sources assigned to a business unit. \nThe result list may be empty if there are no entries satisfying the search cretieria.\n",
                "parameters": [
                    {
                        "name": "abname",
                        "in": "query",
                        "description": "The address book source name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The address book source type to filter by. Expected 'local', 'ldap' or 'custom'",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "parentGroup",
                        "in": "query",
                        "description": "The address book source parentGroup to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "description": "The address book source enabled to filter by. Expected 'true' or 'false' value.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Defines maximum count of returned entries. Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with offset query parameter to get entries at portions.\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Defines the first entry number of an ordered result to get; last entry number to return is (offset + limit - 1). Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with limit query parameter to get entries at portions.\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AddressBookSources"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "Business unit not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            },
            "put": {
                "operationId": "overwriteBuAddressBookSources",
                "summary": "Replaces address book sources assigned to a business unit.",
                "tags": [
                    "businessUnits",
                    "Businessunits"
                ],
                "description": "Replaces address book data sources assigned to a business unit.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AddressBookSources"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AddressBookSources"
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "Business unit not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            }
        },
        "/businessUnits": {
            "post": {
                "operationId": "createBusinessUnits",
                "summary": "Create collection of business units on the ST server.",
                "tags": [
                    "businessUnits",
                    "Businessunits"
                ],
                "description": "Create collection of business units on the ST server.         \n  \n`Permissions`: \"BUSINESS_UNIT_FORM\".\n\nBusiness unit entities support following additional custom properties: \n- `businessUnitCustomArchivingFolder` - archiving folder custom property; \n- `businessUnitEncryptionCertificatePolicy` - archiving certificate policy custom property; \n- `enableScanWithFirstIcapServer` - define if scan with First ICAP server is enabled for users of this business unit. Three options are possible - 'default' (inherit parent setup); 'custom' (perform encryption with custom certificate) and 'disabled' (do not perform encryption of archived files); \n- `businessUnitCustomEncryptionCertificate` - custom encryption certificate alias, empty string if it is not set;\n- `enableScanWithSecondIcapServer` - define if scan with Second ICAP server is enabled for users of this business unit; \n- `allowFileArchivingPolicyModifying` - define whether child business units are allowed to modify archiving policy; \n- `AllowSharedFoldersCollaboration` - define if Shared Folders collaboration is enabled for the business unit successors; \n- `businessUnitArchivingFolderPolicy` - define whether the BU uses custom archiving folder; \n- `customArchivingFileSizePolicy` - define whether the BU uses custom archiving file size;\n- `customArchivingFileSize` - archiving custom file size property;\n- `fileArchivingPolicy` - define whether child business units are allowed to modify archiving policy; \n- `transfersWebServiceAllowed` - indicate whether access to the transfers resource from the end user RESTful API is allowed.\n- `bandwidthInboundLimit` - define maximum kb/s applied for inbound transfers per account in this business unit. The limit will be applied regardless of cluster/streaming deployment configurations or number of sessions open up by each account..\n- `bandwidthOutboundLimit` - define maximum kb/s applied for outbound transfers per account. The limit will be applied regardless of cluster/streaming deployment configurations or number of sessions open up by each account.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/BusinessUnits"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully created collection of business unit entities."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if account/application/route with specified name/id can not be found on the ST server."
                    }
                }
            },
            "get": {
                "operationId": "getBusinessUnits",
                "summary": "Get the collection of business unit entities on the ST server.",
                "tags": [
                    "businessUnits",
                    "Businessunits"
                ],
                "description": "Get the collection of business unit entities on the ST server.",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).\n\n`Permissions`: \"BUSINESS_UNIT_FORM\".\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "account",
                        "in": "query",
                        "description": "The account name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "application",
                        "in": "query",
                        "description": "The application name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "route",
                        "in": "query",
                        "description": "The route id to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "icapServer",
                        "in": "query",
                        "description": "The name of the ICAP server to filter by.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/BusinessUnits"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if account/application/route with specified name/id can not be found on the ST server."
                    }
                }
            }
        },
        "/certificates/certificateRequests/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "The ID of the Certificate Signing Request to delete.",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "operationId": "deleteCertificateRequest",
                "summary": "Delete a Certificate Signing Request.",
                "tags": [
                    "certificates",
                    "Certificates"
                ],
                "description": "Delete a Certificate Signing Request.\n\n`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
                "responses": {
                    "204": {
                        "description": "Successfully deleted certificate signing request."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a certificate signing request with the specified ID can not be found on the ST server."
                    }
                }
            }
        },
        "/certificates": {
            "post": {
                "operationId": "generateCertificate",
                "summary": "Create certificate entity on the ST server.",
                "tags": [
                    "certificates",
                    "Certificates"
                ],
                "description": "Create certificate entity on the ST server.\n        \n`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nOn user account level there are three types of certificates depending on the certificate usage - `login`, `private` and `partner`. \n\nNotes: \n    - Only 'ca' trusted certificate could be regenerated.\n    - Regenerated 'ca' trustedcertificate can not be of type 'pgp'. \n    - Login certificates can not be of type 'pgp'.\n",
                "produces": [
                    "multipart/mixed"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Certificate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created certificate entity.",
                        "schema": {
                            "$ref": "#/definitions/MultiPart"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Forbidden - the returned error message will tell what was incorrect in the request. For example if overwrite a trusted certificate and the new one has the same alias as the existing one.\n"
                    }
                }
            },
            "get": {
                "operationId": "getCertificates",
                "summary": "Get the collection of certificates on the ST server.",
                "tags": [
                    "certificates",
                    "Certificates"
                ],
                "description": "Get the collection of certificates on the ST server.\n\n`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nCertificate entity properties 'keySize', 'validityPeriod', 'caPassword', 'password' and 'keyAlgorithm' are used only for certificate generation, they can not be get (listed) via the REST API (they have value null).\n\n**Known Issue:** The certificates collection does not comply with the common json objects representation.\n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed certificate entities. The limit parameter can has only positive integer value. If the limit parameter is not set then as limit is set the max Integer value: 2 147 483 647\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The index of the first certificate entity reference to get.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The certificate type to search for. Possible values are 'pgp' and 'x509'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "usage",
                        "in": "query",
                        "description": "The certificate usage to search for. Possible values are 'private', 'local', 'partner', 'login' and 'trusted'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "account",
                        "in": "query",
                        "description": "The account name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The certificate name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fingerprintAlgorithm",
                        "in": "query",
                        "description": "The algorithm to be used for fingerprint generation.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "base64EncodedFingerprint",
                        "in": "query",
                        "description": "Whether the fingerprint should be Base64 encoded.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "disableChaining",
                        "in": "query",
                        "description": "Whether the chaining of certificates should be disabled, e.g. for performance improvement.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Certificates"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if account with specified name can not be found on the ST server."
                    }
                }
            }
        },
        "/certificates/{id}/updateAccess": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "The id of the certificate entity which access level will update.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "updateCertificateAccess",
                "summary": "Update the access level of a certificate entity.",
                "tags": [
                    "certificates",
                    "Certificates"
                ],
                "description": "Update the access level of a certificate entity. Certificate access level can be set only for private and partner certificates.\n\n`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CertificateAccessLevel"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated certificate access level."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - if a certificate entity with the specified ID can not be found on the ST server."
                    }
                }
            }
        },
        "/certificates/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "The ID of the certificate entity to get.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getCertificateDetails",
                "summary": "Get the certificate details for a certificate entity.",
                "tags": [
                    "certificates",
                    "Certificates"
                ],
                "description": "Get the certificate details for a certificate entity.\n\n`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
                "parameters": [
                    {
                        "name": "fingerprintAlgorithm",
                        "in": "query",
                        "description": "The algorithm to be used for fingerprint generation.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "base64EncodedFingerprint",
                        "in": "query",
                        "description": "Whether the fingerprint should be Base64 encoded.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Certificate"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - if a certificate entity with the specified ID can not be found on the ST server."
                    }
                }
            },
            "delete": {
                "operationId": "deleteCertificate",
                "summary": "Delete a certificate entity.",
                "tags": [
                    "certificates",
                    "Certificates"
                ],
                "description": "Delete a certificate entity having the specified ID.\n\n`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
                "responses": {
                    "204": {
                        "description": "Successfully deleted certificate entity."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - if a certificate entity with the specified ID can not be found on the ST server."
                    }
                }
            }
        },
        "/certificates/certificateAliases": {
            "get": {
                "operationId": "getCertificateAliases",
                "summary": "Get the collection of certificate aliases on the ST server.",
                "tags": [
                    "certificates",
                    "Certificates"
                ],
                "description": "Get the collection of certificate aliases on the ST server.\n\n`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nCertificate entity properties 'keySize', 'validityPeriod', 'caPassword', 'password' and 'keyAlgorithm' are used only for certificate generation, they can not be get (listed) via the REST API (they have value null).\n\n**Known Issue:** The certificates collection does not comply with the common json objects representation.\n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed certificate entities. The limit parameter can has only positive integer value. If the limit parameter is not set then as limit is set the max Integer value: 2 147 483 647\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The index of the first certificate entity reference to get.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The certificate type to search for. Possible values are 'pgp' and 'x509'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "usage",
                        "in": "query",
                        "description": "The certificate usage to search for. Possible values are 'private', 'local', 'partner', 'login' and 'trusted'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "account",
                        "in": "query",
                        "description": "The account name to filter by.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if account with specified name can not be found on the ST server."
                    }
                }
            }
        },
        "/certificates/certificateRequests/complete": {
            "post": {
                "operationId": "completeCertificateRequest",
                "summary": "Complete Certificate Signing Request.",
                "tags": [
                    "certificates",
                    "Certificates"
                ],
                "description": "Complete Certificate Signing Request. \n\n`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nImport a certificate to the local X509 keystore for an existing certificate signing request. The certificate, along with the private key of the corresponding CSR, are imported.  The CSR is removed following a successful import. The response is holding the newly created Certificate entity.\n\n**Known Issue:** This functionality is not working as expected and certificate signing requests can not be completed.\n",
                "consumes": [
                    "multipart/mixed"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MultiPart"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully completed certificate signing request operation.",
                        "schema": {
                            "$ref": "#/definitions/Certificate"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/certificates/certificateRequests": {
            "get": {
                "operationId": "getCertificateRequests",
                "summary": "Get the collection of certificate requests on the ST server.",
                "tags": [
                    "certificates",
                    "Certificates"
                ],
                "description": "Get the collection of certificate requests on the ST server. \n\n`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nCertificate request properties 'keySize' and 'usage' are used only for certificate generation. When get certificate requests, 'usage' property will not be listed and 'keySize' will be listed with a zero value.\n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed entities. The limit parameter can has only positive integer value. If the limit parameter is not set then as limit is set the max Integer value: 2 147 483 647\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The index of the first certificate entity reference to get.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "usage",
                        "in": "query",
                        "description": "The certificate request usage to search for. Possible values are 'private', 'local'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "account",
                        "in": "query",
                        "description": "The account name to filter by.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/CertificateRequests"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if account with specified name can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "generateCertificateRequest",
                "summary": "Generate Certificate Signing Request on the ST server.",
                "tags": [
                    "certificates",
                    "Certificates"
                ],
                "description": "Generate Certificate Signing Request on the ST server.\n\n`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
                "produces": [
                    "multipart/mixed"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CertificateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created certificate signing request operation.",
                        "schema": {
                            "$ref": "#/definitions/MultiPart"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    }
                }
            }
        },
        "/certificates/{id}/duplicate": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "The ID of the certificate entity to duplicate.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "duplicateCertificate",
                "summary": "Duplicate a certificate entity.",
                "tags": [
                    "certificates",
                    "Certificates"
                ],
                "description": "Duplicate a certificate with the given ID and save it with a different name. Login certificates can not be duplicated - they are unique.\n\n`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Certificate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully duplicated certificate entity with a new name.",
                        "schema": {
                            "$ref": "#/definitions/Certificate"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - if a certificate entity with the specified ID can not be found on the ST server."
                    }
                }
            }
        },
        "/certificates/export": {
            "post": {
                "operationId": "exportCertificate",
                "summary": "Export a certificate entity.",
                "tags": [
                    "certificates",
                    "Certificates"
                ],
                "description": "Export a certificate entity. \n\n`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nNote: A login certificate could be exported only by certificate id. If export the private key of a trusted certificate then the private key protection password is required.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Certificate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/MultiPart"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a certificate entity as specified can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error - for example if public key algorithm is not correct"
                    }
                }
            }
        },
        "/certificates/import": {
            "post": {
                "operationId": "importCertificate",
                "summary": "Import certificate entity to the ST server.",
                "tags": [
                    "certificates",
                    "Certificates"
                ],
                "description": "Import certificate entity to the ST server. \n\n`Permissions`: \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nImport X509, SSH or PGP key. Can not import login certificate to account template. The response is holding the newly created Certificate entity.\n\n`Note`: The MIME boundary is hardcoded to 'demoBoundary' because of swagger limitations (reffer to https://github.com/OAI/OpenAPI-Specification/issues/303 for more information).\n\n**Known issue:** The import of x509 certificates of local and private usage can not be done via text representation of the certificate. This can be done with importing the `PKCS #12` format file.\n",
                "consumes": [
                    "multipart/mixed;boundary=demoBoundary"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MultiPart"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Certificate"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a certificate entity as specified can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error - for example if certificate data is not correct."
                    }
                }
            }
        },
        "/clusterNodes": {
            "get": {
                "operationId": "getClusterNodesInfo",
                "summary": "Get information for the cluster nodes in the system.",
                "tags": [
                    "clusterNodes",
                    "Clusternodes"
                ],
                "description": "Get information for the cluster nodes in the system.     \n\n**Known Issue:** The cluster nodes collection does not comply with the common json objects representation.\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/ClusterNodesInformation"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    }
                }
            }
        },
        "/configurationProfiles/{profile}/options": {
            "parameters": [
                {
                    "name": "profile",
                    "in": "path",
                    "description": "The name of the configuration profile to which configuration options to update.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "updateMutipleOptionProperties",
                "summary": "Update the list of already existing configuration options in a configuration profile.",
                "tags": [
                    "configurationProfiles",
                    "Configurationprofiles"
                ],
                "description": "Update the list of already existing configuration options in a configuration profile.\n\n`Permissions`: \"SERVER_CONFIGURATION_FORM\", \"SUPPORT_TOOL_CONFIGURATION_FORM\".\n\n**Known Issue:** Can not update properties, if \"values\" property is not expressly specified with a new value. \n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationOptions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated operation",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationOptions"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Internal Server Error - for example if the specified configuration options to be updated in the specified profile can not be found on the ST server and respectively can not be updated."
                    }
                }
            },
            "get": {
                "operationId": "getOptions",
                "summary": "Get the configuration options in a configration profile entity.",
                "tags": [
                    "configurationProfiles",
                    "Configurationprofiles"
                ],
                "description": "Get the configuration options in a configration profile entity.        \n\n`Permissions`: \"SERVER_CONFIGURATION_FORM\", \"SUPPORT_TOOL_CONFIGURATION_FORM\".\n\n**Known Issue:** The configuration options collection does not comply with the common json objects representation.      \n",
                "parameters": [
                    {
                        "name": "startsWith",
                        "in": "query",
                        "description": "If specified, retrieves all configuration options starting with the given name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "node",
                        "in": "query",
                        "description": "The node identifier for the option. If this property is not set then all options are returned.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationOptions"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Internal Server Error - for example if a configuration options with name starting as specified in specified profile can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error - if a configuration profile entity with the specified name can not be found on the ST server."
                    }
                }
            }
        },
        "/configurationProfiles/{profile}": {
            "parameters": [
                {
                    "name": "profile",
                    "in": "path",
                    "description": "The name of the configuration profile to get. This field is not case sensitive.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getProfile",
                "summary": "Get a configuration profile entity by its name.",
                "tags": [
                    "configurationProfiles",
                    "Configurationprofiles"
                ],
                "description": "Get a configuration profile entity by its name.\n\n`Permissions`: \"SERVER_CONFIGURATION_FORM\", \"SUPPORT_TOOL_CONFIGURATION_FORM\".\n",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationProfile"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error - if a configuration profile entity with the specified name can not be found on the ST server."
                    }
                }
            }
        },
        "/configurationProfiles/{profile}/options/names": {
            "parameters": [
                {
                    "name": "profile",
                    "in": "path",
                    "description": "The name of the configuration profile to which configuration options to get by their name.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "getConfigurationOptions",
                "summary": "Get configuration options by their name.",
                "tags": [
                    "configurationProfiles",
                    "Configurationprofiles"
                ],
                "description": "Get configuration options by their name. The method is POST because if we have several options the url might get bigger than 255 symbols and will cause problems on IE.\n\n`Permissions`: \"SERVER_CONFIGURATION_FORM\", \"SUPPORT_TOOL_CONFIGURATION_FORM\".\n",
                "consumes": [
                    "multipart/form-data"
                ],
                "parameters": [
                    {
                        "name": "node",
                        "in": "query",
                        "description": "The node identifier for the option.If not set then returns all options (local or global) across all nodes.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "optionNames",
                        "in": "formData",
                        "description": "If specified, retrieves all configuration options with the given names separated with comma (',').",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationOptions"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Internal Server Error - for example if a configuration options with specified name(s) in specified profile can not be found on the ST server."
                    }
                }
            }
        },
        "/configurationProfiles/{profile}/options/{name}": {
            "parameters": [
                {
                    "name": "profile",
                    "in": "path",
                    "description": "The name of the configuration profile which configuration option specified by name to update.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the configuration option to update.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "updateOptionProperties",
                "summary": "Update an already existing configuration option in a configuration profile entity.",
                "tags": [
                    "configurationProfiles",
                    "Configurationprofiles"
                ],
                "description": "Update an already existing configuration option in a configuration profile entity.\n\n`Permissions`: \"SERVER_CONFIGURATION_FORM\", \"SUPPORT_TOOL_CONFIGURATION_FORM\".\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationOption"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated configuration option.",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationOption"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Internal Server Error - for example if a configuration option with specified name in the specified profile can not be found on the ST server."
                    }
                }
            },
            "get": {
                "operationId": "getOption",
                "summary": "Get a configuration option by its name.",
                "tags": [
                    "configurationProfiles",
                    "Configurationprofiles"
                ],
                "description": "Get a configuration option by its name.\n\n`Permissions`: \"SERVER_CONFIGURATION_FORM\", \"SUPPORT_TOOL_CONFIGURATION_FORM\".\n",
                "parameters": [
                    {
                        "name": "node",
                        "in": "query",
                        "description": "The node identifier for the option.If not set then returns all options (local or global) with this name across all nodes.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "local",
                        "in": "query",
                        "description": "If true then it returns the local option with given name. If there is no such option returns the global one. When this parameter is set - the node parameter is ignored.\n",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationOptions"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Internal Server Error - for example if a configuration option with specified name in the specified profile can not be found on the ST server."
                    }
                }
            }
        },
        "/configurationProfiles/{profile}/options/count": {
            "parameters": [
                {
                    "name": "profile",
                    "in": "path",
                    "description": "The name of the configuration profile.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getOptionsCount",
                "summary": "Get the count of the configuration options in a profile.",
                "tags": [
                    "configurationProfiles",
                    "Configurationprofiles"
                ],
                "description": "Get the count of the configuration options in a profile.\n\n`Permissions`: \"SERVER_CONFIGURATION_FORM\", \"SUPPORT_TOOL_CONFIGURATION_FORM\".\n",
                "parameters": [
                    {
                        "name": "startsWith",
                        "in": "query",
                        "description": "If specified, get the count of all configuration options starting with given name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "node",
                        "in": "query",
                        "description": "The node identifier for the option. If not set then returns all options (local or global) across all nodes.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationOptionsCount"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Internal Server Error - for example if a configuration options with name starting as specified in specified profile can not be found on the ST server."
                    }
                }
            }
        },
        "/configurationProfiles": {
            "get": {
                "operationId": "getAllProfiles",
                "summary": "Get the collection of all existing configuration profile entities on the ST server.",
                "tags": [
                    "configurationProfiles",
                    "Configurationprofiles"
                ],
                "description": "Get the collection of all existing configuration profile entities on the ST server. By default there is only one configuration profile - 'DEFAULT' profile.\n\n`Permissions`: \"SERVER_CONFIGURATION_FORM\", \"SUPPORT_TOOL_CONFIGURATION_FORM\".\n\n**Known Issue:** The configuration profiles collection does not comply with the common json objects representation.\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationProfiles"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    }
                }
            }
        },
        "/icapServers/{name}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the ICAP server to be deleted.",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "operationId": "deleteIcapServer",
                "summary": "Deletes an existing ICAP server.",
                "tags": [
                    "icapServers",
                    "Icapservers"
                ],
                "description": "Deletes an ICAP server.\n",
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "ICAP server not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            },
            "post": {
                "operationId": "updateIcapServer",
                "summary": "Updates an existing ICAP server.",
                "tags": [
                    "icapServers",
                    "Icapservers"
                ],
                "description": "Updates some properties of an ICAP server.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/IcapServer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "ICAP server not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            },
            "get": {
                "operationId": "getIcapServer",
                "summary": "Gets an ICAP server",
                "tags": [
                    "icapServers",
                    "Icapservers"
                ],
                "description": "Retrieve an ICAP server\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/IcapServer"
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "ICAP server not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            },
            "put": {
                "operationId": "createIcapServer",
                "summary": "Creates an ICAP server.",
                "tags": [
                    "icapServers",
                    "Icapservers"
                ],
                "description": "Creates new ICAP server configuration.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/IcapServer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            }
        },
        "/icapServers/{name}/enable": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the ICAP server to be updated.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "updateIcapServer",
                "summary": "Enables/Disables ICAP server with the given name .",
                "tags": [
                    "icapServers",
                    "Icapservers"
                ],
                "description": "Updates enabled property of an ICAP server.\n",
                "parameters": [
                    {
                        "name": "enabled",
                        "in": "query",
                        "description": "Expected value - true or false",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "ICAP server not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            }
        },
        "/icapServers": {
            "get": {
                "operationId": "getIcapServers",
                "summary": "Gets ICAP servers.",
                "tags": [
                    "icapServers",
                    "Icapservers"
                ],
                "description": "Returns the list of ICAP servers registred in a SecureTransport instance. \nThe result list may be empty if there are no entries satisfying the search cretieria.\n",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The ICAP server name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The ICAP server type to filter by. Expected 'INCOMING', 'OUTGOING' or 'BOTH'",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "description": "The ICAP server enabled to filter by. Expected 'true' or 'false' value.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "businessUnit",
                        "in": "query",
                        "description": "The Business Unit name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Defines maximum count of returned entries. Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with offset query parameter to get entries at portions.\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Defines the first entry number of an ordered result to get; last entry number to return is (offset + limit - 1). Expects positive integer value. If this parameter is not specified, then SecureTransport sets a default one. This parameter is used in conjunction with limit query parameter to get entries at portions.\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/IcapServers"
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            }
        },
        "/icapServers/count": {
            "get": {
                "operationId": "getIcapServerCount",
                "summary": "Gets the number of ICAP servers",
                "tags": [
                    "icapServers",
                    "Icapservers"
                ],
                "description": "Retrieve the number of ICAP servers\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/IcapServer"
                        }
                    },
                    "400": {
                        "description": "Bad request."
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect login credentials."
                    },
                    "404": {
                        "description": "ICAP server not found."
                    }
                },
                "security": [
                    {
                        "basicAuthScheme": []
                    }
                ]
            }
        },
        "/loginRestrictionPolicies/{policyName}": {
            "parameters": [
                {
                    "name": "policyName",
                    "in": "path",
                    "description": "The name of the login restriction policy to update.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "updatePolicyProperties",
                "summary": "Update properties of a login restriction policy entity.",
                "tags": [
                    "loginRestrictionPolicies",
                    "Loginrestrictionpolicies"
                ],
                "description": "Update properties of a login restriction policy entity.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Policy"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully updated login restriction policy.",
                        "schema": {
                            "$ref": "#/definitions/Policy"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a login restriction policy with the specified name can not be found on the ST server."
                    }
                }
            },
            "get": {
                "operationId": "getPolicy",
                "summary": "Get login restriction policy entity.",
                "tags": [
                    "loginRestrictionPolicies",
                    "Loginrestrictionpolicies"
                ],
                "description": "Get login restriction policy entity.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Policy"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a login restriction policy with the specified name can not be found on the ST server."
                    }
                }
            },
            "delete": {
                "operationId": "deletePolicy",
                "summary": "Delete a login restriction policy entity.",
                "tags": [
                    "loginRestrictionPolicies",
                    "Loginrestrictionpolicies"
                ],
                "description": "Delete a login restriction policy entity.",
                "responses": {
                    "204": {
                        "description": "Successfully deleted login restriction policy."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a login restriction policy with the specified name can not be found on the ST server."
                    }
                }
            }
        },
        "/loginRestrictionPolicies/{policyName}/rules/{ruleName}": {
            "parameters": [
                {
                    "name": "policyName",
                    "in": "path",
                    "description": "The name of the login restriction policy.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "ruleName",
                    "in": "path",
                    "description": "The name of the login restriction rule to delete.",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "operationId": "deleteRule",
                "summary": "Delete a login restriction rule entity.",
                "tags": [
                    "loginRestrictionPolicies",
                    "Loginrestrictionpolicies"
                ],
                "description": "Delete a login restriction rule entity.",
                "responses": {
                    "204": {
                        "description": "Successfully deleted login restriction rule entity."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a login restriction policy with the specified name can not be found on the ST server."
                    }
                }
            },
            "get": {
                "operationId": "getRule",
                "summary": "Get a login restriction rule entity of a login restriction policy.",
                "tags": [
                    "loginRestrictionPolicies",
                    "Loginrestrictionpolicies"
                ],
                "description": "Get a login restriction rule entity of a login restriction policy.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Rule"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a login restriction policy or a login restriction rule with the specified name can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "updateRuleProperties",
                "summary": "Update properties of a login restriction rule entity.",
                "tags": [
                    "loginRestrictionPolicies",
                    "Loginrestrictionpolicies"
                ],
                "description": "Update properties of a login restriction rule entity.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Rule"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully updated login restriction rule.",
                        "schema": {
                            "$ref": "#/definitions/Rule"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a login restriction policy with the specified name can not be found on the ST server."
                    }
                }
            }
        },
        "/loginRestrictionPolicies": {
            "get": {
                "operationId": "getPolicies",
                "summary": "Get login restriction policies collection on the ST server.",
                "tags": [
                    "loginRestrictionPolicies",
                    "Loginrestrictionpolicies"
                ],
                "description": "Get login restriction policies collection on the ST server.",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "isDefault",
                        "in": "query",
                        "description": "Filter only the default login restriction policy or filter all policies without the default one.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The login restriction policy type to filter by.",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "ALLOW_THEN_DENY",
                            "DENY_THEN_ALLOW"
                        ]
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The login restriction policy name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderByName",
                        "in": "query",
                        "description": "The order of filtering by name.",
                        "required": false,
                        "type": "string",
                        "default": "ASCENDING",
                        "enum": [
                            "ASCENDING",
                            "DESCENDING"
                        ]
                    },
                    {
                        "name": "nameMatchMode",
                        "in": "query",
                        "description": "The name match mode.",
                        "required": false,
                        "type": "string",
                        "default": "EXACT",
                        "enum": [
                            "EXACT",
                            "START",
                            "END",
                            "ANYWHERE"
                        ]
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma separated string of login restriction policy properties to return. If fields parameter contains a property name count, then only the count of the login restriction policies on the ST server will be returned.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "businessUnit",
                        "in": "query",
                        "description": "The bisuness unit name to filter by.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Policies"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if businessUnit with specified name can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "createPolicy",
                "summary": "Create a login restriction policy entity.",
                "tags": [
                    "loginRestrictionPolicies",
                    "Loginrestrictionpolicies"
                ],
                "description": "Create a login restriction policy entity.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Policy"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created login restriction policy.",
                        "schema": {
                            "$ref": "#/definitions/Policy"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found."
                    }
                }
            }
        },
        "/loginRestrictionPolicies/{policyName}/rules": {
            "parameters": [
                {
                    "name": "policyName",
                    "in": "path",
                    "description": "The name of the login restriction policy for which to create a login restriction rule.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "createRule",
                "summary": "Create a login restriction rule.",
                "tags": [
                    "loginRestrictionPolicies",
                    "Loginrestrictionpolicies"
                ],
                "description": "Create a login restriction rule.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Rule"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created login restriction rule of the login restriction policy.",
                        "schema": {
                            "$ref": "#/definitions/Rule"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a login restriction policy with the specified name can not be found on the ST server."
                    }
                }
            },
            "get": {
                "operationId": "getPolicyRules",
                "summary": "Get the collection of login restriction rule entities on the ST server.",
                "tags": [
                    "loginRestrictionPolicies",
                    "Loginrestrictionpolicies"
                ],
                "description": "Get the collection of login restriction rule entities on the ST server.",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The login restriction rule type to filter for.",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "ALLOW",
                            "DENY"
                        ]
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "description": "The rule enablement to filter for.",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The login restriction rule name to filter for.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "orderByName",
                        "in": "query",
                        "description": "The order of filtering by name.",
                        "required": false,
                        "type": "string",
                        "default": "ASCENDING",
                        "enum": [
                            "ASCENDING",
                            "DESCENDING"
                        ]
                    },
                    {
                        "name": "nameMatchMode",
                        "in": "query",
                        "description": "The name match mode.",
                        "required": false,
                        "type": "string",
                        "default": "EXACT",
                        "enum": [
                            "EXACT",
                            "START",
                            "END",
                            "ANYWHERE"
                        ]
                    },
                    {
                        "name": "clientAddress",
                        "in": "query",
                        "description": "The client address for the login restriction rule. This value could be one of:\n  - Specific IPv4 address\n  - Specific IPv6 address\n  - Specific IPv4 address combined with a network mask. Example: 172.23.34.0/24\n  - Specific IPv6 address combined with a network mask. Example: FC00:1234:56::/120\n  - Specific fully qualified host name. Example: host.domain.com\n  - Specific fully qualified host name, which is allowed to contain the * wildcard character. Example: *.domain.com\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "clientAddressMatchMode",
                        "in": "query",
                        "description": "The client address match mode.",
                        "required": false,
                        "type": "string",
                        "default": "EXACT",
                        "enum": [
                            "EXACT",
                            "START",
                            "END",
                            "ANYWHERE"
                        ]
                    },
                    {
                        "name": "expression",
                        "in": "query",
                        "description": "The login restriction rule expression.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "expressionMatchMode",
                        "in": "query",
                        "description": "The expression match mode.",
                        "required": false,
                        "type": "string",
                        "default": "EXACT",
                        "enum": [
                            "EXACT",
                            "START",
                            "END",
                            "ANYWHERE"
                        ]
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma separated strings of rule properties to return. If fields parameter contains a property name count, then only the count of the login restriction rules on the ST server will be returned.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "businessUnit",
                        "in": "query",
                        "description": "The bisuness unit name to filter by.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Rules"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a login restriction policy with the specified name can not be found on the ST server."
                    }
                }
            }
        },
        "/logs/export": {
            "get": {
                "operationId": "exportLogs",
                "summary": "Export ST server logs in CSV format, based on URL parameter criteria.",
                "tags": [
                    "logs",
                    "Logs"
                ],
                "description": "Export ST server logs in CSV format, based on URL parameter criteria.\n\n`Permissions`: \"SERVER_LOG_FORM\".\n",
                "produces": [
                    "text/csv"
                ],
                "parameters": [
                    {
                        "name": "component",
                        "in": "query",
                        "description": "The components names. Could be more than one parameter with the same name. Valid component names are: 'TM', 'AS2D', 'SSHD', 'SOCKS', 'ADMIN', 'AUDIT', 'FTPD', 'HTTPD', 'PESITD'.\n",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "The log levels. Could be more than one parameter. Must be a valid log4j logging level name. Valid names are: 'ALL', 'DEBUG', 'ERROR', 'FATAL', 'INFO', 'OFF', 'TRACE', 'WARN'.\n",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountName",
                        "in": "query",
                        "description": "The account name to filter.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "threadName",
                        "in": "query",
                        "description": "The thread name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fromDate",
                        "in": "query",
                        "description": "The from date in RFC2822 format to filter. The format is: EEE, d MMM yyyy HH:mm:ss Z. Example: 'Thu, 21 Apr 2016 16:13:50 GMT'.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "The end date in RFC2822 format to filter. The format is: EEE, d MMM yyyy HH:mm:ss Z. Example: 'Thu, 21 Apr 2016 16:13:50 GMT'.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sessionIdentifier",
                        "in": "query",
                        "description": "The session ID to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "transferIdentifier",
                        "in": "query",
                        "description": "The transfer ID to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "message",
                        "in": "query",
                        "description": "The log message or part of log message to filter by.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request. For example if invalid log level is specified."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    }
                }
            }
        },
        "/logs": {
            "get": {
                "operationId": "getLogs",
                "summary": "Retrieve the ST server logs based on URI parameter criteria.",
                "tags": [
                    "logs",
                    "Logs"
                ],
                "description": "Retrieve the ST server logs based on URI parameter criteria.\n\n`Permissions`: \"SERVER_LOG_FORM\".\n\n**Known Issue:** The log entries collection does not comply with the common json objects representation.\n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Max result size. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100).\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "component",
                        "in": "query",
                        "description": "The components names. Could be more than one parameter with the same name. Valid component names are: 'TM', 'AS2D', 'SSHD', 'SOCKS', 'ADMIN', 'AUDIT', 'FTPD', 'HTTPD', 'PESITD'.\n",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "The log levels. Could be more than one parameter. Must be a valid log4j logging level name. Valid names are: 'ALL', 'DEBUG', 'ERROR', 'FATAL', 'INFO', 'OFF', 'TRACE', 'WARN'.\n",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accountName",
                        "in": "query",
                        "description": "The account name to filter.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "threadName",
                        "in": "query",
                        "description": "The thread name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fromDate",
                        "in": "query",
                        "description": "The from date in RFC2822 format to filter. The format is: EEE, d MMM yyyy HH:mm:ss Z. Example: 'Thu, 21 Apr 2016 16:13:50 GMT'.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endDate",
                        "in": "query",
                        "description": "The end date in RFC2822 format to filter. The format is: EEE, d MMM yyyy HH:mm:ss Z. Example: 'Thu, 21 Apr 2016 16:13:50 GMT'.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sessionIdentifier",
                        "in": "query",
                        "description": "The session ID to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "transferIdentifier",
                        "in": "query",
                        "description": "The transfer ID to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "message",
                        "in": "query",
                        "description": "The log message or part of log message to filter by.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/LogEntries"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request. For example if invalid log level is specified."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    }
                }
            }
        },
        "/logs/{logId}": {
            "parameters": [
                {
                    "name": "logId",
                    "in": "path",
                    "description": "The if of the log entity to get (Base64 encoded composite id).",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getLog",
                "summary": "Get a single log entry including the exception.",
                "tags": [
                    "logs",
                    "Logs"
                ],
                "description": "Get a single log entry including the exception.\n\n`Permissions`: \"SERVER_LOG_FORM\".\n",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/LogEntry"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request. For example if the ID of the log entry to get is in invalid format."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    }
                }
            }
        },
        "/mailTemplates": {
            "get": {
                "operationId": "getMailTemplates",
                "summary": "Get mail template collection.",
                "tags": [
                    "mailTemplates",
                    "Mailtemplates"
                ],
                "description": "Get collection of mail templates on the ST server.\n\n`Permissions`: \"MAIL_TEMPLATE_REPOSITORY\".\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/MailTemplate"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/mailTemplates/{fileName}": {
            "parameters": [
                {
                    "name": "fileName",
                    "in": "path",
                    "description": "The name of the mail template. File name of the uploaded file is ignored and file is saved  on the ST server with the name specified in this parameter. The file extention should be xhtml.",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "operationId": "uploadTemplate",
                "summary": "Upload mail template entity.",
                "tags": [
                    "mailTemplates",
                    "Mailtemplates"
                ],
                "description": "Upload mail template entity or replace existing mail template entity with the same name. The file name of the uploaded file is ignored and file is saved with the name specified in the URL.\n\n`Permissions`: \"MAIL_TEMPLATE_REPOSITORY\".\n",
                "consumes": [
                    "multipart/form-data"
                ],
                "parameters": [
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "The mail template file to be uploaded.",
                        "required": true,
                        "type": "file"
                    },
                    {
                        "name": "description",
                        "in": "formData",
                        "description": "The description of the mail template.",
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully created mail template (or successfully replaced existing mail template)."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not found - Mail template with the specified file name can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            },
            "get": {
                "operationId": "getMailTempalte",
                "summary": "Get mail template entity.",
                "tags": [
                    "mailTemplates",
                    "Mailtemplates"
                ],
                "description": "Get mail template entity.\n\n`Permissions`: \"MAIL_TEMPLATE_REPOSITORY\".\n",
                "responses": {
                    "200": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not found - Mail template with the specified file name can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "delete": {
                "operationId": "deleteMailTempalte",
                "summary": "Delete mail template entity.",
                "tags": [
                    "mailTemplates",
                    "Mailtemplates"
                ],
                "description": "Delete mail template entity with specified file name.\n\n`Permissions`: \"MAIL_TEMPLATE_REPOSITORY\".\n",
                "responses": {
                    "204": {
                        "description": "Successfully deleted mail template from the ST server."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not found - Mail template with the specified file name can not be found on the ST server."
                    },
                    "409": {
                        "description": "Conflict - see server log for details."
                    }
                }
            }
        },
        "/myself": {
            "post": {
                "operationId": "loginUser",
                "summary": "Login user.",
                "tags": [
                    "myself",
                    "Myself"
                ],
                "description": "Login user in the ST server.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationActionResult"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - Authenticated session to admin web services, but no principal in session."
                    }
                }
            },
            "get": {
                "operationId": "getLoginUser",
                "summary": "Get administrator entity.",
                "tags": [
                    "myself",
                    "Myself"
                ],
                "description": "Get information for the current administrator.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Administrator"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "500": {
                        "description": "Internal server error - Administrator does not exist."
                    }
                }
            },
            "delete": {
                "operationId": "logoutUser",
                "summary": "Logout user.",
                "tags": [
                    "myself",
                    "Myself"
                ],
                "description": "Logout user from the ST REST API.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationActionResult"
                        }
                    },
                    "302": {
                        "description": "Redirect to IdP in case the user was authenticated by an external server."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    }
                }
            }
        },
        "/routes/{routeId}/inheritedSteps/{routeStepId}": {
            "parameters": [
                {
                    "name": "routeId",
                    "in": "path",
                    "description": "The ID of route package.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "routeStepId",
                    "in": "path",
                    "description": "The ID of inherited step.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getInheritedRouteStepStatus",
                "summary": "Get inherited step status.",
                "tags": [
                    "routes",
                    "Routes"
                ],
                "description": "Get Status for inherited step is available only for COMPOSITE type of routes.",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/RouteStepStatus"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not found."
                    }
                }
            },
            "post": {
                "operationId": "updateInheritedRouteStepStatus",
                "summary": "Update inherited step status.",
                "tags": [
                    "routes",
                    "Routes"
                ],
                "description": "Update Status for inherited step is available only for COMPOSITE type of routes.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RouteStepStatus"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not found."
                    }
                }
            }
        },
        "/routes/{routeId}/steps": {
            "parameters": [
                {
                    "name": "routeId",
                    "in": "path",
                    "description": "The ID of route package.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getRouteSteps",
                "summary": "Get route steps.",
                "tags": [
                    "routes",
                    "Routes"
                ],
                "description": "Get all of the route steps by given routeId, limit and offset.",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed rows.",
                        "required": false,
                        "type": "integer",
                        "minimum": 1,
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The start row to list. The offset parameter can has only non-negative integer value. If this parameter is not set, then it is considered 0.",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/RouteSteps"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found."
                    }
                }
            },
            "post": {
                "operationId": "createRouteStep",
                "summary": "Create route step.",
                "tags": [
                    "routes",
                    "Routes"
                ],
                "description": "Create a route step for route template. Additional predefined properties are used for Transformation or Routing steps.\n\nA specific route step should be used to link routes of type TEMPLATE and SIMPLE. This step tells the TEMPLATE route to execute the SIMPLE route. To achieve that, the step properties \"type\" and \"executeRoute\" should be set to \"ExecuteRoute\" and \"&lt;some_simple route_id&gt;\" respectively.\n\nThe other route steps are PgpEncryption, PgpDecryption, Compress, Decompress, LineEnding, ExternalScript, EncodingConversion, CharactersReplace, LinePadding, LineTruncating, LineFolding, Rename, Publish, SendToPartner. The share the common step model properties and have also their own predefined properties.    \n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RouteStep"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Step created."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not found. Route with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "put": {
                "operationId": "overwriteRouteSteps",
                "summary": "Update route steps collection.",
                "tags": [
                    "routes",
                    "Routes"
                ],
                "description": "Update route steps collection of a route. The route step id is preserved. The route steps which are not supplied, but they are exist in the route package will be deleted, the new one will be saved.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RouteSteps"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not found. Route with the specified id can not be found on the ST server."
                    }
                }
            }
        },
        "/routes/{routeId}/steps/{routeStepId}": {
            "parameters": [
                {
                    "name": "routeId",
                    "in": "path",
                    "description": "The ID of route package.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "routeStepId",
                    "in": "path",
                    "description": "The ID of the route step.",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "operationId": "deleteRouteStep",
                "summary": "Delete route step.",
                "tags": [
                    "routes",
                    "Routes"
                ],
                "description": "Deletes a route step by route ID and routeStep ID.",
                "responses": {
                    "204": {
                        "description": "Successful operation. No content in response body."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not found. Route with the specified id can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "updateRouteStepProperties",
                "summary": "Update route step.",
                "tags": [
                    "routes",
                    "Routes"
                ],
                "description": "Updates properties of a route step.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RouteStep"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation. No content in response body."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not found. Route with the specified id can not be found on the ST server."
                    }
                }
            },
            "get": {
                "operationId": "getRouteStep",
                "summary": "Get route step by route ID and routeStep ID.",
                "tags": [
                    "routes",
                    "Routes"
                ],
                "description": "Get route step by route ID and routeStep ID.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/RouteStep"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not found. Route with the specified id can not be found on the ST server."
                    }
                }
            }
        },
        "/routes/{routeId}": {
            "parameters": [
                {
                    "name": "routeId",
                    "in": "path",
                    "description": "The ID of the Route",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "operationId": "deleteRoute",
                "summary": "Delete route entity.",
                "tags": [
                    "routes",
                    "Routes"
                ],
                "description": "Delete route entity.",
                "responses": {
                    "204": {
                        "description": "Successful operation. No content in response body."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not found."
                    }
                }
            },
            "post": {
                "operationId": "updateRouteProperties",
                "summary": "Update properties of a route entity.",
                "tags": [
                    "routes",
                    "Routes"
                ],
                "description": "Update properties of a route entity.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Route"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation. No content in response body."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not found."
                    }
                }
            },
            "get": {
                "operationId": "getRoute",
                "summary": "Get route entity.",
                "tags": [
                    "routes",
                    "Routes"
                ],
                "description": "Get route entity.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Route"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found."
                    }
                }
            }
        },
        "/routes/count": {
            "get": {
                "operationId": "getRouteEntriesCount",
                "summary": "Get number of routes.",
                "tags": [
                    "routes",
                    "Routes"
                ],
                "description": "Gets the number of route entries by route type.",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type should be TEMPLATE, SIMPLE or COMPOSITE",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the count of the template.",
                        "schema": {
                            "$ref": "#/definitions/CollectionCount"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found."
                    }
                }
            }
        },
        "/routes/{routeId}/inheritedSteps": {
            "parameters": [
                {
                    "name": "routeId",
                    "in": "path",
                    "description": "The ID of the route package.",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "operationId": "overwriteRouteStepStatuses",
                "summary": "Update route step statuses.",
                "tags": [
                    "routes",
                    "Routes"
                ],
                "description": "Update route step statuses for route package of type COMPOSITE.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/RouteStepStatuses"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not found."
                    }
                }
            },
            "get": {
                "operationId": "getInheritedRouteStepStatuses",
                "summary": "Get inherited steps statuses.",
                "tags": [
                    "routes",
                    "Routes"
                ],
                "description": "Statuses for inherited steps are available only for COMPOSITE type of routes.",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit",
                        "required": false,
                        "type": "integer",
                        "minimum": 1,
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "the offset",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/RouteStepStatuses"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not found."
                    }
                }
            }
        },
        "/routes": {
            "post": {
                "operationId": "createRoute",
                "summary": "Create collection of Routes on the ST server.",
                "tags": [
                    "routes",
                    "Routes"
                ],
                "description": "Create collection of Routes on the ST server. It is possible to create three types of Route: TEMPLATE, COMPOSITE, SIMPLE.\n\nThe types are used as follows:\n\nTemplate route type: \n- it can have businessUnits property which is a list of business unit names appropriate for the Administrator who is creating this route\n- it may not have account property\n- it may not have subscriptions property\n- it may not have routeTemplate property\n\nComposite route type: \n- it is to have routeTemplate property pointing to the id of an existing Template Route visible by the account this route is created for \n- it can have account property which is the name of an existing account\n- it can have subscriptions property which is a list of subscription id-s which belongs to the account this route is created for\n- it may not have businessUnits property\n\nSimple Route:\n- it may not have businessUnits property\n- it may not have account property\n- it may not have subscriptions property\n- it may not have routeTemplate property\n\nThe route to be created may not have steps property. Steps are managed by the sub-resource steps.\n\nWhen creating a composite route type to  link a TEMPLATE route to an account, the new composite route properties to set are: name, type - COMPOSITE, routeTemplate - &lt;simple_route_id&gt;, failureEmailNotification, failureEmailTemplate,  failureEmailName, successEmailNotification, successEmailTemplate, successEmailName, conditionType, account - &lt;account or login name to link to&gt;, subscriptions - [\"account_subscribtion_id1\", \"account_subscribtion_id2\", ...].\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Route"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Succesfully added routes."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found."
                    }
                }
            },
            "get": {
                "operationId": "getRoutes",
                "summary": "Get collection of routes on the ST server.",
                "tags": [
                    "routes",
                    "Routes"
                ],
                "description": "Get collection of routes on the ST server.",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named 'Webservices.EntriesPerPage' (which by default has value 100)",
                        "required": false,
                        "type": "integer",
                        "minimum": 1,
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "format": "int32"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The route type to sort by. It may be empty or TEMPLATE, SIMPLE, COMPOSITE. TEMPLATE - Route Package Template. SIMPLE - Route in the Route Package Template. COMPOSITE - Assigned route with TEMPLATE type to a virtual account.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "businessUnit",
                        "in": "query",
                        "description": "The bisuness unit name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "account",
                        "in": "query",
                        "description": "The account to filter for.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "subscription",
                        "in": "query",
                        "description": "The route package template subscription id.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "referredByRoute",
                        "in": "query",
                        "description": "Which route is referred by this route.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Route Package Name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Comma separated string of route properties to return",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns list with all routes",
                        "schema": {
                            "$ref": "#/definitions/Routes"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found."
                    }
                }
            }
        },
        "/routeStepsCharsets": {
            "get": {
                "operationId": "getAvailableCharsets",
                "summary": "Get collection of the supported charsets.",
                "tags": [
                    "routeStepsCharsets",
                    "Routestepscharsets"
                ],
                "description": "Get collection of the supported charsets in the ST server.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/RouteStepsCharsets"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/routeStepsMetadata": {
            "get": {
                "operationId": "getRouteStepsMetadata",
                "summary": "Get collection of the route steps metadata.",
                "tags": [
                    "routeStepsMetadata",
                    "Routestepsmetadata"
                ],
                "description": "Get collection of the route steps metadata on the ST server.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RouteStepMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/sessions": {
            "get": {
                "operationId": "getSessionsDefault",
                "summary": "Get collection of the current sessions on the ST server.",
                "tags": [
                    "sessions",
                    "Sessions"
                ],
                "description": "Get the currently active sessions on the ST server.\n\n`Permissions`: \"STATISTICS_MONITOR_ACTION\".\n\n**Known Issue:** The generated Swagger code-gen client returns empty session entities.\n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the returned sessions. It should be positive integer and if not specified then return all sessions.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The session type to filter by. Session types are: 'FTP', 'HTTP' or 'SSH'. If not specified then return for all types.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "localDaemonReturn",
                        "in": "query",
                        "description": "Determines whether to return local daemon sessions.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Sessions"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/sessions/sessions.xml": {
            "get": {
                "operationId": "getSessionsXMLFormat",
                "summary": "Get xml sessions.",
                "tags": [
                    "sessions",
                    "Sessions"
                ],
                "description": "Get user sessions in XML format.\n\n`Permissions`: \"STATISTICS_MONITOR_ACTION\".\n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the returned sessions. It should be positive integer. If the limit is null, the maximum integer value is used.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The session type to filter by. Session types are: 'FTP', 'HTTP' or 'SSH'. If not specified then return both types.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "localDaemonReturn",
                        "in": "query",
                        "description": "Determines whether to return local daemon sessions.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Sessions"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not found - for example if Server Usage Monitor is disabled."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/sessions/{sessionID}": {
            "parameters": [
                {
                    "name": "sessionID",
                    "in": "path",
                    "description": "The session id. Format should be FTP:session_id, SSH:session_id or HTTP:session_id\n",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getSession",
                "summary": "Get session entity.",
                "tags": [
                    "sessions",
                    "Sessions"
                ],
                "description": "Gets a single session by specified session ID.\n\n`Permissions`: \"STATISTICS_MONITOR_ACTION\".\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Session"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - session with the specified name can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            },
            "delete": {
                "operationId": "killSession",
                "summary": "Kill session.",
                "tags": [
                    "sessions",
                    "Sessions"
                ],
                "description": "Kills a session by specified session ID.\n\n`Permissions`: \"STATISTICS_MONITOR_ACTION\".\n",
                "parameters": [
                    {
                        "name": "localDaemonReturn",
                        "in": "query",
                        "description": "Try to kill as a local daemon session.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - session with the specified name can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/sessions/sessions.json": {
            "get": {
                "operationId": "getSessionsJsonFormat",
                "summary": "Get json sessions.",
                "tags": [
                    "sessions",
                    "Sessions"
                ],
                "description": "Get user sessions in JSON format.\n\n`Permissions`: \"STATISTICS_MONITOR_ACTION\".\n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the returned sessions. It should be positive integer. If the limit is null, the maximum integer value is used.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The session type to filter by. Session types are: 'FTP', 'HTTP'. If not specified then return both types.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "localDaemonReturn",
                        "in": "query",
                        "description": "Determines whether to return local daemon sessions.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Sessions"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not found - for example if Server Usage Monitor is disabled."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/sessions/count": {
            "get": {
                "operationId": "getSessionsCount",
                "summary": "Get sessions number.",
                "tags": [
                    "sessions",
                    "Sessions"
                ],
                "description": "Gets the sessions count on the ST server.\n\n`Permissions`: \"STATISTICS_MONITOR_ACTION\".\n",
                "produces": [
                    "text/plain"
                ],
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The session type to filter by. Session types are: 'FTP', 'HTTP' or 'SSH'. If not specified then return for all types.\n",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/sessions/bandwidthInfoByLogin": {
            "get": {
                "operationId": "getBandwidthInfoByLogin",
                "summary": "Get bandwidth usage statistic.",
                "tags": [
                    "sessions",
                    "Sessions"
                ],
                "description": "Get bandwidth usage statistic by login name.\n\n`Permissions`: \"STATISTICS_MONITOR_ACTION\".\n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the returned statistics records. It should be positive integer. If the limit is null, the maximum integer value is used.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns bandwidth usage statistic information in JSON format",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SessionBandwidthStatisticsByLoginName"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/sessions/sessionsInfo.json": {
            "get": {
                "operationId": "getSessionsInfo",
                "summary": "Get sessions info.",
                "tags": [
                    "sessions",
                    "Sessions"
                ],
                "description": "Get session info by user classes.\n\n`Permissions`: \"STATISTICS_MONITOR_ACTION\".\n",
                "responses": {
                    "200": {
                        "description": "Returns sessions information in JSON format",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserClass"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/sites/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "The id of the site.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "updateSiteProperties",
                "summary": "Update site entity properties.",
                "tags": [
                    "sites",
                    "Sites"
                ],
                "description": "Update site's properties by specified site id.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Site"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated site with the specified name."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - site with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "get": {
                "operationId": "getSite",
                "summary": "Get site entity.",
                "tags": [
                    "sites",
                    "Sites"
                ],
                "description": "Get a single site with a specified id.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Site"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - site with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "delete": {
                "operationId": "deleteSite",
                "summary": "Delete site entity.",
                "tags": [
                    "sites",
                    "Sites"
                ],
                "description": "Delete site with specified site id.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
                "responses": {
                    "204": {
                        "description": "Successfully deleted site with the specified name.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - site with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/sites": {
            "get": {
                "operationId": "getSites",
                "summary": "Get sites collection.",
                "tags": [
                    "sites",
                    "Sites"
                ],
                "description": "Get collection of all sites on the ST server.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named `Webservices.EntriesPerPage` (which by default has value 100).",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "account",
                        "in": "query",
                        "description": "The account for which the site is created.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The name of the site.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "protocol",
                        "in": "query",
                        "description": "The protocol of the site: It can be 'as2', 'ftp', 'http', 'ssh', 'pesit', 'folder', 'adhoc', 'sharepoint', 'smb', 'http-generic', 'amazonS3'\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "siteTemplate",
                        "in": "query",
                        "description": "The name of the site template.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Sites"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request. Example: response code 400 can be observed when set limit or offset parameters to have a negative value or set incorect fields query parameter.\n"
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "post": {
                "operationId": "createSite",
                "summary": "Create sites collection.",
                "tags": [
                    "sites",
                    "Sites"
                ],
                "description": "Create collection of sites on the ST server.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Sites"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfuly created collection of site entities."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/siteTemplates/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "The id of the site template.",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "operationId": "updateSiteTemplateProperties",
                "summary": "Update site template entity properties.",
                "tags": [
                    "siteTemplates",
                    "Sitetemplates"
                ],
                "description": "Update site template's properties by specified site template id.\n\n`Permissions`: \"Site Templates\"\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SiteTemplates"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated site template with the specified name."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - site template with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "delete": {
                "operationId": "deleteSiteTemplate",
                "summary": "Delete site template entity.",
                "tags": [
                    "siteTemplates",
                    "Sitetemplates"
                ],
                "description": "Delete site template with specified site template id.\n\n`Permissions`: \"Site Templates\"\n",
                "responses": {
                    "204": {
                        "description": "Successfully deleted site template with the specified name.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - site template with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "get": {
                "operationId": "getSiteTemplate",
                "summary": "Get site template entity.",
                "tags": [
                    "siteTemplates",
                    "Sitetemplates"
                ],
                "description": "Get a single site template with a specified id.\n\n`Permissions`: \"Site template Templates\"\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/SiteTemplates"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - site template with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/siteTemplates": {
            "post": {
                "operationId": "createSiteTemplates",
                "summary": "Create siteTemplates collection.",
                "tags": [
                    "siteTemplates",
                    "Sitetemplates"
                ],
                "description": "Create collection of siteTemplates on the ST server.\n\n`Permissions`: \"Site Templates\"\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/SiteTemplates"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfuly created collection of site template entities."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "get": {
                "operationId": "getsiteTemplates",
                "summary": "Get siteTemplates collection.",
                "tags": [
                    "siteTemplates",
                    "Sitetemplates"
                ],
                "description": "Get collection of all siteTemplates on the ST server.\n\n`Permissions`: \"Site Templates\"\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/SiteTemplates"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request. Example: response code 400 can be observed when set limit or offset parameters to have a negative value or set incorect fields query parameter.\n"
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/siteTemplates/{name}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the site template.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getSiteTemplate",
                "summary": "Get site template entity.",
                "tags": [
                    "siteTemplates",
                    "Sitetemplates"
                ],
                "description": "Get a site template with specified template name.",
                "responses": {
                    "204": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/SiteTemplate"
                        }
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/transferConfigurations": {
            "parameters": [
                {
                    "name": "subscriptionId",
                    "in": "path",
                    "description": "The id of the subscription.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getTransferConfigurations",
                "summary": "Get collection of transfer configurations.",
                "tags": [
                    "subscriptions",
                    "Subscriptions"
                ],
                "description": "Gets the transfer configurations for specified subscription.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/TransferConfigurations"
                        }
                    },
                    "400": {
                        "description": "Bad Request - the returned error message will tell what was incorrect in the request.."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - subscription with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "post": {
                "operationId": "createOrUpdateTransferConfigurations",
                "summary": "Replace transfer configurations.",
                "tags": [
                    "subscriptions",
                    "Subscriptions"
                ],
                "description": "Delete all transfer configurations and replace them with the given transfer configurations.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TransferConfigurations"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad Request - the returned error message will tell what was incorrect in the request.."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - subscription with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/subscriptions/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "The id of the subscription entity.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "updateSubscriptionProperties",
                "summary": "Update properties of subscription entity.",
                "tags": [
                    "subscriptions",
                    "Subscriptions"
                ],
                "description": "Update properties of subscription entity.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Subscription"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully update subscription."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - subscription with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "get": {
                "operationId": "getSubscription",
                "summary": "Get subscription entity.",
                "tags": [
                    "subscriptions",
                    "Subscriptions"
                ],
                "description": "Get subscription entity.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Subscription"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - subscription with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "delete": {
                "operationId": "deleteSubscription",
                "summary": "Delete (unsubscribe) and/or purge subscription entity.",
                "tags": [
                    "subscriptions",
                    "Subscriptions"
                ],
                "description": "Delete (unsubscribe) and/or purge subscription entity.",
                "parameters": [
                    {
                        "name": "purge",
                        "in": "query",
                        "description": "Defines whether or not to purge the subscription folder.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted subscription."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - subscription with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/subscriptions": {
            "get": {
                "operationId": "getSubscriptions",
                "summary": "Get collection of subscriptions on the ST server.",
                "tags": [
                    "subscriptions",
                    "Subscriptions"
                ],
                "description": "Get collection of subscription on the ST server.",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named `Webservices.EntriesPerPage` (which by default has value 100).",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "account",
                        "in": "query",
                        "description": "The account name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "application",
                        "in": "query",
                        "description": "The application name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "applicationType",
                        "in": "query",
                        "description": "The application type to filter by. Application types are: 'HumanSystem', 'StandardRouter', 'SiteMailbox', 'SharedFolder', 'TransferLogMaint', 'Basic', 'AdvancedRouting', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'SynchronyTransfer', 'MBFT', 'PackageRetentionMaint', 'UnlicensedAccountMaint', 'AuditLogMaint', 'LoginThresholdMaintenance'.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "route",
                        "in": "query",
                        "description": "The route id to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "usedByRoutes",
                        "in": "query",
                        "description": "Defines if subscription is used by routes.If null then do not take into account; If `true` then search for subscriptions used by routes; if `false` then search for subscriptions not used by routes.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "folder",
                        "in": "query",
                        "description": "The subscription folder to filter by. The file path should be provided e.g '/TEST'",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Subscriptions"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "post": {
                "operationId": "createSubscriptions",
                "summary": "Create collection of subscriptions on the ST server.",
                "tags": [
                    "subscriptions",
                    "Subscriptions"
                ],
                "description": "Create subscriptions for accounts on the ST server.\n\nSubscription entites support custom attributes which can be added via the ST RESTful API. The custom attributes are in the following format: `userVars.{attribute_name}: {attribute_value}`. \n\n`Note`: For properties supporting expression language: If the filename expression begins with /, then the transformed file is put in the sub-folder indicated by this filename expression relative to the subscription folder.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Subscriptions"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully created subscriptions."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/transferConfigurations/{transferConfigurationId}": {
            "parameters": [
                {
                    "name": "subscriptionId",
                    "in": "path",
                    "description": "The id of the subscription.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "transferConfigurationId",
                    "in": "path",
                    "description": "The id of the transfer configuration.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getTransferConfiguration",
                "summary": "Get transfer configuration entity.",
                "tags": [
                    "subscriptions",
                    "Subscriptions"
                ],
                "description": "Gets the transfer configurations for a given subscription.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/TransferConfiguration"
                        }
                    },
                    "400": {
                        "description": "Bad Request - the returned error message will tell what was incorrect in the request.."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - subscription with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/schedules/{scheduleTag}": {
            "parameters": [
                {
                    "name": "subscriptionId",
                    "in": "path",
                    "description": "The id of the subscription.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "scheduleTag",
                    "in": "path",
                    "description": "The schedule tag.",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "operationId": "createOrUpdateSubscriptionSchedule",
                "summary": "Updates or replace existing schedule entity.",
                "tags": [
                    "subscriptions",
                    "Subscriptions"
                ],
                "description": "Creates the schedule or replaces existing subscription schedule with the same tag.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Schedule"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad Request - the returned error message will tell what was incorrect in the request.."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - subscription with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "post": {
                "operationId": "updateSubscriptionScheduleProperties",
                "summary": "Update schedule properties for subscription entity.",
                "tags": [
                    "subscriptions",
                    "Subscriptions"
                ],
                "description": "Update schedule properties for subscription entity.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Schedule"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad Request - the returned error message will tell what was incorrect in the request.."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - subscription with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "delete": {
                "operationId": "deleteSubscriptionSchedule",
                "summary": "Delete schedule entity.",
                "tags": [
                    "subscriptions",
                    "Subscriptions"
                ],
                "description": "Delete schedule entity.",
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad Request - the returned error message will tell what was incorrect in the request.."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - subscription with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "get": {
                "operationId": "getSubscriptionSchedule",
                "summary": "Get schedule entity for a subscription with specified id.",
                "tags": [
                    "subscriptions",
                    "Subscriptions"
                ],
                "description": "Get schedule entity for a subscription with specified id.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Schedule"
                        }
                    },
                    "400": {
                        "description": "Bad Request - the returned error message will tell what was incorrect in the request.."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - subscription with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/schedules": {
            "parameters": [
                {
                    "name": "subscriptionId",
                    "in": "path",
                    "description": "The id of the subscription.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getSubscriptionSchedules",
                "summary": "Get collection of schedules for subscription entity with specified id.",
                "tags": [
                    "subscriptions",
                    "Subscriptions"
                ],
                "description": "Get collection of schedules for specified subscription id",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Schedules"
                        }
                    },
                    "400": {
                        "description": "Bad Request - the returned error message will tell what was incorrect in the request.."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - subscription with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "post": {
                "operationId": "createSubscriptionSchedules",
                "summary": "Create collection of schedules for subscription with specified id.",
                "tags": [
                    "subscriptions",
                    "Subscriptions"
                ],
                "description": "Create collection of schedules for subscription with specified id",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Schedules"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad Request - the returned error message will tell what was incorrect in the request.."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - subscription with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/transferConfigurations/{transferConfigurationId}/dataTransformations/{dataTransformationId}": {
            "parameters": [
                {
                    "name": "subscriptionId",
                    "in": "path",
                    "description": "The id of the subscription.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "transferConfigurationId",
                    "in": "path",
                    "description": "The id of the transfer configuration.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "dataTransformationId",
                    "in": "path",
                    "description": "The id of the data transformation.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getDataTransformation",
                "summary": "Get data transformation entity.",
                "tags": [
                    "subscriptions",
                    "Subscriptions"
                ],
                "description": "Get data transformation for a given transfer configuration with given id.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/DataTransformation"
                        }
                    },
                    "400": {
                        "description": "Bad Request - the returned error message will tell what was incorrect in the request.."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - subscription with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/transferConfigurations/{transferConfigurationId}/dataTransformations": {
            "parameters": [
                {
                    "name": "subscriptionId",
                    "in": "path",
                    "description": "The id of the subscription.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "transferConfigurationId",
                    "in": "path",
                    "description": "The id of the transfer configuration.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getDataTransformations",
                "summary": "Get collection of data transformations.",
                "tags": [
                    "subscriptions",
                    "Subscriptions"
                ],
                "description": "Get data transformation entities for a given transfer configuration.\n\nData transformation entities support following additional custom properties: \n\nPARTNER-IN\n- `TRANSFORMED_NAME_EXPRESSION_ENABLED` - Specify if the file should be decrypted. It can be 0 or 1.\n- `TRANSFORMED_NAME_EXPRESSION` - Specify if the decrypted file is saved to a different name, location or both. You can use a file name expression.\n- `REQUIRE_SIGNATURE` - Specify if the file is required to contain a trusted signature or the transfer will fail. It can be 0 or 1.\n- `REQUIRE_ENCRYPTION` - Specify if the file is required to be encrypted or the transfer will fail. It can be 0 or 1.\n- `ORIGINAL_NAME_EXPRESSION_ENABLED` - Specify if the original encrypted file is saved. It can be 0 or 1.\n- `ORIGINAL_NAME_EXPRESSION` - Specify if the original encrypted file is saved to a different name, location, or both. You can use a file name expression.\n- `PGP_ENABLED` - Specify if PGP decryption is enabled. It can be 0 or 1.\n\nPARTNER-OUT\n  \n- `TRANSFORMED_NAME_EXPRESSION_ENABLED` - Specify if the file should be encrypted. It can be 0 or 1.\n- `TRANSFORMED_NAME_EXPRESSION` - Specify if the encrypted file is saved to a different name, location or both. You can use a file name expression.\n- `compressionLevel` - Specify the compression level. Possible values are 2 (Fast), 5 (Normal), 7 (Good) or 9 (Best).\n- `compressionAlgorithm` - Specify what type of compression is used. Possible values are -1 (Preffered), 0 (No compression), 1 (ZIP), 2 (ZLIB) or 3 (BZIP2). Preferred compression methods and order of preference are determined by examining the recipient's PGP key. If the data compression method you choose is not among the recipient's preferred methods, it is possible that the recipient will not be able to access the data.\n- `asciiArmor` - Specify if SecureTransport uses ASCII armor encoding. ASCII armor refers to using binary-to-text encoding for plain text data. It can be 0 or 1.\n- `ORIGINAL_NAME_EXPRESSION_ENABLED` - Specify if the original unencrypted file is saved. It can be 0 or 1.\n- `ORIGINAL_NAME_EXPRESSION` - Specify if the original unencrypted file is saved to a different name, location, or both. You can use a file name expression.\n- `PGP_ENABLED` - Specify if PGP encryption is enabled. It can be 0 or 1.\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/DataTransformations"
                        }
                    },
                    "400": {
                        "description": "Bad Request - the returned error message will tell what was incorrect in the request.."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - subscription with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/transferProfiles": {
            "post": {
                "operationId": "createTransferProfiles",
                "summary": "Create transfer profiles collection.",
                "tags": [
                    "transferProfiles",
                    "Transferprofiles"
                ],
                "description": "Create collection of transfer profiles on the ST server. At least one of the transfer profiles 'sendMapping' or 'receiveMapping' should be set.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TransferProfiles"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully created transfer profile."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "get": {
                "operationId": "getTransferProfiles",
                "summary": "Get transfer profiles collection.",
                "tags": [
                    "transferProfiles",
                    "Transferprofiles"
                ],
                "description": "Get collection of transfer profiles on the ST server.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed rows. The limit parameter can has only nonnegative integer value. If the limit parameter is set to 0 or it is null then its value will be the value of the global server configuration parameter named `Webservices.EntriesPerPage` (which by default has value 100).",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "account",
                        "in": "query",
                        "description": "The account for which the transfer profile is created.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The name of the transfer profile.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "isDefault",
                        "in": "query",
                        "description": "Defines whether the transfer profile is default or not.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/TransferProfiles"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Forbidden - the returned error message will tell what was incorrect in the request."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/transferProfiles/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "The id of the transfer profile.",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "operationId": "deleteTransferProfile",
                "summary": "Delete transfer profile entity.",
                "tags": [
                    "transferProfiles",
                    "Transferprofiles"
                ],
                "description": "Delete transfer profile entity by specified id.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
                "responses": {
                    "204": {
                        "description": "Successfully deleted transfer profile."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - transfer profile with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "post": {
                "operationId": "updateTransferProfile",
                "summary": "Create transfer profile entity.",
                "tags": [
                    "transferProfiles",
                    "Transferprofiles"
                ],
                "description": "Create or Update transfer profile entity. At least one of the transfer profiles 'sendMapping' or 'receiveMapping' should be set.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/TransferProfile"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated transfer profile."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - transfer profile with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "get": {
                "operationId": "getTransferProfile",
                "summary": "Get transfer profile entity.",
                "tags": [
                    "transferProfiles",
                    "Transferprofiles"
                ],
                "description": "Get transfer profile entity by specified id.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/TransferProfile"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - transfer profile with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/transfers/export": {
            "get": {
                "operationId": "exportTransfers",
                "summary": "Get the transfer entities in a CSV format.",
                "tags": [
                    "transfers",
                    "Transfers"
                ],
                "description": "Get the transfer entities on the ST server in a CSV format based on the specified criteria.\n\n**Known Issue:** The endpoint works fine, but can't be visualised, because the return type is currently not supported in the code-generated Swagger client.\n\n`Permissions`: \"TRANSFER_LOG_FORM\".\n",
                "consumes": [
                    "text/csv"
                ],
                "produces": [
                    "text/csv"
                ],
                "parameters": [
                    {
                        "name": "accountOrLogin",
                        "in": "query",
                        "description": "The account or login name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "query",
                        "description": "The transferred file.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "userClass",
                        "in": "query",
                        "description": "The user class. Default values are 'VirtClass' and 'RealClass'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "site",
                        "in": "query",
                        "description": "The name of the transfer site.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "A list of transfer statuses.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "transferId",
                        "in": "query",
                        "description": "The id of the transfer status entry. It is evaluated if at least one of startTimeBefore, startTimeAfter, endTimeBefore, endTimeAfter is set.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "startTimeBefore",
                        "in": "query",
                        "description": "The time before which the transfer started as RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "startTimeAfter",
                        "in": "query",
                        "description": "The time after which the transfer started as RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endTimeBefore",
                        "in": "query",
                        "description": "The time before which the transfer ended as RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endTimeAfter",
                        "in": "query",
                        "description": "The time after which the transfer ended as RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "actionBy",
                        "in": "query",
                        "description": "Defines who initiated the transfer. It can be 'User' or 'Server'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "protocol",
                        "in": "query",
                        "description": "A list of transfer protocols.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "application",
                        "in": "query",
                        "description": "A list of application names.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "A list of transfer directions.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secure",
                        "in": "query",
                        "description": "Defines whether the transfer is secure or non-secure.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resubmitted",
                        "in": "query",
                        "description": "Defines whether the transfer is resubmitted or not-resubmitted. It can be 'false' or 'true'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "operationIndex",
                        "in": "query",
                        "description": "A list of operation indexes.",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "name": "coreId",
                        "in": "query",
                        "description": "The coreId of the transfer entry.",
                        "required": false,
                        "type": "string",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/transfers/pull": {
            "post": {
                "operationId": "pullTransfer",
                "summary": "Triggers pull event to retrieve files.",
                "tags": [
                    "transfers",
                    "Transfers"
                ],
                "description": "Triggers pull event to retrieve files for a given transfer pull entity.\n\n`Permissions`: \"USER_ACCOUNT_FORM\", \"TRANSFER_LOG_FORM\"\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/AdminTransferPull"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/TransferResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - an account with the specified name can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/transfers/{transferId}/transferData": {
            "parameters": [
                {
                    "name": "transferId",
                    "in": "path",
                    "description": "Base64-encoded composite parameter in the format 'Id [mTransferStatusId=var1, mTransferStartTime=var2]', where var1 is the transfer id and var2 is the transfer start time in unix format.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getTransferData",
                "summary": "Get transfer data of transfer entity.",
                "tags": [
                    "transfers",
                    "Transfers"
                ],
                "description": "Get transfer data of transfer entity.\n\n`Permissions`: \"TRANSFER_LOG_FORM\".\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/TransferDataEntries"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - transfer with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/transfers/{transferId}/mdn": {
            "parameters": [
                {
                    "name": "transferId",
                    "in": "path",
                    "description": "Base64-encoded composite parameter in the format 'Id [mTransferStatusId=var1, mTransferStartTime=var2]', where var1 is the transfer id and var2 is the transfer start time in unix format.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getMdn",
                "summary": "Get the mdn receipt of transfer entity",
                "tags": [
                    "transfers",
                    "Transfers"
                ],
                "description": "Get the mdn receipt of transfer entity.\n\n`Permissions`: \"TRANSFER_LOG_FORM\".\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/TransferData"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - transfer with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/transfers/{transferId}/resubmit": {
            "parameters": [
                {
                    "name": "transferId",
                    "in": "path",
                    "description": "Base64-encoded composite parameter in the format 'Id [mTransferStatusId=var1, mTransferStartTime=var2]', where var1 is the transfer id and var2 is the transfer start time in unix format.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "resubmitTransfer",
                "summary": "Resubmit transfer.",
                "tags": [
                    "transfers",
                    "Transfers"
                ],
                "description": "Resubmit transfer.\n\n`Permissions`: \"TRANSFER_LOG_FORM\".\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/ResubmissionStatus"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - transfer with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error - Source for file does not exist."
                    }
                }
            }
        },
        "/transfers/resubmit": {
            "post": {
                "operationId": "resubmitTransfersByCriteria",
                "summary": "Resubmit many transfers based on search criteria.",
                "tags": [
                    "transfers",
                    "Transfers"
                ],
                "description": "Resubmit many transfers based on search criteria.\n\n`Permissions`: \"TRANSFER_LOG_FORM\".\n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of items to retrieve. The limit parameter can has only positive integer value.",
                        "required": true,
                        "type": "integer",
                        "minimum": 1,
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The offset from the first returned result.",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "format": "int32"
                    },
                    {
                        "name": "transferId",
                        "in": "query",
                        "description": "The id of the transfer status entry It is evaluated if at least one of startTimeBefore, startTimeAfter, endTimeBefore, endTimeAfter is set.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "accountOrLogin",
                        "in": "query",
                        "description": "The account or login name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "query",
                        "description": "The transfered file.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "userClass",
                        "in": "query",
                        "description": "The user class.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "site",
                        "in": "query",
                        "description": "The transfer site name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "cycleId",
                        "in": "query",
                        "description": "The Cycle Id.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "The transfer status. More than one parameter is allowed.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "startTimeBefore",
                        "in": "query",
                        "description": "The time before which the transfer started as RFC2822 string.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endTimeBefore",
                        "in": "query",
                        "description": "The time before which the transfer ended as RFC2822 string.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "startTimeAfter",
                        "in": "query",
                        "description": "The time after which the transfer started as RFC2822 string.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endTimeAfter",
                        "in": "query",
                        "description": "The time after which the transfer ended as RFC2822 string.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "actionBy",
                        "in": "query",
                        "description": "Transfer initiated by Server or Client.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "protocol",
                        "in": "query",
                        "description": "The transfer protocol. More than one parameter is allowed.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "application",
                        "in": "query",
                        "description": "The application name. More than one parameter is allowed.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "The transfer direction. More than one parameter is allowed.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secure",
                        "in": "query",
                        "description": "Secure or non-secure transfer.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resubmitted",
                        "in": "query",
                        "description": "Defines whether the transfer is resubmitted or not-resubmitted. It can be 'false' or 'true'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "operationIndex",
                        "in": "query",
                        "description": "The operation index. More than one parameter is allowed.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/ResubmissionStatus"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - transfer with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/transfers/{transferId}": {
            "parameters": [
                {
                    "name": "transferId",
                    "in": "path",
                    "description": "Base64-encoded composite parameter in the format 'Id [mTransferStatusId=var1, mTransferStartTime=var2]', where var1 is the transfer id and var2 is the transfer start time in unix format.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getTransfer",
                "summary": "Get transfer entity.",
                "tags": [
                    "transfers",
                    "Transfers"
                ],
                "description": "Get transfer entity.\n\n`Permissions`: \"TRANSFER_LOG_FORM\".\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/TransferLogDetails"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - transfer with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/transfers/{transferId}/cancel": {
            "parameters": [
                {
                    "name": "transferId",
                    "in": "path",
                    "description": "Base64-encoded composite parameter in the format 'Id [mTransferStatusId=var1, mTransferStartTime=var2]', where var1 is the transfer id and var2 is the transfer start time in unix format.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "cancelTransfer",
                "summary": "Cancel transfer.",
                "tags": [
                    "transfers",
                    "Transfers"
                ],
                "description": "Cancel transfer.\n\n`Permissions`: \"TRANSFER_LOG_FORM\".\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/ResubmissionStatus"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - transfer with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/transfers": {
            "get": {
                "operationId": "getTransfers",
                "summary": "Get transfers collection.",
                "tags": [
                    "transfers",
                    "Transfers"
                ],
                "description": "Get collection of the transfers on the ST server.\n\n`Permissions`: \"TRANSFER_LOG_FORM\".\n\n**Known Issue:** The generated Swagger code-gen client returns empty transfer entities.\n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed rows. The limit parameter can has only positive integer value.",
                        "required": true,
                        "type": "integer",
                        "minimum": 1,
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The start row to list. The offset parameter can has only nonnegative integer value. If this parameter is not set, then it is considered 0.",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "format": "int32"
                    },
                    {
                        "name": "accountOrLogin",
                        "in": "query",
                        "description": "The account or login name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "query",
                        "description": "The transferred file.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "userClass",
                        "in": "query",
                        "description": "The user class. Default values are 'VirtClass' and 'RealClass'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "site",
                        "in": "query",
                        "description": "The name of the transfer site.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "A list of transfer statuses. It can be 'In Progress', 'Processed', 'Failed', 'Aborted', 'Pending receipt', 'Failed Subtransmission', 'Paused' or 'Failed Transfer Resubmit'.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "transferId",
                        "in": "query",
                        "description": "Base64-encoded composite parameter in the format 'Id [mTransferStatusId=var1, mTransferStartTime=var2]', where var1 is the transfer id and var2 is the transfer start time in unix format.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "startTimeBefore",
                        "in": "query",
                        "description": "The time before which the transfer started as RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "startTimeAfter",
                        "in": "query",
                        "description": "The time after which the transfer started as RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endTimeBefore",
                        "in": "query",
                        "description": "The time before which the transfer ended as RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "endTimeAfter",
                        "in": "query",
                        "description": "The time after which the transfer ended as RFC2822 string - EEE, d MMM yyyy HH:mm:ss Z.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "actionBy",
                        "in": "query",
                        "description": "Defines who initiated the transfer. It can be 'User' or 'Server'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "protocol",
                        "in": "query",
                        "description": "A list of transfer protocols. It can be 'as2', 'ftp', 'http', 'ssh', 'pesit', 'folder', 'adhoc', 'sharepoint', 'smb', 'http-generic' or 'amazonS3'.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "application",
                        "in": "query",
                        "description": "A list of application names.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "A list of transfer directions. It can be 'Incoming' or 'Outgoing'.",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "secure",
                        "in": "query",
                        "description": "Defines whether the transfer is secure or non-secure. It can be 'false' or 'true'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resubmitted",
                        "in": "query",
                        "description": "Defines whether the transfer is resubmitted or not-resubmitted. It can be 'false' or 'true'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "operationIndex",
                        "in": "query",
                        "description": "A list of operation indexes. It can be '(none)' or some ID.",
                        "required": false,
                        "type": "array"
                    },
                    {
                        "name": "coreId",
                        "in": "query",
                        "description": "The coreId of the transfer entry.",
                        "required": false,
                        "type": "string",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/TransferEntries"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/transfers/{transferId}/mdn/verify": {
            "parameters": [
                {
                    "name": "transferId",
                    "in": "path",
                    "description": "Base64-encoded composite parameter in the format 'Id [mTransferStatusId=var1, mTransferStartTime=var2]', where var1 is the transfer id and var2 is the transfer start time in unix format.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "verifyReceipt",
                "summary": "Get mdn verification of transfer entity.",
                "tags": [
                    "transfers",
                    "Transfers"
                ],
                "description": "Get mdn verification of transfer entity.\n\n`Permissions`: \"TRANSFER_LOG_FORM\".\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/ReceiptVerificationResult"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - transfer with the specified id can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/userClasses": {
            "get": {
                "operationId": "getUserClasses",
                "summary": "Get a collection of existing on SecureTransport server user classes.",
                "tags": [
                    "userClasses",
                    "Userclasses"
                ],
                "description": "Get a collection of all the user classes on the SecureTransport server. \nGET request return collection containing all currently available on server user classes, or partial ones filtered by the query parameters.  \n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed rows. The limit parameter can only have a nonnegative integer value. \nIf the limit parameter is set to 0 or it is null then its value will be the value of the global server \nconfiguration parameter named 'Webservices.EntriesPerPage' (which by default has a value of 100).\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The initial row to list all user classes. The offset parameter can only have a nonnegative integer value. \nIf this parameter is not set, then it is considered 0.\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "className",
                        "in": "query",
                        "description": "A user class name.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "userType",
                        "in": "query",
                        "description": "A user class type.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "The position on which a user class is persisted.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "userName",
                        "in": "query",
                        "description": "A user name bound to a user class.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "description": "Is user class enabled.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "group",
                        "in": "query",
                        "description": "The group which a user class belongs to.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "address",
                        "in": "query",
                        "description": "A user class host.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "expression",
                        "in": "query",
                        "description": "A user class expression.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/UserClasses"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - a user class with a specified id can not be found on the SecureTransport server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "post": {
                "operationId": "POST_userClasses",
                "summary": "Create a single user class on the SecureTransport server.",
                "tags": [
                    "userClasses",
                    "Userclasses"
                ],
                "description": "Create a single user class on SecureTransport server.\n\nThe required properties in the POST request are: className, userType, userName, group and host.\nThe order, expression and enabled properties are optional. Default values for this properties are false,\"\" and 1. During a POST\nrequest the properties enabled and expression can be modified, but all values passed for property order will be ignored and default one will be used.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserClassBodyData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "A successfully created user class. To access a new resource see the location header."
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "409": {
                        "description": "Conflict - the user class with the same properties already exists on SecureTransport server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/userClasses/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "description": "The ID of the class which will be deleted.",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "operationId": "deleteUserClass",
                "summary": "Delete a user class instance associated with the provided ID.",
                "tags": [
                    "userClasses",
                    "Userclasses"
                ],
                "description": "Delete a user class instance.\n",
                "responses": {
                    "204": {
                        "description": "A successfully deleted user class."
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - a user class with a specified id can not be found on the SecureTransport server."
                    },
                    "409": {
                        "description": "Conflict - the user class with the same properties already exists on the SecureTransport server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "put": {
                "operationId": "updateUserClass",
                "summary": "Update an existing on SecureTransport server user class.",
                "tags": [
                    "userClasses",
                    "Userclasses"
                ],
                "description": "Update an existing user class on the SecureTransport server. The update full overwrite the previously existing user class on the SecureTransport server.\n Required information for the user class\nfields(className, userType, address and group) must be specified. Optional properties are: enabled, expression and\norder. \n\nThe enabled property is used for enabling or disabling the user class instance.\nThe order property is used to change the position of the user class. When changing position of the user class instance\nall user classes before or after the new user class position will be shifted up or down by one position.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/UserClassBodyData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user class."
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "409": {
                        "description": "Conflict - the user class with the same properties already exists on the SecureTransport server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "get": {
                "operationId": "getUserClass",
                "summary": "Get an instance of a user class associated with provided ID.",
                "tags": [
                    "userClasses",
                    "Userclasses"
                ],
                "description": "Get a user class, bounded to the provided ID. \n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/UserClassGET"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message describes the reason why the request was incorrect."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/validation/path": {
            "post": {
                "operationId": "pathOperations",
                "summary": "Perform various path operations.",
                "tags": [
                    "validation",
                    "Validation"
                ],
                "description": "Validate whether or not the given directory actually exist.",
                "consumes": [
                    "multipart/form-data"
                ],
                "parameters": [
                    {
                        "name": "inputPath",
                        "in": "formData",
                        "description": "The path to validate",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "validate",
                        "in": "formData",
                        "description": "Whether or not the path should be validate.",
                        "type": "boolean",
                        "default": true
                    },
                    {
                        "name": "isDirectory",
                        "in": "formData",
                        "description": "Whether or not the provided path is directory.",
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "isFile",
                        "in": "formData",
                        "description": "Whether or not the provided path is file.",
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "exist",
                        "in": "formData",
                        "description": "Whether or not the provided path exist.",
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the map with the all requested information."
                    },
                    "400": {
                        "description": "Bad Request - the returned error message will tell what was incorrect in the request. Probably validate is 'false' and the path is not correct."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/validation/validPath": {
            "post": {
                "operationId": "validPath",
                "summary": "Check if the path is a valid path",
                "tags": [
                    "validation",
                    "Validation"
                ],
                "description": "Checks if a path is a valid path. The path is also validated against SecureTransport's unsafe paths configuration.",
                "consumes": [
                    "multipart/form-data"
                ],
                "parameters": [
                    {
                        "name": "path",
                        "in": "formData",
                        "description": "The path to validate.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The path is valid."
                    },
                    "400": {
                        "description": "Bad Request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "The path is invalid or not allowed."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            }
        },
        "/version": {
            "get": {
                "operationId": "getSTVersion",
                "summary": "Get version information.",
                "tags": [
                    "version",
                    "Version"
                ],
                "description": "Gets the version information of the ST server.",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VersionInformation"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "500": {
                        "description": "Internal server error."
                    }
                }
            }
        },
        "/zones/{name}/edges/{title}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the DMZ zone entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "title",
                    "in": "path",
                    "description": "The title of the egde to create or replace (if exists).",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "operationId": "createOrUpdateEdge",
                "summary": "Create an edge for a specific DMZ zone or replace an existing edge with the same name.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Create an edge for a specific DMZ zone on the ST server or replace an existing edge with the same name. \n\n`Permissions`: \"DMZ_ZONE_FORM\"\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Edge"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully created (replaced) edge of a specified DMZ zone."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "updateEdgeProperties",
                "summary": "Update an edge with a given title in DMZ zone entity with given name.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Update an edge with a given title in DMZ zone entity with given name with the given edge properties. \n\n`Permissions`: \"DMZ_ZONE_FORM\"\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Edge"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated edge of a specified DMZ zone."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found on the ST server."
                    }
                }
            },
            "delete": {
                "operationId": "deleteEdge",
                "summary": "Delete an edge of the DMZ zone entity.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Delete an edge of the DMZ zone entity. \n\n`Permissions`: \"DMZ_ZONE_FORM\"\n\nDeleting an edge which is local (such nodes have configurationId specified) should be avoided as it will make your SecureTransport server unusable. This is allowed only in cases where the SecureTransport is configured as a cluster and you're deleting the a local edge of a cluster node that is removed from the cluster. After doing this the removed cluster node can no longer be rejoined to the cluster. You need to start with fresh SecureTransport installation to be able to join the node in the cluster again. \n",
                "responses": {
                    "204": {
                        "description": "Successfully deleted edge of a specified DMZ zone."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found on the ST server."
                    }
                }
            },
            "get": {
                "operationId": "getEdge",
                "summary": "Get an edge with a given title in DMZ zone entity with given name.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Get an edge with a given title in DMZ zone entity with given name.\n\n`Permissions`: \"DMZ_ZONE_FORM\"\n",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Edge"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found on the ST server."
                    }
                }
            }
        },
        "/zones/{name}/edges/{title}/certificates/certificateRequests/{id}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the zone entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "title",
                    "in": "path",
                    "description": "The title of the edge.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "id",
                    "in": "path",
                    "description": "The ID of the Certificate Signing Request to delete.",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "operationId": "deleteEdgeCertificateRequest",
                "summary": "Delete a Certificate Signing Request for a specific edge of a specific DMZ zone.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Delete a Certificate Signing Request for a specific edge of a specific DMZ zone. \n\n`Permissions`: \"DMZ_ZONE_FORM\", \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nNOTE: This is supported for `ST EDGE` only.\n",
                "responses": {
                    "204": {
                        "description": "Successfully deleted certificate signing request."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if zone entity with specified name can not be found."
                    }
                }
            }
        },
        "/zones/{name}/edges/{title}/proxies/{proxy}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the DMZ zone entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "title",
                    "in": "path",
                    "description": "The title of the egde.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "proxy",
                    "in": "path",
                    "description": "The proxy protocol (case insensitive). Possible options for the proxy protocol are: 'SOCKS_PROXY' and 'HTTP_PROXY'.\n",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getProxy",
                "summary": "Get a protocol in an edge with the given title in zone with the given name.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Get a protocol in an edge with the given title in zone with the given name.\n\n`Permissions`: \"DMZ_ZONE_FORM\"\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/EdgeProxy"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request. For example if non-existent proxy protocol is specified."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "updateProxyProperties",
                "summary": "Update edge proxy properties.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Update edge proxy properties.\n\n`Permissions`: \"DMZ_ZONE_FORM\"\n\n**Known Issue:** Can not update edgeProxy properties. The post request returns status code 204 but the edgeProxy entity can not be updated.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/EdgeProxy"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated proxy protocol.",
                        "schema": {
                            "$ref": "#/definitions/EdgeProxy"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request. For example if non-existent proxy protocol is specified."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found on the ST server."
                    }
                }
            }
        },
        "/zones/{name}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the zone entity to create(replace).",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "operationId": "createOrUpdateZone",
                "summary": "Create a zone entity on the ST server or replace an existing zone with the same name.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Create a zone entity on the ST server or replace an existing zone with the same name.\n\n`Permissions`: \"DMZ_ZONE_FORM\"\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Zone"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully created or replaced DMZ zone entity."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found on the ST server."
                    },
                    "500": {
                        "description": "Internal Server Error."
                    }
                }
            },
            "delete": {
                "operationId": "deleteZone",
                "summary": "Deletes a zone entity with given name.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Deletes a zone entity with given name.\n\n`Permissions`: \"DMZ_ZONE_FORM\"\n",
                "responses": {
                    "204": {
                        "description": "Successfully deleted zone entity."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "updateZoneProperties",
                "summary": "Update fields of an existing DMZ zone with the same name.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Update fields of an existing DMZ zone with the same name.\n\n`Permissions`: \"DMZ_ZONE_FORM\"\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Zone"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated properties of a DMZ zone entity.",
                        "schema": {
                            "$ref": "#/definitions/Zone"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request. For example if specified zone name does not match the one in the zone object."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found on the ST server."
                    }
                }
            },
            "get": {
                "operationId": "getDmzZone",
                "summary": "Get a DMZ zone entity with a given name.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Get a DMZ zone entity with a given name.\n\n`Permissions`: \"DMZ_ZONE_FORM\"\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Zone"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found on the ST server."
                    }
                }
            }
        },
        "/zones/{name}/edges/{title}/protocols/{protocol}/configuration": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the DMZ zone entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "title",
                    "in": "path",
                    "description": "The title of the egde.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "protocol",
                    "in": "path",
                    "description": "The streaming protocol of the egde (case insensitive). Possible options for streaming protocol are: 'HTTP', 'FTP', 'AS2', 'SSH', 'PESIT'.\n",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getDmzZonesOnEdge",
                "summary": "Get a configuration of a specified protocol on the edge.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Get a configuration of a specified protocol on the edge. Backend TransactionManager and protocol daemon on the required edge should be started. If protocol daemon is not started HTTP 409 Conflict status code is returned. \n\n\n`Permissions`: \"DMZ_ZONE_FORM\", \"SERVER_CONFIGURATION_FORM\", \"SUPPORT_TOOL_CONFIGURATION_FORM\".\n\nNOTE: This is not supported for Admin.\n\n**Known Issue:** The configuration options collection does not comply with the common json objects representation.\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/ConfigurationOptions"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request. For example if 'ADMIN' protocol is specified (Admin configuration is not supported)."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found."
                    }
                }
            }
        },
        "/zones/{name}/edges/{title}/protocols/{protocol}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the DMZ zone entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "title",
                    "in": "path",
                    "description": "The title of the egde.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "protocol",
                    "in": "path",
                    "description": "The streaming protocol of the egde (case insensitive). Possible options for streaming protocol are: 'HTTP', 'FTP', 'AS2', 'SSH', 'PESIT', 'ADMIN'.\n",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "updateProtocolProperties",
                "summary": "Update a protocol in an edge with the given title in zone entity with given name.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Update a protocol in an edge with the given title in zone entity with given name.\n\n`Permissions`: \"DMZ_ZONE_FORM\"\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/EdgeProtocol"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated edge protocol."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found on the ST server."
                    }
                }
            },
            "get": {
                "operationId": "getProtocol",
                "summary": "Get a protocol in an edge with the given title in zone entity with given name.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Get a protocol in an edge with the given title in zone entity with given name.\n\n`Permissions`: \"DMZ_ZONE_FORM\"\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/EdgeProtocol"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request. For example if non-existent streaming protocol is specified."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found on the ST server."
                    }
                }
            }
        },
        "/zones/{name}/edges/{title}/certificates/{id}/duplicate": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the zone entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "title",
                    "in": "path",
                    "description": "The title of the edge.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "id",
                    "in": "path",
                    "description": "The ID of the certificate entity to duplicate.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "duplicateEdgeCertificate",
                "summary": "Duplicate a certificate entity for a specific edge of a specific DMZ zone.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Duplicate a certificate with the given ID and save it with a different name. Login certificates can not be duplicated - they are unique. \n\n`Permissions`: \"DMZ_ZONE_FORM\", \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nNOTE: This is supported for `ST EDGE` only.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Certificate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully duplicated certificate entity with a new name.",
                        "schema": {
                            "$ref": "#/definitions/Certificate"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if zone entity with specified name can not be found."
                    }
                }
            }
        },
        "/zones/{name}/edges/{title}/certificates": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the zone entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "title",
                    "in": "path",
                    "description": "The title of the edge which certificates to get.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getEdgeCertificates",
                "summary": "Get the collection of certificate entities for a specific edge of a specific DMZ zone.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Get the collection of certificate entities for a specific edge of a specific DMZ zone.\n\n`Permissions`: \"DMZ_ZONE_FORM\", \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nNOTE: This is supported for `ST EDGE` only.\n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed certificate entities. The limit parameter can has only positive integer value. If the limit parameter is not set then as limit is set the max Integer value: 2 147 483 647\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The index of the first certificate entity reference to get.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The certificate type to search for. Possible values are 'pgp' and 'x509'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "usage",
                        "in": "query",
                        "description": "The certificate usage to search for. Possible values are 'private', 'local', 'partner', 'login' and 'trusted'.\n",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "account",
                        "in": "query",
                        "description": "The account name to filter by.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "The certificate name to filter by.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Certificates"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if account with specified name can not be found."
                    }
                }
            },
            "post": {
                "operationId": "generateEdgeCertificate",
                "summary": "Create a certificate entity for a specific edge of a specific DMZ zone.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Create a certificate entity for a specific edge of a specific DMZ zone. \n\n`Permissions`: \"DMZ_ZONE_FORM\", \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nOn user account level there are three types of certificates depending on the certificate usage - `login`, `private` and `partner`. \n\nNotes: \n    - Only 'ca' trusted certificate could be regenerated. \n    - Regenerated 'ca' trustedcertificate can not be of type 'pgp'. \n    - Login certificates can not be of type 'pgp'. \n\nNOTE: This is supported for `ST EDGE` only.\n",
                "produces": [
                    "multipart/mixed"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Certificate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created certificate entity.",
                        "schema": {
                            "$ref": "#/definitions/MultiPart"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Forbidden - the returned error message will tell what was incorrect in the request. For example if overwrite a trusted certificate and the new one has the same alias as the existing one."
                    },
                    "404": {
                        "description": "Not Found - for example if zone entity with specified name can not be found."
                    }
                }
            }
        },
        "/zones/{name}/edges/{title}/protocols": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the DMZ zone entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "title",
                    "in": "path",
                    "description": "The title of the egde.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getProtocols",
                "summary": "Get the protocols for a given edge and DMZ zone.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Get the protocols for a given edge and DMZ zone.\n\n`Permissions`: \"DMZ_ZONE_FORM\"\n\n**Known Issue:** The edge protocols collection does not comply with the common json objects representation.\n",
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/EdgeProtocols"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found on the ST server."
                    }
                }
            }
        },
        "/zones/{name}/edges/{title}/certificates/{id}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the zone entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "title",
                    "in": "path",
                    "description": "The title of the edge.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "id",
                    "in": "path",
                    "description": "The ID of the certificate entity to delete.",
                    "required": true,
                    "type": "string"
                }
            ],
            "delete": {
                "operationId": "deleteEdgeCertificate",
                "summary": "Delete a certificate entity for a specific edge of a specific DMZ zone.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Delete a certificate entity having the specified ID for a specific edge of a specific DMZ zone. \n\n`Permissions`: \"DMZ_ZONE_FORM\", \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nNOTE: This is supported for `ST EDGE` only.\n",
                "responses": {
                    "204": {
                        "description": "Successfully deleted certificate entity."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if zone entity with specified name can not be found."
                    }
                }
            },
            "get": {
                "operationId": "getEdgeCertificateDetails",
                "summary": "Get the certificate details for a certificate entity for a specific edge of a specific DMZ zone.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Get the certificate details for a certificate entity for a specific edge of a specific DMZ zone. \n\n`Permissions`: \"DMZ_ZONE_FORM\", \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nNOTE: This is supported for `ST EDGE` only.\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Certificate"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if zone entity with specified name can not be found."
                    }
                }
            }
        },
        "/zones/{name}/edges/{title}/certificates/export": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the zone entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "title",
                    "in": "path",
                    "description": "The title of the edge.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "exportEdgeCertificate",
                "summary": "Export a certificate entity for a specific edge of a specific DMZ zone.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Export a certificate entity for a specific edge of a specific DMZ zone. \n\n`Permissions`: \"DMZ_ZONE_FORM\", \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nNote: A login certificate could be exported only by certificate id. If export the private key of a trusted certificate then the private key protection password is required. \n\nNOTE: This is supported for `ST EDGE` only.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Certificate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/MultiPart"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if zone entity with specified name can not be found."
                    },
                    "500": {
                        "description": "Internal Server Error - for example if public key algorithm is not correct"
                    }
                }
            }
        },
        "/zones/{name}/edges/{title}/certificates/{id}/updateAccess": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the zone entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "title",
                    "in": "path",
                    "description": "The title of the edge.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "id",
                    "in": "path",
                    "description": "The id of the certificate entity which access level will update.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "updateEdgeCertificateAccess",
                "summary": "Update the access level of a certificate entity for a specific edge of a specific DMZ zone.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Update the access level of a certificate entity for a specific edge of a specific DMZ zone. Certificate access level can be set only for private and partner certificates. \n\n`Permissions`: \"DMZ_ZONE_FORM\", \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nNOTE: This is supported for `ST EDGE` only.\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CertificateAccessLevel"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated certificate access level."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if zone entity with specified name can not be found."
                    }
                }
            }
        },
        "/zones/{name}/edges/{title}/certificates/import": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the zone entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "title",
                    "in": "path",
                    "description": "The title of the edge.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "importEdgeCertificate",
                "summary": "Import certificate entity for a specific edge of a specific DMZ zone.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Import certificate entity for a specific edge of a specific DMZ zone. \n\n`Permissions`: \"DMZ_ZONE_FORM\", \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nImport X509, SSH or PGP key. Can not import login certificate to account template. The response is holding the newly created Certificate entity. \n\n`NOTE`: The MIME boundary is hardcoded to 'demoBoundary' because of swagger limitations (reffer to https://github.com/OAI/OpenAPI-Specification/issues/303 for more information).        \n\nNOTE: This is supported for `ST EDGE` only.\n\n**Known issue:** The import of x509 certificates of local and private usage can not be done via text representation of the certificate. This can be done with importing the `PKCS #12` format file.\n",
                "consumes": [
                    "multipart/mixed;boundary=demoBoundary"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MultiPart"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Certificate"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if zone entity with specified name can not be found."
                    },
                    "500": {
                        "description": "Internal Server Error - for example if certificate data is not correct."
                    }
                }
            }
        },
        "/zones/{name}/edges": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the DMZ zone entity which edges to get.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getEdges",
                "summary": "Get edges for a given DMZ zone.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Get edges for a given DMZ zone.\n\n`Permissions`: \"DMZ_ZONE_FORM\"\n\n**Known Issue:** The edges collection does not comply with the common json objects representation.\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Edges"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found on the ST server."
                    }
                }
            },
            "post": {
                "operationId": "createEdges",
                "summary": "Create edges for a given DMZ zone.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Create edges for a given DMZ zone.\n\n`Permissions`: \"DMZ_ZONE_FORM\"\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Edges"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully created edges for the specified DMZ zone."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request. Example: if a DMZ zone entity with the given name can not be found on the ST server.\n"
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    }
                }
            }
        },
        "/zones/{name}/edges/{title}/certificates/certificateRequests": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the zone entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "title",
                    "in": "path",
                    "description": "The title of the edge.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "generateEdgeCertificateRequest",
                "summary": "Generate Certificate Signing Request for a specific edge of a specific DMZ zone.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Generate Certificate Signing Request for a specific edge of a specific DMZ zone.\n\n`Permissions`: \"DMZ_ZONE_FORM\", \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\". \n\nNOTE: This is supported for `ST EDGE` only.\n",
                "produces": [
                    "multipart/mixed"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CertificateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created certificate signing request operation.",
                        "schema": {
                            "$ref": "#/definitions/MultiPart"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if zone entity with specified name can not be found."
                    }
                }
            },
            "get": {
                "operationId": "getEdgeCertificateRequests",
                "summary": "Get the collection of certificate requests for a specific edge of a specific DMZ zone.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Get the collection of certificate requests for a specific edge of a specific DMZ zone. \n\n`Permissions`: \"DMZ_ZONE_FORM\", \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nCertificate request properties 'keySize' and 'usage' are used only for certificate generation. When get certificate requests, 'usage' property will not be listed and 'keySize' will be listed with a zero value. \n\nNOTE: This is supported for `ST EDGE` only.\n",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The limit of the listed entities. The limit parameter can has only positive integer value. If the limit parameter is not set then as limit is set the max Integer value: 2 147 483 647\n",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The index of the first certificate entity reference to get.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "usage",
                        "in": "query",
                        "description": "The certificate request usage to search for. Possible values are 'private', 'local'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "account",
                        "in": "query",
                        "description": "The account name to filter by.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/CertificateRequests"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if account/DMZ zone with specified name can not be found."
                    }
                }
            }
        },
        "/zones": {
            "get": {
                "operationId": "getDmzZones",
                "summary": "Get collection of zone entities on the ST server.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Get collection of zone entities on the ST server.\n\n`Permissions`: \"DMZ_ZONE_FORM\"\n\n**Known Issue:** The zones collection does not comply with the common json objects representation.\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/Zones"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    }
                }
            },
            "post": {
                "operationId": "createZones",
                "summary": "Create a collection of zone entities on the ST server.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Create a collection of zone entities on the ST server.\n\n`Permissions`: \"DMZ_ZONE_FORM\"\n",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/CreateZones"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful operation."
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found."
                    }
                }
            }
        },
        "/zones/{name}/edges/{title}/protocols/{protocol}/certificates/{alias}": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the DMZ zone entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "title",
                    "in": "path",
                    "description": "The title of the egde.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "protocol",
                    "in": "path",
                    "description": "The streaming protocol of the egde (case insensitive). Possible options for streaming protocol are: 'HTTP', 'FTP', 'AS2', 'SSH', 'PESIT'.\n",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "alias",
                    "in": "path",
                    "description": "The certificate alias.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getServerCertificate",
                "summary": "Get server certificate of the specified protocol on the edge by alias.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Get server certificate of the specified protocol on the edge by alias. Backend TransactionManager and protocol daemon on the required edge should be started. If protocol daemon is not started HTTP 409 Conflict status code is returned. \n\n`Permissions`: \"DMZ_ZONE_FORM\"\n\nNOTE: This is not supported for Admin.\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/CertificateDetails"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request. For example if 'ADMIN' protocol is specified (Admin configuration is not supported)."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found."
                    }
                }
            }
        },
        "/zones/{name}/edges/{title}/proxies": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the DMZ zone entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "title",
                    "in": "path",
                    "description": "The title of the egde.",
                    "required": true,
                    "type": "string"
                }
            ],
            "get": {
                "operationId": "getProxies",
                "summary": "Get the proxies for a given edge and zone entity.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Get the proxies for a given edge and zone entity.\n\n`Permissions`: \"DMZ_ZONE_FORM\"\n\n**Known Issue:** The edge proxies collection does not comply with the common json objects representation.\n",
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/EdgeProxies"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if a DMZ zone entity with the given name can not be found on the ST server."
                    }
                }
            }
        },
        "/zones/{name}/edges/{title}/certificates/certificateRequests/complete": {
            "parameters": [
                {
                    "name": "name",
                    "in": "path",
                    "description": "The name of the zone entity.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "title",
                    "in": "path",
                    "description": "The title of the edge.",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "operationId": "completeEdgeCertificateRequest",
                "summary": "Complete Certificate Signing Request for a specific edge of a specific DMZ zone.",
                "tags": [
                    "zones",
                    "Zones"
                ],
                "description": "Complete Certificate Signing Request for a specific edge of a specific DMZ zone. \n\n`Permissions`: \"DMZ_ZONE_FORM\", \"MASTER_CERT_MGR_FORM_1\", \"MASTER_CERT_MGR_FORM_2\", \"MASTER_CERT_MGR_FORM_3\", \"MASTER_CERT_MGR_FORM\", \"USER_ACCOUNT_FORM\", \"SERVICE_ACCOUNT_FORM\", \"TEMPLATES_FORM\".\n\nImport a certificate to the local X509 keystore for an existing certificate signing request. The certificate, along with the private key of the corresponding CSR, are imported.  The CSR is removed following a successful import. The response is holding the newly created Certificate entity. \n\nNOTE: This is supported for `ST EDGE` only.\n\n**Known Issue:** This functionality is not working as expected and certificate signing requests can not be completed.\n",
                "consumes": [
                    "multipart/mixed"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/MultiPart"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully completed certificate signing request operation.",
                        "schema": {
                            "$ref": "#/definitions/Certificate"
                        }
                    },
                    "400": {
                        "description": "Bad request - the returned error message will tell what was incorrect in the request."
                    },
                    "401": {
                        "description": "Unauthorized - incorrect login credentials."
                    },
                    "403": {
                        "description": "Unauthorized - insufficient permissions to perform the operation."
                    },
                    "404": {
                        "description": "Not Found - for example if zone entity with specified name can not be found."
                    }
                }
            }
        }
    },
    "definitions": {
        "IcapServer": {
            "title": "IcapServer",
            "type": "object",
            "required": [
                "maxSize",
                "name",
                "previewSize",
                "type",
                "url"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the ICAP server"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the ICAP server: INCOMING, OUTGOING or BOTH. INCOMING means that scanning will be performed by this ICAP server for all Incoming transfers: File upload, AdHoc message creation, etc. OUTGOING means that scanning will be performed by this ICAP server for all Outgoing transfers: File download, Reading of an AdHoc message, etc. BOTH means that scanning will be performed by this ICAP server for all types of transfers",
                    "enum": [
                        "INCOMING",
                        "OUTGOING",
                        "BOTH"
                    ]
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Choose whether or not ICAP server to be enabled",
                    "default": false
                },
                "url": {
                    "type": "string",
                    "description": "The ICAP server URL in the following format: icap://dlpav-address:port/servicename. The 'servicename' could be the same as the mode of operation - REQMOD or RESPMOD, or it could be something custom and vendor specific. Examples: icap://dlpav-address:1344/AVSCAN, icap://dlpav-address:1344/REQMOD, icap://dlpav-address:11344/RESPMOD"
                },
                "useSecure": {
                    "type": "boolean",
                    "description": "Indicates if ICAP server should use secure connection",
                    "default": false
                },
                "certVerify": {
                    "type": "boolean",
                    "description": "Indicates if server certificates should be verified or not.",
                    "default": false
                },
                "enabledProtocols": {
                    "type": "string",
                    "description": "A list of comma separated SSL protocols to be enabled. The default value is: TLSv1.2"
                },
                "enabledCiphers": {
                    "type": "string",
                    "description": "A list of comma separated ciphers to be used for SSL connection. The default value is: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_DSS_WITH_AES_256_GCM_SHA384, TLS_DHE_DSS_WITH_AES_256_CBC_SHA256, TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_DSS_WITH_AES_128_GCM_SHA256, TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_EMPTY_RENEGOTIATION_INFO_SCSV"
                },
                "fipsEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not FIPS transfer mode should be used.",
                    "default": false
                },
                "maxSize": {
                    "type": "string",
                    "description": "Messege maximum file size in MB to be sent to the ICAP server. If max message size is set to 0 or negative value, it is considered unlimited"
                },
                "previewSize": {
                    "type": "string",
                    "description": "Preview size in KB. If it is set to 0 or negative value, the whole file is transfered to the ICAP server, otherwise the specified size of the file is sent first. Based on the result of the preview, the scan is either complete or the rest of the file is sent for scan as well."
                },
                "denyOnConnectionError": {
                    "type": "boolean",
                    "description": "Indicates whether or not to deny the transfer on connection failure",
                    "default": true
                },
                "notifyOnIcapError": {
                    "type": "boolean",
                    "description": "Indicates whether or not to enable email notifications on connection failure",
                    "default": false
                },
                "mailAddressesOnIcapError": {
                    "type": "string",
                    "description": "List of addresses to which email notifications must be sent in case of connection failure"
                },
                "notifyOnIcapDenied": {
                    "type": "boolean",
                    "description": "Indicates whether or not to enable email notifications on ICAP denied",
                    "default": false
                },
                "mailAddressesOnIcapDenied": {
                    "type": "string",
                    "description": "List of addresses to which email notifications must be sent in case of ICAP deny"
                },
                "headersMapping": {
                    "type": "string",
                    "description": "A list of semicolon separated key-value pairs of custom HTTP headers in the following format: 'key=value'. The separator sign '=' is mandatory."
                },
                "enableWinNtFormat": {
                    "type": "boolean",
                    "description": "Indicates whether or not to report X-Authenticated-User in WinNT format in case of LDAP authentication.",
                    "default": false
                },
                "connectionTimeout": {
                    "type": "string",
                    "description": "Indicates maximum connection tiomeout in seconds"
                },
                "readTimeout": {
                    "type": "string",
                    "description": "Read timeout in seconds"
                },
                "scanWithoutBu": {
                    "type": "boolean",
                    "description": "Indicates whether or not to enable ICAP scanning for accounts with no Business Unit assigned",
                    "default": true
                },
                "ignoredFileTypes": {
                    "type": "string",
                    "description": "List of file extensions separated by comma. Files with these extensions will not be scanned"
                },
                "stopModifyOrNotHandled": {
                    "type": "boolean",
                    "description": "Indicates whether or not to stop the transfer if ICAP server returns a MODIFY result or an unhandled status",
                    "default": false
                },
                "treatModifyAsBlock": {
                    "type": "boolean",
                    "description": "Indicates whether or not to treat the ICAP MODIFIED action as block",
                    "default": true
                },
                "scanPolicyExpression": {
                    "type": "string",
                    "description": "The field allows the usage of ST Expression Language. Based on this expression scanning will be performed or not. Example: ${env['DXAGENT_PROTOCOL'] ne 'ssh'}. Translation: Do not scan if the transfer is taking place over SSH protocol"
                },
                "scanOnlyIfPartnerRecipient": {
                    "type": "boolean",
                    "description": "Enables or disables ICAP scanning for AdHoc messages if at least one of the recipients is partner. User type - internal or partner - is controlled by the account setting. Possible values are 'Internal' - internal accounts - and 'Partner' - external accounts. If the type of a recipient cannot be identified, the account will be considered External.",
                    "default": false
                }
            },
            "description": "ICAP server object."
        },
        "User": {
            "title": "User",
            "type": "object",
            "required": [
                "name",
                "passwordCredentials"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the user (the login name)",
                    "minLength": 0,
                    "maxLength": 80,
                    "pattern": "^(([^\\+\\:\\[]*))$"
                },
                "authExternal": {
                    "type": "boolean",
                    "description": "Tells if external authentication is enabled. It has value 'true' if the user authentication is done by an external authentication and 'false' if the user authentication is done by the ST system\n",
                    "default": false
                },
                "lastLogin": {
                    "type": "string",
                    "description": "The time the user last successfully logged in. It has value null if the user never successfully logged in. The time is in RFC 2822 format - EEE, d MMM yyyy HH:mm:ss Z. Note: This property is read only property. Secure Transport server sets that property on user login.\n"
                },
                "locked": {
                    "type": "boolean",
                    "description": "Test if authentication via the user login is disabled. This may be because the user has been locked or the maximum authentication attempts has been exceeded\n",
                    "default": false
                },
                "failedAuthAttempts": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of sequential failed authentication attempts",
                    "minimum": 0
                },
                "failedAuthMaximum": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of failed authentication attempts allowed before authentication via the user is disabled. A value of null allows the user an unlimited number of attempts\n",
                    "minimum": 1
                },
                "successfulAuthMaximum": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of successful authentication attempts allowed within a predefined period before authentication is disabled. That period is defined globally. A value of null allows the user an unlimited number of attempts\n",
                    "minimum": 1
                },
                "lastFailedAuth": {
                    "type": "string",
                    "description": "The time of the last unsuccessful authentication attempt. The time is in RFC 2822 format - EEE, d MMM yyyy HH:mm:ss Z. Note: This property is read only property. Secure Transport server sets that property on failed user login.\n"
                },
                "passwordCredentials": {
                    "description": "The password attributes for this user.",
                    "$ref": "#/definitions/PasswordCredentials"
                },
                "secretQuestion": {
                    "description": "The user's secret question properties.",
                    "$ref": "#/definitions/SecretQuestion"
                }
            },
            "xml": {
                "name": "user"
            }
        },
        "MBFTApplication": {
            "title": "MBFTApplication",
            "allOf": [
                {
                    "$ref": "#/definitions/Application"
                },
                {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "MBFT"
                        }
                    }
                }
            ],
            "description": "A representation of a MBFT application."
        },
        "AuditedObjectTypes": {
            "title": "AuditedObjectTypes",
            "type": "object",
            "properties": {
                "auditedObjectTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "xml": {
                "name": "auditedObjectTypes"
            }
        },
        "Sessions": {
            "title": "Sessions",
            "type": "object",
            "properties": {
                "sessions": {
                    "type": "array",
                    "description": "The collection of sessions.",
                    "items": {
                        "$ref": "#/definitions/Session"
                    }
                }
            },
            "xml": {
                "name": "sessions"
            }
        },
        "PasswordCredentials": {
            "title": "PasswordCredentials",
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "username": {
                    "type": "string",
                    "description": "The name of the user (the login name)",
                    "minLength": 0,
                    "maxLength": 80,
                    "pattern": "^(([^\\+\\:\\[]*))$"
                },
                "password": {
                    "type": "string",
                    "description": "The password. If the password property is not set then the passwordDigest property must be set and vice versa\n",
                    "minLength": 1,
                    "maxLength": 2147483647
                },
                "passwordDigest": {
                    "type": "string",
                    "description": "The password digest. If the passwordDigest property is not set then the password property must be set and vice versa\n",
                    "minLength": 1,
                    "maxLength": 2147483647
                },
                "forcePasswordChange": {
                    "type": "boolean",
                    "description": "Checks if password change is forced",
                    "default": false
                },
                "lastPasswordChange": {
                    "type": "string",
                    "description": "The last password change. The time is in RFC 2822 format - EEE, d MMM yyyy HH:mm:ss Z. Note: This property is read only property. Secure Transport server sets that property on password change.\n"
                },
                "passwordExpiryInterval": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The password expiry interval. Accepts only positive integers.",
                    "minimum": 1
                }
            },
            "xml": {
                "name": "passwordCredentials"
            }
        },
        "ClusterNodeInformation": {
            "title": "ClusterNodeInformation",
            "type": "object",
            "required": [
                "descriptor"
            ],
            "properties": {
                "configurationId": {
                    "type": "string",
                    "description": "The configuration ID of the cluster node entity"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The descriptor of the cluster node entity. For Enterprise Cluster this is the same as the address. For Standard Cluster this is the URL of the Administration interface\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the cluster node entity. For Enterprise Cluster this is one of 'online' or 'offline'. For Standard Cluster - 'online', 'offline', 'Out of sync' (manual sync must be performed), 'N/A'   (local Transaction manager is not running and cannot retrieve other nodes status) and 'Tm is not running'\n",
                    "enum": [
                        "online",
                        "offline",
                        "Out of sync",
                        "N/A",
                        "Tm is not running"
                    ]
                },
                "mode": {
                    "type": "string",
                    "description": "The operation mode of the cluster node entity. For Enterprise Cluster this is always 'primary'. For Standard Cluster - 'primary', 'secondary', 'N/A' (local Transaction manager is not running and cannot retrieve other nodes status) and 'Tm is not running'\n",
                    "enum": [
                        "primary",
                        "secondary",
                        "N/A",
                        "Tm is not running"
                    ]
                },
                "address": {
                    "type": "string",
                    "description": "The addres of the cluster node entity"
                },
                "lastSync": {
                    "type": "string",
                    "description": "The last time when this node successfully received manual synchronization data. Applies for Standard cluster only\n"
                },
                "lastReportedAlive": {
                    "type": "string",
                    "description": "Last time when this node reported it's alive. Applies for Enterprise Cluster only\n"
                },
                "stVersion": {
                    "description": "The SecureTransport version for this node",
                    "$ref": "#/definitions/VersionInformation"
                },
                "localNode": {
                    "type": "boolean",
                    "description": "Indicates if this is the node that handles the current REST request",
                    "default": false
                }
            },
            "xml": {
                "name": "node"
            }
        },
        "SynchronyTransferSubscription": {
            "title": "SynchronyTransferSubscription",
            "allOf": [
                {
                    "$ref": "#/definitions/Subscription"
                },
                {
                    "type": "object",
                    "properties": {
                        "application": {
                            "type": "string"
                        },
                        "flowAttrsMergeMode": {
                            "type": "string",
                            "description": "Specify the flow merge mode. Three options are possible: 'preserve', 'overwrite', 'append'.",
                            "default": "false"
                        }
                    }
                }
            ],
            "description": "A representation of an Axway Transfer CFT subscription."
        },
        "CreateZone": {
            "title": "CreateZone",
            "type": "object",
            "required": [
                "isDefault",
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the DMZ zone. Zone name can not contain characters \"\\\", \"/\", \";\" and \"'\"\n",
                    "minLength": 0,
                    "maxLength": 255,
                    "pattern": "^([^\\/\\\\;\\']*)$"
                },
                "description": {
                    "type": "string",
                    "description": "The description of DMZ Zone",
                    "minLength": 0,
                    "maxLength": 255
                },
                "publicURLPrefix": {
                    "type": "string",
                    "description": "The public URL prefix for public access to the DMZ via HTTP(s)\n",
                    "minLength": 0,
                    "maxLength": 255
                },
                "isDnsResolutionEnabled": {
                    "type": "boolean",
                    "description": "Define whether DNS resolution on Edge is enabled or not (true if DNS resolution on Edge is enabled and false-otherwise)\n",
                    "default": false
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Define whether the DMZ zone is set to default or not",
                    "default": false
                }
            },
            "xml": {
                "name": "zone"
            }
        },
        "LocalCertificate": {
            "title": "LocalCertificate",
            "allOf": [
                {
                    "$ref": "#/definitions/Certificate"
                },
                {
                    "type": "object",
                    "required": [
                        "name"
                    ],
                    "properties": {
                        "usage": {
                            "type": "string",
                            "default": "local"
                        },
                        "name": {
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "A representation of a local certificate."
        },
        "PartnerCertificate": {
            "title": "PartnerCertificate",
            "allOf": [
                {
                    "$ref": "#/definitions/Certificate"
                },
                {
                    "type": "object",
                    "required": [
                        "account",
                        "name",
                        "password"
                    ],
                    "properties": {
                        "usage": {
                            "type": "string",
                            "default": "partner"
                        },
                        "name": {
                            "type": "string"
                        },
                        "password": {
                            "type": "string"
                        },
                        "account": {
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "A representation of a partner certificate."
        },
        "CertificateAccessLevel": {
            "title": "CertificateAccessLevel",
            "type": "object",
            "required": [
                "accessLevel"
            ],
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The certificate access level.",
                    "enum": [
                        "PRIVATE",
                        "PUBLIC",
                        "BUSINESS_UNIT"
                    ]
                }
            },
            "xml": {
                "name": "certificateAccessLevel"
            }
        },
        "Edges": {
            "title": "Edges",
            "type": "object",
            "properties": {
                "edges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Edge"
                    }
                }
            },
            "description": "The list of edges for a DMZ zone",
            "xml": {
                "name": "edges"
            }
        },
        "TransferLogMaintApplication": {
            "title": "TransferLogMaintApplication",
            "allOf": [
                {
                    "$ref": "#/definitions/Application"
                },
                {
                    "type": "object",
                    "required": [
                        "daysKeepingDataInDb",
                        "daysKeepingDataInFiles",
                        "daysKeepingInProgressInDb",
                        "recordsPerFile"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "TransferLogMaint"
                        },
                        "daysKeepingDataInDb": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Specify in days how old transfer log entries will be when they are deleted"
                        },
                        "daysKeepingInProgressInDb": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Specify in days how long to keep in-progress transfers"
                        },
                        "exportOptions": {
                            "type": "boolean",
                            "description": "Define whether to export data before deletetion. By default is false. When is set to true then the properties folder, daysKeepingDataInFiles and  recordsPerFile can be set",
                            "default": false
                        },
                        "folder": {
                            "type": "string",
                            "description": "A full directory path specifying where the export files are stored"
                        },
                        "daysKeepingDataInFiles": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The period of time in days exported files remain in the export directory before they are deleted. If this field is empty or zero, SecureTransport does not delete the files\n"
                        },
                        "recordsPerFile": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The maximum number of records in thousands that can exist in an exported file. When this value is exceeded, SecureTransport starts to export the transfer log entries in a new file.\n"
                        }
                    }
                }
            ],
            "description": "A representation of a TransferLogMaint application."
        },
        "SiteMailboxApplication": {
            "title": "SiteMailboxApplication",
            "allOf": [
                {
                    "$ref": "#/definitions/Application"
                },
                {
                    "type": "object",
                    "required": [
                        "INBOX_FOLDER",
                        "OUTBOX_FOLDER"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "SiteMailbox"
                        },
                        "OUTBOX_FOLDER": {
                            "type": "string",
                            "description": "The application outbox folder"
                        },
                        "INBOX_FOLDER": {
                            "type": "string",
                            "description": "The application inbox folder."
                        }
                    }
                }
            ],
            "description": "A representation of a SiteMailbox application."
        },
        "CollectionCount": {
            "title": "CollectionCount",
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Route entries collection size"
                }
            },
            "xml": {
                "name": "collectionCount"
            }
        },
        "AdministrativeRoles": {
            "title": "AdministrativeRoles",
            "type": "object",
            "properties": {
                "administrativeRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AdministrativeRole"
                    }
                }
            }
        },
        "Policies": {
            "title": "Policies",
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The count of login restriction policy entities on the ST server"
                },
                "policies": {
                    "type": "array",
                    "description": "The list of login restriction policy entities on the ST server.",
                    "items": {
                        "$ref": "#/definitions/Policy"
                    }
                }
            },
            "xml": {
                "name": "policies"
            }
        },
        "RouteStepExecuteRoute": {
            "title": "RouteStepExecuteRoute",
            "allOf": [
                {
                    "$ref": "#/definitions/RouteStep"
                },
                {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "ExecuteRoute"
                        }
                    }
                }
            ],
            "description": "A representation of a route step of type ExecuteRoute"
        },
        "Application": {
            "title": "Application",
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "discriminator": "type",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The application ID"
                },
                "name": {
                    "type": "string",
                    "description": "The unique application name",
                    "minLength": 0,
                    "maxLength": 80
                },
                "type": {
                    "type": "string",
                    "description": "The type of the application. Note: application types that does not support subscribing to are: 'TransferLogMaint', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'UnlicensedAccountMaint', 'PackageRetentionMaint'\n"
                },
                "notes": {
                    "type": "string",
                    "description": "An unstructured comments (description) for the application entity",
                    "minLength": 0,
                    "maxLength": 2048
                },
                "folder": {
                    "type": "string",
                    "description": "The application folder or shared folder."
                },
                "sharedFolder": {
                    "type": "string",
                    "description": "The shared folder."
                },
                "dropFolder": {
                    "type": "string",
                    "description": "The drop folder."
                },
                "businessUnits": {
                    "type": "array",
                    "description": "Names of business units that application entity belongs to.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "xml": {
                "name": "application"
            }
        },
        "RouteStepLineEnding": {
            "title": "RouteStepLineEnding",
            "allOf": [
                {
                    "$ref": "#/definitions/RouteStep"
                },
                {
                    "type": "object",
                    "required": [
                        "actionOnStepFailure",
                        "fileFilterExpression",
                        "fileFilterExpressionType",
                        "inputCharset",
                        "inputEolSequence",
                        "outputEolSequence"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "LineEnding"
                        },
                        "usePrecedingStepFiles": {
                            "type": "string",
                            "description": "If true, the route execution will continue even if the step execution fails",
                            "enum": [
                                "true",
                                "false"
                            ],
                            "default": "false"
                        },
                        "fileFilterExpression": {
                            "type": "string",
                            "description": "File name or file name expression. It is used with the file filter expression property",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "fileFilterExpressionType": {
                            "type": "string",
                            "description": "File filter expression type",
                            "enum": [
                                "GLOB",
                                "REGEXP",
                                "TEXT_FILES"
                            ]
                        },
                        "inputEolSequence": {
                            "type": "string",
                            "description": "Input EOL sequence. Example: \\r\\n\n",
                            "minLength": 0,
                            "maxLength": 32
                        },
                        "outputEolSequence": {
                            "type": "string",
                            "description": "Output EOL sequence. Example: \\r\\n\n",
                            "minLength": 0,
                            "maxLength": 32
                        },
                        "inputCharset": {
                            "type": "string",
                            "description": "Specify the source file encoding. Example: UTF-8 \n",
                            "minLength": 0,
                            "maxLength": 32
                        },
                        "outputCharset": {
                            "type": "string",
                            "description": "Specify output file encoding. If not specified, source file encoding is used",
                            "minLength": 0,
                            "maxLength": 32
                        },
                        "actionOnStepFailure": {
                            "type": "string",
                            "description": "Action on step failure. If set to PROCEED, the route execution will continue even if the step execution fails",
                            "enum": [
                                "FAIL",
                                "PROCEED"
                            ]
                        }
                    }
                }
            ],
            "description": "A representation of a route step of type LineEnding"
        },
        "Subscriptions": {
            "title": "Subscriptions",
            "type": "object",
            "properties": {
                "subscriptions": {
                    "type": "array",
                    "items": {
                        "description": "Collection of the subscriptions.",
                        "$ref": "#/definitions/Subscription"
                    }
                }
            },
            "xml": {
                "name": "subscriptions"
            }
        },
        "VersionInformation": {
            "title": "VersionInformation",
            "type": "object",
            "properties": {
                "serverType": {
                    "type": "string",
                    "description": "The type of the ST server",
                    "enum": [
                        "ST-Core-Server",
                        "ST-Edge"
                    ]
                },
                "version": {
                    "type": "string",
                    "description": "The ST version"
                },
                "build": {
                    "type": "string",
                    "description": "The ST build number"
                },
                "os": {
                    "type": "string",
                    "description": "The server operating system"
                },
                "other": {
                    "type": "array",
                    "description": "Other ST information.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "xml": {
                "name": "version"
            }
        },
        "SynchronyTransferApplication": {
            "title": "SynchronyTransferApplication",
            "allOf": [
                {
                    "$ref": "#/definitions/Application"
                },
                {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "SynchronyTransfer"
                        }
                    }
                }
            ],
            "description": "A representation of a SynchronyTransfer application."
        },
        "RouteStepCharactersReplace": {
            "title": "RouteStepCharactersReplace",
            "allOf": [
                {
                    "$ref": "#/definitions/RouteStep"
                },
                {
                    "type": "object",
                    "required": [
                        "actionOnStepFailure",
                        "fileFilterExpression",
                        "fileFilterExpressionType",
                        "findCharacterSequence",
                        "inputCharset",
                        "lineStrip",
                        "replaceCharacterSequence"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "CharactersReplace"
                        },
                        "usePrecedingStepFiles": {
                            "type": "string",
                            "description": "If true, the route execution will continue even if the step execution fails",
                            "enum": [
                                "true",
                                "false"
                            ],
                            "default": "false"
                        },
                        "fileFilterExpression": {
                            "type": "string",
                            "description": "File name or file name expression. It is used with the file filter expression property",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "fileFilterExpressionType": {
                            "type": "string",
                            "description": "File filter expression type",
                            "enum": [
                                "GLOB",
                                "REGEXP",
                                "TEXT_FILES"
                            ]
                        },
                        "findCharacterSequence": {
                            "type": "string",
                            "description": "Find character sequence, example: q123\n",
                            "minLength": 0,
                            "maxLength": 32
                        },
                        "lineStrip": {
                            "type": "string",
                            "description": "Line strip enablement. Use value \"stripEnabled\" to enable line strip. Other value will disable the line strip.",
                            "minLength": 0,
                            "maxLength": 32
                        },
                        "replaceCharacterSequence": {
                            "type": "string",
                            "description": "Specify replace character sequence. Unicode notation (\\uXXXX) can be used. Multiple replace character sequences separated with a comma (,) can be specified. Comma must be Unicode encoded (\\002c) if used in the replace sequence.\n",
                            "minLength": 0,
                            "maxLength": 32
                        },
                        "actionOnStepFailure": {
                            "type": "string",
                            "description": "Action on step failure. If set to PROCEED, the route execution will continue even if the step execution fails",
                            "enum": [
                                "FAIL",
                                "PROCEED"
                            ]
                        },
                        "inputCharset": {
                            "type": "string",
                            "description": "Specify the source file encoding. Example: UTF-8\n",
                            "minLength": 0,
                            "maxLength": 32
                        },
                        "outputCharset": {
                            "type": "string",
                            "description": "Specify output file encoding. If not specified, source file encoding is used",
                            "minLength": 0,
                            "maxLength": 32
                        }
                    }
                }
            ],
            "description": "A representation of a route step of type CharactersReplace"
        },
        "SharedFolderApplication": {
            "title": "SharedFolderApplication",
            "allOf": [
                {
                    "$ref": "#/definitions/Application"
                },
                {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "SharedFolder"
                        }
                    }
                }
            ],
            "description": "A representation of a SharedFolder application."
        },
        "Administrators": {
            "title": "Administrators",
            "type": "object",
            "properties": {
                "administrators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Administrator"
                    }
                }
            },
            "xml": {
                "name": "administrators"
            }
        },
        "LogEntry": {
            "title": "LogEntry",
            "type": "object",
            "properties": {
                "time": {
                    "type": "string",
                    "description": "The time of the log in RFC 2822 format - EEE, d MMM yyyy HH:mm:ss Z. Note: This property is read only property. \n"
                },
                "node": {
                    "type": "string",
                    "description": "The node"
                },
                "level": {
                    "type": "string",
                    "description": "The level of the log",
                    "enum": [
                        "ALL",
                        "DEBUG",
                        "ERROR",
                        "FATAL",
                        "INFO",
                        "TRACE",
                        "WARN"
                    ]
                },
                "component": {
                    "type": "string",
                    "description": "The component",
                    "enum": [
                        "TM",
                        "AS2D",
                        "SSHD",
                        "SOCKS",
                        "ADMIN",
                        "AUDIT",
                        "FTPD",
                        "HTTPD",
                        "PESITD"
                    ]
                },
                "thread": {
                    "type": "string",
                    "description": "The thread"
                },
                "filename": {
                    "type": "string",
                    "description": "The filename"
                },
                "className": {
                    "type": "string",
                    "description": "The class name"
                },
                "method": {
                    "type": "string",
                    "description": "The method"
                },
                "line": {
                    "type": "string",
                    "description": "The line"
                },
                "message": {
                    "type": "string",
                    "description": "The log message"
                },
                "exception": {
                    "type": "string",
                    "description": "The exception."
                }
            },
            "xml": {
                "name": "logEntry"
            }
        },
        "ConnectDirectSite": {
            "title": "ConnectDirectSite",
            "allOf": [
                {
                    "$ref": "#/definitions/Site"
                },
                {
                    "type": "object",
                    "required": [
                        "localServerName",
                        "localServerPort",
                        "recScript",
                        "sendScript"
                    ],
                    "properties": {
                        "protocol": {
                            "type": "string",
                            "default": "cd"
                        },
                        "transfer.mode": {
                            "type": "string",
                            "description": "Specify the transfer mode. It can be A (Ascii), I (Binary). When it is not define the transfer mode is Auto detected.",
                            "default": ""
                        },
                        "localServerName": {
                            "type": "string",
                            "description": "Specify the local server name.",
                            "default": ""
                        },
                        "localServerPort": {
                            "type": "string",
                            "description": "Specify the local server port.",
                            "default": ""
                        },
                        "username": {
                            "type": "string",
                            "description": "Specify the site login username.",
                            "default": ""
                        },
                        "usePassword": {
                            "type": "string",
                            "description": "Specify if the login password should be set. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "usePasswordExpr": {
                            "type": "string",
                            "description": "Specify whether to have password expressions or not. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "password": {
                            "type": "string",
                            "description": "Specify the site login password encrypted in 'AES128'. This property should be set if 'usePassword' is 'true'.",
                            "default": ""
                        },
                        "sendScript": {
                            "type": "string",
                            "description": "Specify the send script.",
                            "default": ""
                        },
                        "recScript": {
                            "type": "string",
                            "description": "Specify the receive script.",
                            "default": ""
                        }
                    }
                }
            ],
            "description": "A representation of an Connect:Direct site."
        },
        "Users": {
            "title": "Users",
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "xml": {
                        "name": "user"
                    },
                    "items": {
                        "$ref": "#/definitions/User"
                    }
                }
            },
            "xml": {
                "name": "users"
            }
        },
        "CreateZones": {
            "title": "CreateZones",
            "type": "object",
            "properties": {
                "zone": {
                    "type": "array",
                    "description": "The list of DMZ zones",
                    "items": {
                        "$ref": "#/definitions/CreateZone"
                    }
                }
            },
            "xml": {
                "name": "zones"
            }
        },
        "AuditLogEntries": {
            "title": "AuditLogEntries",
            "type": "object",
            "properties": {
                "auditLogEntries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuditLogEntry"
                    }
                }
            },
            "xml": {
                "name": "auditLogEntries"
            }
        },
        "AdministratorRequest": {
            "title": "AdministratorRequest",
            "type": "object",
            "required": [
                "localAuthentication",
                "roleName"
            ],
            "properties": {
                "loginName": {
                    "type": "string",
                    "description": "The name of the administrator. Required on POST request, ignored on PUT request."
                },
                "roleName": {
                    "type": "string",
                    "description": "The role name of the administrator."
                },
                "localAuthentication": {
                    "type": "boolean",
                    "description": "Clarifies whether the administator is being authenticated by ST or external service."
                },
                "password": {
                    "type": "string",
                    "description": "Specifies the password used by the administrator for authentication. This field is ignored if localAuthentication is set to false. Otherwise it is required on POST request and optional on PUT request."
                },
                "certificateDN": {
                    "type": "string",
                    "description": "Specifies the DN of the certificate used by the administrator for authentication. This field is ignored if localAuthentication is set to false.",
                    "default": ""
                },
                "passwordExpired": {
                    "type": "boolean",
                    "description": "Clarifies whether the administator's password is expired.",
                    "default": false
                },
                "dualAuthentication": {
                    "type": "boolean",
                    "description": "Clarifies whether the administator is being authenticated with password and certificate or with password only.",
                    "default": false
                },
                "locked": {
                    "type": "boolean",
                    "description": "Clarifies whether the administator is enabled/active.",
                    "default": false
                },
                "parent": {
                    "type": "string",
                    "description": "Specifies the parent administrator of this administrator in an administrator hierarchy. Required if the administrative role is of type LIMITED. Otherwise it is ignored."
                },
                "canReadOnly": {
                    "type": "boolean",
                    "description": "Defines if the administrator is read only. If set, all other permissions must not be set.",
                    "default": false
                },
                "isMaker": {
                    "type": "boolean",
                    "description": "Defines if the administrator has Maker rights. If set, canCreateUsers and canUpdateUsers also have to be set.",
                    "default": false
                },
                "isChecker": {
                    "type": "boolean",
                    "description": "Defines if the administrator has Checker rights. If set, canUpdateUsers also has to be set; no other permissions should be set.",
                    "default": false
                },
                "canCreateUsers": {
                    "type": "boolean",
                    "description": "Defines if the administrator can create users",
                    "default": false
                },
                "canUpdateUsers": {
                    "type": "boolean",
                    "description": "Defines if the administrator can update users",
                    "default": false
                },
                "canAccessHelpDesk": {
                    "type": "boolean",
                    "description": "Defines if the administrator can access help desk",
                    "default": false
                },
                "canSeeFullAuditLog": {
                    "type": "boolean",
                    "description": "Defines if the administrator can access the Audit Log",
                    "default": false
                },
                "canManageAdministrators": {
                    "type": "boolean",
                    "description": "Defines if the administrator can manage administrators",
                    "default": false
                },
                "canManageApplications": {
                    "type": "boolean",
                    "description": "Defines if the administrator can manage applications",
                    "default": false
                },
                "canManageSharedFolders": {
                    "type": "boolean",
                    "description": "Defines if the administrator can manage shared folders. If set, canManageApplications also has to be set.",
                    "default": false
                },
                "canManageBusinessUnits": {
                    "type": "boolean",
                    "description": "Defines if the administrator can manage business units",
                    "default": false
                },
                "canManageRouteTemplates": {
                    "type": "boolean",
                    "description": "Defines if the administrator can manage route templates",
                    "default": false
                },
                "canManageExternalScriptStep": {
                    "type": "boolean",
                    "description": "Defines if the administrator can manage the external script step. If set, canManageRouteTemplates also has to be set.",
                    "default": false
                },
                "canManageLoginRestrictionPolicies": {
                    "type": "boolean",
                    "description": "Defines if the administrator can manage the login restriction policies.",
                    "default": false
                },
                "canManageIcapSettings": {
                    "type": "boolean",
                    "description": "Defines if the administrator can manage the ICAP server settings.",
                    "default": false
                }
            },
            "xml": {
                "name": "administrator"
            }
        },
        "AdministrativeRoleMembers": {
            "title": "AdministrativeRoleMembers",
            "type": "object",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "AdministrativeRole": {
            "title": "AdministrativeRole",
            "type": "object",
            "properties": {
                "roleName": {
                    "type": "string",
                    "description": "Name of the administrative role."
                },
                "roleType": {
                    "type": "string",
                    "description": "Type of the administrative role."
                },
                "isBounceAllowed": {
                    "type": "boolean",
                    "description": "Is bounce function allowed for administrative role."
                }
            }
        },
        "UserClassGET": {
            "title": "UserClassGET",
            "allOf": [
                {
                    "$ref": "#/definitions/UserClassBodyData"
                },
                {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string",
                            "description": "The id of the user class."
                        }
                    }
                }
            ]
        },
        "RouteStepPublish": {
            "title": "RouteStepPublish",
            "allOf": [
                {
                    "$ref": "#/definitions/RouteStep"
                },
                {
                    "type": "object",
                    "required": [
                        "actionOnStepFailure",
                        "fileFilterExpression",
                        "fileFilterExpressionType",
                        "filenameCollisionResolutionType",
                        "targetAccountExpression",
                        "targetAccountExpressionType",
                        "targetFolderExpressionType"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "Publish"
                        },
                        "usePrecedingStepFiles": {
                            "type": "string",
                            "description": "If true, the route execution will continue even if the step execution fails",
                            "enum": [
                                "true",
                                "false"
                            ],
                            "default": "false"
                        },
                        "fileFilterExpression": {
                            "type": "string",
                            "description": "File name or file name expression. It is used with the file filter expression property",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "fileFilterExpressionType": {
                            "type": "string",
                            "description": "File filter expression type",
                            "enum": [
                                "GLOB",
                                "REGEXP",
                                "TEXT_FILES"
                            ]
                        },
                        "actionOnStepFailure": {
                            "type": "string",
                            "description": "Action on step failure. If set to PROCEED, the route execution will continue even if the step execution fails\n",
                            "enum": [
                                "FAIL",
                                "PROCEED"
                            ]
                        },
                        "filenameCollisionResolutionType": {
                            "type": "string",
                            "description": "File name collision resolution type",
                            "enum": [
                                "APPEND",
                                "OVERWRITE",
                                "FAIL",
                                "RENAME_OLD",
                                "RENAME_NEW"
                            ]
                        },
                        "targetAccountExpression": {
                            "type": "string",
                            "description": "Target account name or expression",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "targetAccountExpressionType": {
                            "type": "string",
                            "description": "Target account name or expression will be used",
                            "enum": [
                                "NAME",
                                "EXPRESSION"
                            ]
                        },
                        "targetFolderExpression": {
                            "type": "string",
                            "description": "Folder in the account to publish the file to. Not existing folder will be automatically created. You can specify either a folder name or use an EL expression to determine the folder based on the environment information\n",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "targetFolderExpressionType": {
                            "type": "string",
                            "description": "Target folder simple name or expression will be used",
                            "enum": [
                                "SIMPLE",
                                "EXPRESSION"
                            ]
                        },
                        "publishFileAs": {
                            "type": "string",
                            "description": "New file name or expression for a new file name",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "triggerSubscription": {
                            "type": "boolean",
                            "description": "When 'true', file published to a subscription folder triggers the subscription folder. Set to 'false' if you do not want any actions to be triggered as part of the publish operations (e.g. when publishing to the same subscription the file was picked up from)\n"
                        },
                        "postRoutingActionType": {
                            "type": "string",
                            "description": "Post routing action types",
                            "enum": [
                                "NONE",
                                "DELETE",
                                "RENAME"
                            ],
                            "default": "NONE"
                        }
                    }
                }
            ],
            "description": "A representation of a route step of type Publish"
        },
        "UserClasses": {
            "title": "UserClasses",
            "type": "object",
            "properties": {
                "userClasses": {
                    "type": "array",
                    "description": "List of user classes",
                    "items": {
                        "$ref": "#/definitions/UserClassGET"
                    }
                }
            },
            "xml": {
                "name": "userClasses"
            }
        },
        "AuditLogMaintApplication": {
            "title": "AuditLogMaintApplication",
            "allOf": [
                {
                    "$ref": "#/definitions/Application"
                },
                {
                    "type": "object",
                    "required": [
                        "dayMode",
                        "timeKeepingDataInDb"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "AuditLogMaint"
                        },
                        "timeKeepingDataInDb": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Specify in days or months (depending on 'dayMode' property) how old transfer log entries will be when they are deleted\n"
                        },
                        "dayMode": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The day mode. Set value 0 for months or 1 for days."
                        },
                        "exportOption": {
                            "type": "boolean",
                            "description": "Define whether to export the deleted audit log entries to a file before they are deleted. If true then exportDir property is required to be set.\n",
                            "default": false
                        },
                        "exportDir": {
                            "type": "string",
                            "description": "A full directory path specifying where the export files are stored."
                        }
                    }
                }
            ],
            "description": "A representation of an AuditLogMaint application."
        },
        "RouteSteps": {
            "title": "RouteSteps",
            "type": "object",
            "properties": {
                "steps": {
                    "type": "array",
                    "description": "Steps collection.",
                    "items": {
                        "$ref": "#/definitions/RouteStep"
                    }
                }
            }
        },
        "Zone": {
            "title": "Zone",
            "type": "object",
            "required": [
                "isDefault",
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the DMZ zone. Zone name can not contain characters \"\\\", \"/\", \";\" and \"'\"\n",
                    "minLength": 0,
                    "maxLength": 255,
                    "pattern": "^([^\\/\\\\;\\']*)$"
                },
                "description": {
                    "type": "string",
                    "description": "The description of DMZ Zone",
                    "minLength": 0,
                    "maxLength": 255
                },
                "publicURLPrefix": {
                    "type": "string",
                    "description": "The public URL prefix for public access to the DMZ via HTTP(s)\n",
                    "minLength": 0,
                    "maxLength": 255
                },
                "ssoSpEntityId": {
                    "type": "string",
                    "description": "The SSO Service Provider EntityId to identify to an Identity Provider\n",
                    "minLength": 0,
                    "maxLength": 255
                },
                "isDnsResolutionEnabled": {
                    "type": "boolean",
                    "description": "Define whether DNS resolution on Edge is enabled or not (true if DNS resolution on Edge is enabled and false-otherwise)\n",
                    "default": false
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Define whether the DMZ zone is set to default or not",
                    "default": false
                },
                "edges": {
                    "description": "The edges for the DMZ Zone.",
                    "$ref": "#/definitions/Edges"
                }
            },
            "xml": {
                "name": "zone"
            }
        },
        "SecretQuestion": {
            "title": "SecretQuestion",
            "type": "object",
            "properties": {
                "secretQuestion": {
                    "type": "string",
                    "description": "The secret question text."
                },
                "secretAnswerGuessFailures": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Failed attempts for guessing the secret answer."
                },
                "forceSecretQuestionChange": {
                    "type": "boolean",
                    "description": "Flag indicating if user is forced to set its secret question.",
                    "default": false
                }
            },
            "xml": {
                "name": "secretQuestion"
            }
        },
        "FailoverStatus": {
            "title": "FailoverStatus",
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "description": "Failover status.",
                    "enum": [
                        "OK",
                        "STARTED",
                        "RUNNING",
                        "FAILED",
                        "SUCCESS"
                    ]
                },
                "message": {
                    "type": "string",
                    "description": "A message that gives detailed information about failover status."
                }
            },
            "xml": {
                "name": "operationStatus"
            }
        },
        "SMBSite": {
            "title": "SMBSite",
            "allOf": [
                {
                    "$ref": "#/definitions/Site"
                },
                {
                    "type": "object",
                    "required": [
                        "smbHost",
                        "smbUserName"
                    ],
                    "properties": {
                        "protocol": {
                            "type": "string",
                            "default": "smb"
                        },
                        "smbHost": {
                            "type": "string",
                            "description": "Specify the name/host/address:port of remote server."
                        },
                        "smbDfs": {
                            "type": "boolean",
                            "description": "Specify if domain based DFS refferals should be disabled.",
                            "default": false
                        },
                        "smbDownloadExpression": {
                            "type": "boolean",
                            "description": "Specify if download folder can contain expressions.",
                            "default": false
                        },
                        "smbDownloadFolder": {
                            "type": "string",
                            "description": "Specify the remote folder to pull from."
                        },
                        "smbPatternExpression": {
                            "type": "boolean",
                            "description": "Specify if download pattern can contain expressions.",
                            "default": false
                        },
                        "smbDownloadPattern": {
                            "type": "string",
                            "description": "Specify the download pattern."
                        },
                        "smbPta": {
                            "type": "boolean",
                            "description": "Specify the if post trasformation action should be enabled.",
                            "default": false
                        },
                        "smbReceiveFileAs": {
                            "type": "string",
                            "description": "Post transformation action for download transfer to receive the file with a different name."
                        },
                        "smbUploadExpression": {
                            "type": "boolean",
                            "description": "Specify if upload folder can contain expressions.",
                            "default": false
                        },
                        "smbUploadFolder": {
                            "type": "string",
                            "description": "Specify remote folder to upload files to."
                        },
                        "smbUserName": {
                            "type": "string",
                            "description": "Defines remote server login name."
                        },
                        "smbPassword": {
                            "type": "string",
                            "description": "Defines remote server password."
                        }
                    }
                }
            ],
            "description": "A representation of an SMB site."
        },
        "RouteStepCompress": {
            "title": "RouteStepCompress",
            "allOf": [
                {
                    "$ref": "#/definitions/RouteStep"
                },
                {
                    "type": "object",
                    "required": [
                        "actionOnStepFailure",
                        "compressionLevel",
                        "fileFilterExpression",
                        "fileFilterExpressionType"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "Compress"
                        },
                        "usePrecedingStepFiles": {
                            "type": "string",
                            "description": "If true, the route execution will continue even if the step execution fails",
                            "enum": [
                                "true",
                                "false"
                            ],
                            "default": "false"
                        },
                        "fileFilterExpression": {
                            "type": "string",
                            "description": "File name or file name expression. It is used with the file filter expression property",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "fileFilterExpressionType": {
                            "type": "string",
                            "description": "File filter expression type",
                            "enum": [
                                "GLOB",
                                "REGEXP"
                            ]
                        },
                        "actionOnStepFailure": {
                            "type": "string",
                            "description": "Action on step failure. If set to PROCEED, the route execution will continue even if the step execution fails",
                            "enum": [
                                "FAIL",
                                "PROCEED"
                            ]
                        },
                        "singleArchiveEnabled": {
                            "type": "string",
                            "description": "Enable single file archiving",
                            "enum": [
                                "true",
                                "false"
                            ],
                            "default": "false"
                        },
                        "compressionType": {
                            "type": "string",
                            "description": "Compression level",
                            "enum": [
                                "ZIP",
                                "TAR",
                                "JAR",
                                "GZIP"
                            ]
                        },
                        "zipPassword": {
                            "type": "string",
                            "description": "Zip file password. Used with compression type ZIP only",
                            "minLength": 0,
                            "maxLength": 32
                        },
                        "compressionLevel": {
                            "type": "string",
                            "description": "Compression level",
                            "enum": [
                                "STOREZIP, TAR, JAR, GZIP",
                                "FASTEST",
                                "FAST",
                                "NORMAL",
                                "BEST",
                                "GOOD",
                                "BETTER"
                            ]
                        },
                        "singleArchiveName": {
                            "type": "string",
                            "description": "Archive name or expression. Not used with compression type GZIP. Example: archive-${timestamp}.zip\n",
                            "minLength": 0,
                            "maxLength": 64
                        }
                    }
                }
            ],
            "description": "A representation of a route step of type Compress"
        },
        "UserAccount": {
            "title": "UserAccount",
            "allOf": [
                {
                    "$ref": "#/definitions/Account"
                },
                {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "user"
                        }
                    }
                }
            ],
            "description": "A representation of an user account."
        },
        "SystemToHumanSite": {
            "title": "SystemToHumanSite",
            "allOf": [
                {
                    "$ref": "#/definitions/Site"
                },
                {
                    "type": "object",
                    "required": [
                        "to.email.addresses"
                    ],
                    "properties": {
                        "protocol": {
                            "type": "string",
                            "default": "adhoc"
                        },
                        "security.level": {
                            "type": "string",
                            "description": "Specify the delivery method of the site. It can be 'ANONYMOUS_LINK', 'CHALLENGED_LINK', 'EXISTING_ACCOUNT', 'ENROLL_UNLICENSED', 'ENROLL_LICENSED'.",
                            "default": ""
                        },
                        "challenge": {
                            "type": "string",
                            "description": "Specify secret question. This property should be defined only when 'security.level' is 'CHALLENGED_LINK'",
                            "default": ""
                        },
                        "response": {
                            "type": "string",
                            "description": "Specify the answer to the secret question. This property should be defined only when 'security.level' is 'CHALLENGED_LINK'",
                            "default": ""
                        },
                        "confirm.response": {
                            "type": "string",
                            "description": "Confirm the answer to the secret question. This property should be defined only when 'security.level' is 'CHALLENGED_LINK'",
                            "default": ""
                        },
                        "notification.template": {
                            "type": "string",
                            "description": "Specify the notification mail template of the site.",
                            "default": ""
                        },
                        "expiration": {
                            "type": "string",
                            "description": "Specify the site expiration interval in minutes. It can be 1440 (1 day), 10080 (7 days), 43200 (30 days), 86400 (60 days), 'Never'.",
                            "default": ""
                        },
                        "to.email.addresses": {
                            "type": "string",
                            "description": "Specify the TO email addresses. Separate email addresses by semicolon (;).",
                            "default": ""
                        },
                        "cc.email.addresses": {
                            "type": "string",
                            "description": "Specify the CC email addresses. Separate email addresses by semicolon (;).",
                            "default": ""
                        },
                        "bcc.email.addresses": {
                            "type": "string",
                            "description": "Specify the BCC email addresses. Separate email addresses by semicolon (;).",
                            "default": ""
                        },
                        "subject": {
                            "type": "string",
                            "description": "Specify the email subject.",
                            "default": ""
                        },
                        "body": {
                            "type": "string",
                            "description": "Specify the message to be sent.",
                            "default": ""
                        },
                        "pta.OUT.do.as": {
                            "type": "string",
                            "description": "Specify a value to send the file with a different name. An expression language can be used to specify a file name e.g. ${stenv['target']}_${random()}."
                        }
                    }
                }
            ],
            "description": "A representation of an System to Human site."
        },
        "AddressBookContacts": {
            "title": "AddressBookContacts",
            "type": "object",
            "properties": {
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AddressBookContact"
                    }
                }
            },
            "xml": {
                "name": "addressBookContacts"
            }
        },
        "HumanSystemSubscription": {
            "title": "HumanSystemSubscription",
            "allOf": [
                {
                    "$ref": "#/definitions/Subscription"
                },
                {
                    "type": "object",
                    "properties": {
                        "application": {
                            "type": "string"
                        },
                        "flowAttrsMergeMode": {
                            "type": "string",
                            "description": "Specify the flow merge mode. Three options are possible: 'preserve', 'overwrite', 'append'.",
                            "default": "false"
                        }
                    }
                }
            ],
            "description": "A representation of an Human To System subscription."
        },
        "Policy": {
            "title": "Policy",
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the login restriction policy. The name can not contain characters \"/\", \";\" and \"'\"\n",
                    "pattern": "^(([^\\/\\;\\']*))$"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the login restriction policy",
                    "enum": [
                        "ALLOW_THEN_DENY",
                        "DENY_THEN_ALLOW"
                    ],
                    "default": "ALLOW_THEN_DENY"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the login restriction policy"
                },
                "businessUnits": {
                    "type": "array",
                    "description": "Names of business units that are assigned to the login restriction policy to",
                    "items": {
                        "type": "string"
                    }
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Define whether the policy is the default one for the ST server",
                    "default": false
                }
            },
            "xml": {
                "name": "policy"
            }
        },
        "Account": {
            "title": "Account",
            "type": "object",
            "required": [
                "gid",
                "name",
                "type"
            ],
            "discriminator": "type",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The account name",
                    "minLength": 0,
                    "maxLength": 80,
                    "pattern": "^(([^\\/\\;\\']*))$"
                },
                "homeFolder": {
                    "type": "string",
                    "description": "The home folder on the local system used for this account. The folder path name must be a valid absolute directory name\n",
                    "minLength": 0,
                    "maxLength": 255
                },
                "homeFolderAccessLevel": {
                    "type": "string",
                    "description": "The home folder access level",
                    "enum": [
                        "PRIVATE",
                        "PUBLIC",
                        "BUSINESS_UNIT"
                    ]
                },
                "uid": {
                    "type": "string",
                    "description": "The numeric user ID of the account. Required for SecureTransport installation running on UNIX environment."
                },
                "gid": {
                    "type": "string",
                    "description": "The numeric group ID of the account"
                },
                "mappedUser": {
                    "type": "string",
                    "description": "The name of the real user mapped to this account for SecureTransport installation running on Windows environment."
                },
                "disabled": {
                    "type": "boolean",
                    "description": "This property defines if this account is disabled. If the account is disabled: 1) Subscriptions for the account will not trigger. ; 2) Users associated with the account will not be able to login and perform any transfers\n",
                    "default": false
                },
                "skin": {
                    "type": "string",
                    "description": "The skin templates",
                    "enum": [
                        "Default HTML Template",
                        "Axway Jelly Ball 9",
                        "SecureTransport Legacy Client",
                        "Axway Box and Stripe in Blue",
                        "SecureTransport Web Access Plus"
                    ]
                },
                "notes": {
                    "type": "string",
                    "description": "An unstructured comments to the account",
                    "minLength": 0,
                    "maxLength": 2048
                },
                "type": {
                    "type": "string",
                    "description": "The account type. Type 'user' means user account; type 'service' means service account; type 'template' means account template\n"
                },
                "unlicensed": {
                    "type": "boolean",
                    "description": "This property defines if the account is an unlicensed account",
                    "default": false
                },
                "authByEmail": {
                    "type": "boolean",
                    "description": "This property defines if authentication by email address is allowed for this account",
                    "default": false
                },
                "businessUnit": {
                    "type": "string",
                    "description": "The business unit that account belongs to"
                },
                "loginRestrictionPolicy": {
                    "type": "string",
                    "description": "The login restriction policy for this account"
                },
                "contact": {
                    "description": "The address book contact which is associated tith an account entity. Reffer to the 'AccountContact' definition\n",
                    "$ref": "#/definitions/AccountContact"
                },
                "deliveryMethod": {
                    "type": "string",
                    "description": "This property defines the delivery method. When deliveryMethod is set to 'Disabled' then Adhoc is disabled and enrollmentType/implicitEnrollmentType can not be set. When deliveryMethod is set to 'Default' then it is only available on BU and Account (setting the BU to use the value and account to use the BU value). When deliveryMethod is set to 'Anonymous' then implicit enrollment types 'Anonymous' and \"\" (empty string for Select by sender) are enabled. When deliveryMethod is set to 'Account Without Enrollment' then implicit enrollment types 'Anonymous', \"\"  (empty string for Select by sender) and 'Existing Account' are enabled. When deliveryMethod is set to 'Account With Enrollment' then implicit enrollment types 'Anonymous', \"\" (empty string for Select by sender), 'Enroll unlicensed', 'Enroll licensed' are enabled          \n",
                    "enum": [
                        "Disabled",
                        "Default",
                        "Anonymous",
                        "Account Without Enrollment",
                        "Account With Enrollment",
                        "Custom"
                    ]
                },
                "enrollmentTypes": {
                    "type": "array",
                    "description": "This property is used for a custom delivery method and can be set only if deliveryMethod property is set to 'Custom'\n",
                    "items": {
                        "type": "string"
                    }
                },
                "implicitEnrollmentType": {
                    "type": "string",
                    "description": "The Implicit Enrollment Type value controls which option Web Access Plus selects initially in the User Access window and which enrollment type is used by the Axway Email Plug-ins. The choices depend on the enrollment types enabled by the Delivery Methods and Enrollment Types fields\n",
                    "enum": [
                        "",
                        "Anonymous",
                        "Existing Account",
                        "Enroll Unlicensed",
                        "Enroll Licensed"
                    ]
                },
                "isUnlicensedUserAllowedToReply": {
                    "type": "boolean",
                    "description": "This property defines if the unlicensed user may reply to packages",
                    "default": false
                },
                "wapAppletEnabled": {
                    "type": "boolean",
                    "description": "This property defines if Java WAP applet enabled or not for this account. This property is deprecated.",
                    "default": false
                }
            },
            "xml": {
                "name": "account"
            }
        },
        "Accounts": {
            "title": "Accounts",
            "type": "object",
            "properties": {
                "accounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Account"
                    }
                }
            },
            "xml": {
                "name": "accounts"
            }
        },
        "AddressBookSources": {
            "title": "AddressBookSources",
            "type": "object",
            "properties": {
                "addressBookSources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AddressBookSource"
                    }
                }
            }
        },
        "AdministrativeRoleMenus": {
            "title": "AdministrativeRoleMenus",
            "type": "object",
            "properties": {
                "menus": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "DataTransformation": {
            "title": "DataTransformation",
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the data transformation"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the data transformation."
                }
            },
            "xml": {
                "name": "dataTransformation"
            }
        },
        "Certificate": {
            "title": "Certificate",
            "type": "object",
            "required": [
                "caPassword",
                "keySize",
                "subject",
                "type",
                "usage",
                "validityPeriod"
            ],
            "discriminator": "usage",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the certificate entity"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the certificate.",
                    "maxLength": 80
                },
                "subject": {
                    "type": "string",
                    "description": "The the certificate subject DN (distinguished name) in RFC2253 format. Example: 'CN=test,OU=Axway_TT,O=Axway,L=Sofia,ST=Sofia,C=Bulgaria'\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the certificate entity as string",
                    "enum": [
                        "x509",
                        "pgp",
                        "ssh"
                    ]
                },
                "usage": {
                    "type": "string",
                    "description": "The usage of the certificate entity as string"
                },
                "expirationTime": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The certificate expiration time in Unix Timestamp format. This is a read only property and it is automatically calculated depending on the 'validityPeriod' property\n"
                },
                "creationTime": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The creation time of the certificate entity in Unix Timestamp format"
                },
                "signAlgorithm": {
                    "type": "string",
                    "description": "The certificate signature algorithm as string",
                    "enum": [
                        "SHA1withRSA",
                        "SHA256withRSA",
                        "SHA384withRSA",
                        "SHA512withRSA"
                    ],
                    "default": "SHA256withRSA"
                },
                "keySize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The size of the key. The default CA key size is 2048",
                    "minimum": 512,
                    "maximum": 4096,
                    "default": 1024
                },
                "keyAlgorithm": {
                    "type": "string",
                    "description": "The name of the algorithm for generated key. Only for certificate entities of type 'pgp' this property can be set (for certificate entities of type 'x509' this property is automatically being set to 'RSA' when generate a 'x509' certificate\n",
                    "enum": [
                        "RSA",
                        "DSA/ElGamal"
                    ]
                },
                "issuer": {
                    "type": "string",
                    "description": "The issuer of the certificate. This is a auto generating read only property"
                },
                "serialNumber": {
                    "type": "string",
                    "description": "The serial number. This is a auto generating read only property"
                },
                "validityPeriod": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The certificate validity in days",
                    "minimum": 1,
                    "maximum": 100000
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The certificate fingerprint. This is a auto generating read only property"
                },
                "account": {
                    "type": "string",
                    "description": "The account, the certificate owner"
                },
                "accessLevel": {
                    "type": "string",
                    "description": "The access level to this certificate for other accounts",
                    "enum": [
                        "PRIVATE",
                        "PUBLIC",
                        "BUSINESS_UNIT"
                    ]
                },
                "overwrite": {
                    "type": "boolean",
                    "description": "Define whether to overwrite the certificate if a certificate with the same name, type and usage already exists\n",
                    "default": false
                },
                "caPassword": {
                    "type": "string",
                    "description": "The password of the CA for the certificate generation"
                },
                "exportPrivateKey": {
                    "type": "boolean",
                    "description": "Define whether to export the private key or not",
                    "default": false
                },
                "exportSSHPublicKey": {
                    "type": "boolean",
                    "description": "Define whether to export the SSH public key or not",
                    "default": false
                },
                "password": {
                    "type": "string",
                    "description": "The private key password"
                },
                "validationStatus": {
                    "type": "string",
                    "description": "The certificate validation status"
                },
                "version": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The certificate version"
                }
            },
            "xml": {
                "name": "certificate"
            }
        },
        "RouteStepSendToPartner": {
            "title": "RouteStepSendToPartner",
            "allOf": [
                {
                    "$ref": "#/definitions/RouteStep"
                },
                {
                    "type": "object",
                    "required": [
                        "actionOnStepFailure",
                        "archivePolicyOnFailure",
                        "archivePolicyOnSuccess",
                        "maxNumberOfRetries",
                        "maxParallelClients",
                        "sleepBetweenRetries",
                        "sleepIncrementBetweenRetries",
                        "targetAccountExpression",
                        "targetAccountExpressionType",
                        "transferProfileExpression",
                        "transferSiteExpression",
                        "transferSiteExpressionType"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "SendToPartner"
                        },
                        "usePrecedingStepFiles": {
                            "type": "string",
                            "description": "If true, the route execution will continue even if the step execution fails",
                            "enum": [
                                "true",
                                "false"
                            ],
                            "default": "false"
                        },
                        "fileFilterExpression": {
                            "type": "string",
                            "description": "File name or file name expression. It is used with the file filter expression property",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "fileFilterExpressionType": {
                            "type": "string",
                            "description": "File filter expression type",
                            "enum": [
                                "GLOB",
                                "REGEXP",
                                "TEXT_FILES"
                            ]
                        },
                        "targetAccountExpression": {
                            "type": "string",
                            "description": "Target account name or expression",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "targetAccountExpressionType": {
                            "type": "string",
                            "description": "Account name or expression type",
                            "enum": [
                                "NAME",
                                "EXPRESSION"
                            ]
                        },
                        "transferSiteExpression": {
                            "type": "array",
                            "description": "Site names array or expression",
                            "items": {
                                "type": "string"
                            }
                        },
                        "transferSiteExpressionType": {
                            "type": "string",
                            "description": "Site names or expression for it will be used",
                            "enum": [
                                "LIST",
                                "EXPRESSION_WILDCARD"
                            ]
                        },
                        "uploadFolder": {
                            "type": "string",
                            "description": "You can specify an upload folder that will overwrite the one configured in the transfer site settings (if allowed in the transfer site). Expression language can be used to specify the new upload folder",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "actionOnStepFailure": {
                            "type": "string",
                            "description": "Action on step failure. If set to PROCEED, the route execution will continue even if the step execution fails",
                            "enum": [
                                "FAIL",
                                "PROCEED"
                            ]
                        },
                        "transferProfileExpression": {
                            "type": "string",
                            "description": "Transfer profile property is used only if the transfer site is of type PeSIT. Otherwise it will be ignored. When the transfer profile is specified by using Expression Language there are 3 possible cases: (1) EL expression does not match any account transfer profiles - the default transfer profile is used then. (2) EL expression matches more than one transfer profile - the default transfer profile is used. (3) EL expression matches exactly one transfer profile - the matched transfer profile is used.\n",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "transferProfileExpressionType": {
                            "type": "string",
                            "description": "Profile name or expression",
                            "enum": [
                                "NAME",
                                "EXPRESSION"
                            ]
                        },
                        "storeAndForwardMode": {
                            "type": "string",
                            "description": "Advanced PeSIT Setting. All the advanced PeSIT settings are included or all are ommitted. \"Preserve\" Store and Forward mode will preserve the current Store and Forward transfer (if any). \"Start new\" will initiate a new Store and Forward transfer and the current transfer (if any) will be acknowledged.\n",
                            "enum": [
                                "START_NEW",
                                "PRESERVE"
                            ]
                        },
                        "virtualFilename": {
                            "type": "string",
                            "description": "Advanced PeSIT Setting. Use this field to override the virtual file name (PI12) predefined in the transfer profile. To preserve it use ${pesit.pi.fileName}. This configuration parameter corresponds to the idf parameter in Axway Transfer CFT.\n",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "dataEncoding": {
                            "type": "string",
                            "description": "Advanced PeSIT Setting. Data encoding.",
                            "enum": [
                                "BINARY",
                                "BCDIC",
                                "EBCDIC_NATIVE"
                            ]
                        },
                        "recordFormat": {
                            "type": "string",
                            "description": "Advanced PeSIT Setting. \"Variable\", \"Fixed\". Use this field to override the record format (PI31) predefined in the transfer profile. To preserve it use ${pesit.pi.recordFormat}. This configuration parameter corresponds to the frecfm parameter in Axway Transfer CFT.\n",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "recordLength": {
                            "type": "integer",
                            "description": "Use this field to override the record length (PI32) predefined in the transfer profile. To preserve it use ${pesit.pi.recordLength}. This configuration parameter corresponds to the frecl parameter in Axway Transfer CFT.\n"
                        },
                        "fileLabel": {
                            "type": "string",
                            "description": "Advanced PeSIT Setting. Use this field to override the file label (PI37) predefined in the transfer profile. To preserve it use ${pesit.pi.fileLabel}. This configuration parameter corresponds to the nfname parameter in Axway Transfer CFT.\n",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "finalDestination": {
                            "type": "string",
                            "description": "Advanced PeSIT Setting. Use this field to override the final destination (PI62) of the transfer. To preserve the original value use ${pesit.pi.finalDestinationID}. To make a Store and Forward PeSIT transfer specify the final destination and choose the intermediate partner (ipart parameter in Axway Transfer CFT) in the transfer site list.\n",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "userMessage": {
                            "type": "string",
                            "description": "Advanced PeSIT Setting. The Last PeSIT specific setting. Use this field to override the user message (PI99) predefined in the PeSIT transfer site. To preserve use ${pesit.pi.serviceParam}. This configuration parameter corresponds to the parm parameter in Axway Transfer CFT.\n",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "triggerFileName": {
                            "type": "string",
                            "description": "Name of the trigger file to be sent to the transfer site after successful routing of file(s). EL expressions are supported",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "triggerTargetAccountExpression": {
                            "type": "string",
                            "description": "An account name, login name or use an expression to determine the recipient based on the environment information",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "routeFileAs": {
                            "type": "string",
                            "description": "Name or expression like ${basename(currentfulltarget)}.sent or ${basename(transfer.target)}.?.${timestamp}?${extension(transfer.target)}\n",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "triggerFileContent": {
                            "type": "array",
                            "description": "The content of the trigger file. Expression language is supported",
                            "items": {
                                "type": "string"
                            }
                        },
                        "postRoutingActionType": {
                            "type": "string",
                            "description": "Post routing action types: NONE, DELETE, RENAME. Default is no action (NONE)\n",
                            "enum": [
                                "NONE",
                                "DELETE",
                                "RENAME"
                            ],
                            "default": "NONE"
                        },
                        "sleepIncrementBetweenRetries": {
                            "type": "integer",
                            "description": "Time (in milliseconds) with which the sleep interval between retries will be increased after each retry"
                        },
                        "sleepBetweenRetries": {
                            "type": "integer",
                            "description": "Time interval (in milliseconds) which will be awaited between retries"
                        },
                        "maxParallelClients": {
                            "type": "integer",
                            "description": "Maximum number of transfers that will be executed in parallel by the step"
                        },
                        "maxNumberOfRetries": {
                            "type": "integer",
                            "description": "Number of times each transfer will be retried if it fails. The retries are executed synchronously and the step will not finish execution until all files are sent successfully or the retry count configured in this property is reached"
                        },
                        "triggerFileForEach": {
                            "type": "string",
                            "description": "Trigger file output for each transferred file",
                            "enum": [
                                "true",
                                "false"
                            ],
                            "default": "false"
                        },
                        "triggerTransferProfileExpression": {
                            "type": "string",
                            "description": "Transfer profile property is used only if the transfer site is of type PeSIT. Otherwise it will be ignored",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "triggerUploadFolder": {
                            "type": "string",
                            "description": "You can specify an upload folder that will overwrite the one configured in the transfer site settings(if allowed in the transfer site). Expression language can be used to specify the new upload folder",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "archivePolicyOnFailure": {
                            "type": "string",
                            "description": "Backup the files in the configured archive folder if the step execution fails. By default will archive the files based on the account configuration",
                            "enum": [
                                "default",
                                "enabled",
                                "disabled"
                            ]
                        },
                        "archivePolicyOnSuccess": {
                            "type": "string",
                            "description": "Backup the files in the configured archive folder if the step execution succeeds. By default will archive the files based on the account configuration",
                            "enum": [
                                "default",
                                "enabled",
                                "disabled"
                            ]
                        }
                    }
                }
            ],
            "description": "A representation of a route step of type SendToPartner"
        },
        "StandardRouterApplication": {
            "title": "StandardRouterApplication",
            "allOf": [
                {
                    "$ref": "#/definitions/Application"
                },
                {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "StandardRouter"
                        },
                        "OUTBOX_ENABLED": {
                            "type": "boolean",
                            "description": "[Allow Subscribers to Submit files in this Application] When this property is set to true then permit incoming file transfers from the subscriber parties to the application and following properties can be set: OUTBOX_FOLDER, SECURE_CONNECTION_REQUIRED, RENAME_FILES and OUTGOING_FILENAME_FORMAT\n",
                            "default": false
                        },
                        "OUTBOX_FOLDER": {
                            "type": "string",
                            "description": "The name of the folder where incoming transferred files are submitted via subscriptions"
                        },
                        "SECURE_CONNECTION_REQUIRED": {
                            "type": "boolean",
                            "description": "Define whether to enable SSL for the incoming transfers",
                            "default": false
                        },
                        "RENAME_FILES": {
                            "type": "boolean",
                            "description": "Define whether to add a prefix to the file name identifying the sender before it is sent to the internal system\n",
                            "default": false
                        },
                        "OUTGOING_FILENAME_FORMAT": {
                            "type": "boolean",
                            "description": "The format of the new file name. By default, the file is renamed in the format &lt;ID&gt;\\_&lt;FILENAME&gt; where, &lt;ID&gt; is the Subscriber ID specified when the subscription is created, &lt;FILENAME&gt; is the original name of the transferred file and \"\\_\" is the delimiter. The use of the placeholders, &lt;ID&gt;,&lt;FILENAME&gt; and the delimiter in the new file name format is mandatory\n",
                            "default": false
                        },
                        "INBOX_ENABLED": {
                            "type": "boolean",
                            "description": "[Send files to Subscribers] When this property is set to true then permit outgoing file transfers from the application to the subscribed parties. The properties INBOX_FOLDER and ID_FROM_FILENAME_EXTRACTION_PATTERN can be set\n",
                            "default": false
                        },
                        "INBOX_FOLDER": {
                            "type": "boolean",
                            "description": "[Receive folder] The name of the folder where outgoing transferred files are submitted to the subscriber. The receive folder is created as a sub-folder of the subscription folder\n",
                            "default": false
                        },
                        "ID_FROM_FILENAME_EXTRACTION_PATTERN": {
                            "type": "boolean",
                            "description": "A pattern in the ID Pattern box to define the ID of the subscriber to whom files are routed. By default, the pattern is &lt;ID&gt;\\_&lt;FILENAME&gt; where, &lt;ID&gt; is a regular expression corresponding to the Subscriber ID specified when the subscription is created, &lt;FILENAME&gt; is the original name of the transferred file and and \"\\_\" is the delimiter. The use of the placeholders, &lt;ID&gt;,&lt;FILENAME&gt; and the delimiter in the new file name format is mandatory.\n",
                            "default": false
                        }
                    }
                }
            ],
            "description": "A representation of a StandardRouter application."
        },
        "Subscription": {
            "title": "Subscription",
            "type": "object",
            "required": [
                "account",
                "application",
                "folder"
            ],
            "discriminator": "application",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the subscription"
                },
                "folder": {
                    "type": "string",
                    "description": "The folder of the subscription"
                },
                "account": {
                    "type": "string",
                    "description": "The account of the subscription"
                },
                "application": {
                    "type": "string",
                    "description": "The application of the subscription"
                },
                "subscriberID": {
                    "type": "string",
                    "description": "The subscriber ID."
                },
                "scheduledFolderMonitor": {
                    "type": "string",
                    "description": "Specify if this subscription is targeted for a scheduled folder monitor."
                },
                "templateAdvancedExpression": {
                    "type": "string",
                    "description": "Specify if advanced expressions section be displayed in Admin UI Subscriptions page."
                },
                "encryptMode": {
                    "type": "string",
                    "description": "Encryption that will be used for subscription folder. Accepting one of default, enabled, disabled."
                }
            },
            "xml": {
                "name": "subscription"
            }
        },
        "StandardRouterSubscription": {
            "title": "StandardRouterSubscription",
            "allOf": [
                {
                    "$ref": "#/definitions/Subscription"
                },
                {
                    "type": "object",
                    "properties": {
                        "application": {
                            "type": "string"
                        },
                        "flowAttrsMergeMode": {
                            "type": "string",
                            "description": "Specify the flow merge mode. Three options are possible: 'preserve', 'overwrite', 'append'.",
                            "default": "false"
                        },
                        "pta.on.tempfail.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on failure after the transmission. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.on.tempfail.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on temporary failure. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        },
                        "pta.on.permfail.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on failure after the transmission. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.on.permfail.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        },
                        "pta.on.success.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        },
                        "pta.on.permfail.OUT.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on failure after the transmission. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.on.permfail.OUT.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        },
                        "pta.on.success.OUT.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on success after the transmission. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.on.success.OUT.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        }
                    }
                }
            ],
            "description": "A representation of an Standard Router subscription."
        },
        "PackageRetentionMaintApplication": {
            "title": "PackageRetentionMaintApplication",
            "allOf": [
                {
                    "$ref": "#/definitions/Application"
                },
                {
                    "type": "object",
                    "required": [
                        "maxRunningMinutes"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "PackageRetentionMaint"
                        },
                        "maxRunningMinutes": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The maximum number of minutes the application runs each time it is started."
                        }
                    }
                }
            ],
            "description": "A representation of a PackageRetentionMaint application."
        },
        "RouteStepStatuses": {
            "title": "RouteStepStatuses",
            "type": "object",
            "properties": {
                "stepStatuses": {
                    "type": "array",
                    "description": "Step statuses collection",
                    "items": {
                        "$ref": "#/definitions/RouteStepStatus"
                    }
                }
            }
        },
        "EdgeIpAddress": {
            "title": "EdgeIpAddress",
            "type": "object",
            "required": [
                "ipAddress"
            ],
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "The IP address for DMZ edge."
                }
            },
            "xml": {
                "name": "ip_address"
            }
        },
        "SSHSite": {
            "title": "SSHSite",
            "allOf": [
                {
                    "$ref": "#/definitions/Site"
                },
                {
                    "type": "object",
                    "required": [
                        "host",
                        "port",
                        "username"
                    ],
                    "properties": {
                        "protocol": {
                            "type": "string",
                            "default": "ssh"
                        },
                        "host": {
                            "type": "string",
                            "description": "Specify the remote site server host.",
                            "default": ""
                        },
                        "port": {
                            "type": "string",
                            "description": "Specify the remote site server port.",
                            "default": ""
                        },
                        "dmz": {
                            "type": "string",
                            "description": "Specify the remote site network zone. It can be 'any', 'none', 'Default' or custom network zone.",
                            "default": "none"
                        },
                        "download.folder.advanced.expression.enabled": {
                            "type": "string",
                            "description": "When it is 'true' the download folder is evaluated using expression language.",
                            "default": "false"
                        },
                        "download.folder": {
                            "type": "string",
                            "description": "Specify the download folder."
                        },
                        "download.pattern.advanced.expression.enabled": {
                            "type": "string",
                            "description": "When it is 'true' the download pattern is evaluated using expression language.",
                            "default": "false"
                        },
                        "download.pattern.type": {
                            "type": "string",
                            "description": "Specify the download pattern type. Pattern matching expression supports 'glob' and 'regex' syntaxes.When the pattern type is \"File Globbing\" then the String representation of the filename is matched using a limited pattern language that resembles regular expressions but with a simpler syntax.",
                            "default": "glob"
                        },
                        "download.pattern": {
                            "type": "string",
                            "description": "Specify the download pattern.",
                            "default": ""
                        },
                        "upload.folder.overridable": {
                            "type": "string",
                            "description": "Defines if the upload folder can be modified by the Send To Partner routing step. It can be '0' or '1'.",
                            "default": "false"
                        },
                        "upload.folder": {
                            "type": "string",
                            "description": "Specify the upload folder."
                        },
                        "upload.permissions": {
                            "type": "string",
                            "description": "Defines the upload permissions.",
                            "default": "0644"
                        },
                        "transfer.mode": {
                            "type": "string",
                            "description": "Specify the transfer mode. It can be A (Ascii), I (Binary). When it is not define the transfer mode is Auto detected.",
                            "default": ""
                        },
                        "verifyFinger": {
                            "type": "string",
                            "description": "Defines whther to verify fingerprint for this site or not. It can be '0' or '1'.",
                            "default": "0"
                        },
                        "fingerprint": {
                            "type": "string",
                            "description": "Specify the fingerprint.",
                            "default": ""
                        },
                        "fipsMode": {
                            "type": "string",
                            "description": "Specify if the FIPS Transfer Mode is enabled or disabled. This property can be set if FTPS (issecure) is used. It can be '0' or '1'.",
                            "default": "0"
                        },
                        "username": {
                            "type": "string",
                            "description": "Specify the site login username.",
                            "default": ""
                        },
                        "usePassword": {
                            "type": "string",
                            "description": "Specify if the login password should be set. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "usePasswordExpr": {
                            "type": "string",
                            "description": "Specify whether to have password expressions or not. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "password": {
                            "type": "string",
                            "description": "Specify the site login password encrypted in 'AES128'. This property should be set if 'usePassword' is 'true'.",
                            "default": ""
                        },
                        "socketTimeout": {
                            "type": "string",
                            "description": "Specify the maximum number of seconds the server waits to read a block of data from the partner server, or write a block of data to the partner server. If not specified, its value is '300' - 300 seconds. This option corresponds to the SO_RCVTIMEO and SO_SNDTIMEO Socket options.",
                            "default": "300"
                        },
                        "socketBufferSize": {
                            "type": "string",
                            "description": "Specify the size of the receive buffer in bytes used from the socket opened during the transfer. It is used by the platform's networking code as a hint for the size to set the underlying network I/O buffers. Increasing the receive buffer size can increase the performance of network I/O for high-volume connection, while decreasing it can help reduce the backlog of incoming data. This value is also used to set the TCP receive window that is advertized to the remote peer. This option corresponds to the SO_RCVBUF. The value should be a positive integer.",
                            "default": "65536"
                        },
                        "socketSendBufferSize": {
                            "type": "string",
                            "description": "Specify the size of the send buffer in bytes used from the socket opened during the transfer. It is used by the platform's networking code as a hint for the size to set the underlying network I/O buffers. This option corresponds to the SO_SNDBUF. The value should be a positive integer.",
                            "default": "65536"
                        },
                        "bufferSize": {
                            "type": "string",
                            "description": "Specify the size of the buffer in bytes used for reading from the local file system when performing the transfer. This setting is used to optimize the writing of files by allowing large chunk of data to be read in one operation from a local file. The value should be a positive integer. This setting should be set to the highest value possible.",
                            "default": "32768"
                        },
                        "blockSize": {
                            "type": "string",
                            "description": "Specify the SFTP block size value used for the transfer. The value should be a positive integer greater or equal to 512. The defaults value is 32768. It is not recommended to increase the value, more than the default one as the remote server may not be able to support higher block sizes.",
                            "default": "32768"
                        },
                        "tcpNoDelay": {
                            "type": "string",
                            "description": "Enable TCP_NODELAY (disable/enable Nagle's algorithm) for the transfer.",
                            "default": "1"
                        },
                        "pta.OUT.do.as": {
                            "type": "string",
                            "description": "Specify a value to send the file with a different name. An expression language can be used to specify a file name e.g. ${stenv['target']}_${random()}."
                        },
                        "pta.on.tempfail.OUT.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the destination file on temporary failure after the transmission. It can be 'true' or 'false'."
                        },
                        "pta.on.tempfail.OUT.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on temporary failure. An expression language can be used to specify a file name/folder."
                        },
                        "pta.on.permfail.OUT.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the destination file on failure after the transmission. It can be 'true' or 'false'."
                        },
                        "pta.on.permfail.OUT.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder."
                        },
                        "pta.on.success.OUT.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder."
                        },
                        "pta.on.success.OUT.do.move.overwrite": {
                            "type": "string",
                            "description": "When the \"Allow Overwrite Existing File\" option is enabled and the rename operation fails because the target file exists, ST will delete the target file and repeat the rename operation."
                        },
                        "pta.IN.do.as": {
                            "type": "string",
                            "description": "Specify a value to receive the file with a different name. An expression language can be used to specify a file name e.g. ${stenv['target']}_${random()}."
                        },
                        "pta.on.permfail.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the source file on failure after the transmission. It can be 'true' or 'false'."
                        },
                        "pta.on.permfail.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder."
                        },
                        "pta.on.success.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the source file on success after the transmission. It can be 'true' or 'false'."
                        },
                        "pta.on.success.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder."
                        },
                        "pta.on.success.IN.do.move.overwrite": {
                            "type": "string",
                            "description": "When the \"Allow Overwrite Existing File\" option is enabled and the rename operation fails because the target file exists, ST will delete the target file and repeat the rename operation."
                        }
                    }
                }
            ],
            "description": "A representation of an SSH site."
        },
        "RouteStepDecompress": {
            "title": "RouteStepDecompress",
            "allOf": [
                {
                    "$ref": "#/definitions/RouteStep"
                },
                {
                    "type": "object",
                    "required": [
                        "actionOnStepFailure",
                        "fileFilterExpression",
                        "fileFilterExpressionType"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "Decompress"
                        },
                        "usePrecedingStepFiles": {
                            "type": "string",
                            "description": "If true, the route execution will continue even if the step execution fails",
                            "enum": [
                                "true",
                                "false"
                            ],
                            "default": "false"
                        },
                        "fileFilterExpression": {
                            "type": "string",
                            "description": "File name or file name expression. It is used with the file filter expression property",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "fileFilterExpressionType": {
                            "type": "string",
                            "description": "File filter expression type",
                            "enum": [
                                "GLOB",
                                "REGEXP",
                                "TEXT_FILES"
                            ]
                        },
                        "zipPassword": {
                            "type": "string",
                            "description": "Zip file password. Do not use the property if it is not needed in the step flow",
                            "minLength": 0,
                            "maxLength": 32
                        },
                        "actionOnStepFailure": {
                            "type": "string",
                            "description": "Action on step failure. If set to PROCEED, the route execution will continue even if the step execution fails",
                            "enum": [
                                "FAIL",
                                "PROCEED"
                            ]
                        }
                    }
                }
            ],
            "description": "A representation of a route step of type Decompress"
        },
        "CertificateRequest": {
            "title": "CertificateRequest",
            "type": "object",
            "required": [
                "keySize",
                "subject",
                "usage"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The certificate id"
                },
                "subject": {
                    "type": "string",
                    "description": "The the certificate subject DN (distinguished name) in RFC2253 format. Example: 'CN=test,OU=Axway_TT,O=Axway,L=Sofia,ST=Sofia,C=Bulgaria'\n"
                },
                "usage": {
                    "type": "string",
                    "description": "The certificate usage",
                    "enum": [
                        "local",
                        "private"
                    ]
                },
                "fingerprint": {
                    "type": "string",
                    "description": "The certificate fingerprint"
                },
                "keySize": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The size of the key",
                    "minimum": 512,
                    "maximum": 4096
                },
                "account": {
                    "type": "string",
                    "description": "The account, the certificate owner."
                }
            },
            "xml": {
                "name": "certificateRequest"
            }
        },
        "SiteTemplates": {
            "title": "SiteTemplates",
            "type": "object",
            "properties": {
                "siteTemplates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SiteTemplate"
                    }
                }
            },
            "xml": {
                "name": "siteTemplates"
            }
        },
        "Sites": {
            "title": "Sites",
            "type": "object",
            "properties": {
                "sites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Site"
                    }
                }
            },
            "xml": {
                "name": "sites"
            }
        },
        "SiteMailboxSubscription": {
            "title": "SiteMailboxSubscription",
            "allOf": [
                {
                    "$ref": "#/definitions/Subscription"
                },
                {
                    "type": "object",
                    "properties": {
                        "application": {
                            "type": "string"
                        },
                        "flowAttrsMergeMode": {
                            "type": "string",
                            "description": "Specify the flow merge mode. Three options are possible: 'preserve', 'overwrite', 'append'.",
                            "default": "false"
                        },
                        "pta.on.tempfail.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on failure after the transmission. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.on.tempfail.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on temporary failure. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        },
                        "pta.on.permfail.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on failure after the transmission. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.on.permfail.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        },
                        "pta.on.success.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        },
                        "pta.on.permfail.OUT.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on failure after the transmission. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.on.permfail.OUT.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        },
                        "pta.on.success.OUT.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on success after the transmission. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.on.success.OUT.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        }
                    }
                }
            ],
            "description": "A representation of an Site Mailbox subscription."
        },
        "MBFTSubscription": {
            "title": "MBFTSubscription",
            "allOf": [
                {
                    "$ref": "#/definitions/Subscription"
                },
                {
                    "type": "object",
                    "properties": {
                        "application": {
                            "type": "string"
                        },
                        "flowAttrsMergeMode": {
                            "type": "string",
                            "description": "Specify the flow merge mode. Three options are possible: 'preserve', 'overwrite', 'append'.",
                            "default": "false"
                        }
                    }
                }
            ],
            "description": "A representation of a File Transfer via File Services subscription."
        },
        "CollectionEntriesCount": {
            "title": "CollectionEntriesCount",
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "xml": {
                "name": "collectionCount"
            }
        },
        "RouteStepLineFolding": {
            "title": "RouteStepLineFolding",
            "allOf": [
                {
                    "$ref": "#/definitions/RouteStep"
                },
                {
                    "type": "object",
                    "required": [
                        "actionOnStepFailure",
                        "fileFilterExpression",
                        "fileFilterExpressionType",
                        "fileFoldWidth",
                        "inputCharset"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "LineFolding"
                        },
                        "usePrecedingStepFiles": {
                            "type": "string",
                            "description": "If true, the route execution will continue even if the step execution fails",
                            "enum": [
                                "true",
                                "false"
                            ],
                            "default": "false"
                        },
                        "fileFilterExpression": {
                            "type": "string",
                            "description": "File name or file name expression. It is used with the file filter expression property",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "fileFilterExpressionType": {
                            "type": "string",
                            "description": "File filter expression type",
                            "enum": [
                                "GLOB",
                                "REGEXP",
                                "TEXT_FILES"
                            ]
                        },
                        "fileFoldWidth": {
                            "type": "integer",
                            "description": "Maximum lane width in the file over which point it will be folded. A positive integer value"
                        },
                        "actionOnStepFailure": {
                            "type": "string",
                            "description": "Action on step failure. If set to PROCEED, the route execution will continue even if the step execution fails",
                            "enum": [
                                "FAIL",
                                "PROCEED"
                            ]
                        },
                        "inputCharset": {
                            "type": "string",
                            "description": "Specify the source file encoding. Example: UTF-8\n",
                            "minLength": 0,
                            "maxLength": 32
                        },
                        "outputCharset": {
                            "type": "string",
                            "description": "Specify output file encoding. If not specified, source file encoding is used",
                            "minLength": 0,
                            "maxLength": 32
                        }
                    }
                }
            ],
            "description": "A representation of a route step of type LineFolding"
        },
        "TransferEntries": {
            "title": "TransferEntries",
            "type": "object",
            "properties": {
                "transferEntries": {
                    "type": "array",
                    "description": "Collection of the transfers.",
                    "items": {
                        "$ref": "#/definitions/TransferEntry"
                    }
                }
            },
            "xml": {
                "name": "transferEntries"
            }
        },
        "LoginCertificate": {
            "title": "LoginCertificate",
            "allOf": [
                {
                    "$ref": "#/definitions/Certificate"
                },
                {
                    "type": "object",
                    "required": [
                        "account",
                        "password"
                    ],
                    "properties": {
                        "usage": {
                            "type": "string",
                            "default": "login"
                        },
                        "password": {
                            "type": "string"
                        },
                        "account": {
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "A representation of a login certificate."
        },
        "ArchiveMaintApplication": {
            "title": "ArchiveMaintApplication",
            "allOf": [
                {
                    "$ref": "#/definitions/Application"
                },
                {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "ArchiveMaint"
                        }
                    }
                }
            ],
            "description": "A representation of an ArchiveMaint application."
        },
        "AS2Site": {
            "title": "AS2Site",
            "allOf": [
                {
                    "$ref": "#/definitions/Site"
                },
                {
                    "type": "object",
                    "required": [
                        "as2_url",
                        "receiver_as2_id",
                        "receiver_email",
                        "sender_as2_id",
                        "sender_email"
                    ],
                    "properties": {
                        "protocol": {
                            "type": "string",
                            "default": "as2"
                        },
                        "sender_as2_id": {
                            "type": "string",
                            "description": "Specify the server site AS2 name. Each AS2 transfer site for a user must have a unique Server AS2 Name(sender_as2_id) or Remote Site AS2 Name (receiver_as2_id).",
                            "default": ""
                        },
                        "sender_email": {
                            "type": "string",
                            "description": "Specify the server site email.",
                            "default": ""
                        },
                        "receiver_as2_id": {
                            "type": "string",
                            "description": "Specify the remote site AS2 name. Each AS2 transfer site for a user must have a unique Server AS2 Name(sender_as2_id) or Remote Site AS2 Name (receiver_as2_id).",
                            "default": ""
                        },
                        "as2_url": {
                            "type": "string",
                            "description": "Specify the remote site URL.",
                            "default": ""
                        },
                        "receiver_email": {
                            "type": "string",
                            "description": "Specify the remote site email.",
                            "default": ""
                        },
                        "dmz": {
                            "type": "string",
                            "description": "Specify the remote site network zone. It can be 'any', 'none', 'Default' or custom network zone.",
                            "default": "none"
                        },
                        "fipsMode": {
                            "type": "string",
                            "description": "Specify if the FIPS transfer mode is enabled. It can be '0' or '1'.",
                            "default": "0"
                        },
                        "pta.OUT.do.as": {
                            "type": "string",
                            "description": "Specify a value to send the file with a different name. An expression language can be used to specify a file name e.g. '${stenv['target']}_${random()}'."
                        },
                        "subject": {
                            "type": "string",
                            "description": "Specify the message subject.",
                            "default": ""
                        },
                        "mimetype": {
                            "type": "string",
                            "description": "Specify the message MIME Type.",
                            "default": "application/octet-stream"
                        },
                        "transfertimeout": {
                            "type": "string",
                            "description": "Specify the transfer timeout in seconds.",
                            "default": "600"
                        },
                        "sign": {
                            "type": "string",
                            "description": "Specify signing e.g. 'sha1'."
                        },
                        "encrypt": {
                            "type": "string",
                            "description": "Specify encryption. It can be '3des', 'rc2' (RC2/40), 'rc2/64', 'rc2/128'. NOTE: RC2/40, RC2/64 and RC2/128 are not FIPS compilant.\n"
                        },
                        "compress": {
                            "type": "string",
                            "description": "Specify if the transfer should be compressed. It can be '0' or '1'.",
                            "default": "0"
                        },
                        "enablechunked": {
                            "type": "string",
                            "description": "Specify if file chunking is enabled (large files are sent in multiple parts). It can be '0' or '1'.",
                            "default": "1"
                        },
                        "as2_mdn_options": {
                            "type": "string",
                            "description": "Specify mdn options e.g 'signed-receipt-protocol=optional, pkcs7-signature; signed-receipt-micalg=optional, sha1'."
                        },
                        "as2_mdn_url": {
                            "type": "string",
                            "description": "Specify if site should request receipt for all transfers. It can be '0' or '1'."
                        },
                        "as2_mdn_return_url": {
                            "type": "string",
                            "description": "Specify if the receipt request should be asynchronous or synchronous. If this property is specified, than the requests are asynchronous, otherwise synchronous. It can be 'HTTP' or 'HTTPS'."
                        },
                        "pta.IN.do.as": {
                            "type": "string",
                            "description": "Specify a value to receive the file with a different name. An expression language can be used to specify a file name e.g. '${stenv['target']}_${random()}'."
                        },
                        "require_ssl": {
                            "type": "string",
                            "description": "Specify if SSL Connection is required. It can be '0' or '1'.",
                            "default": "0"
                        },
                        "require_encrypt": {
                            "type": "string",
                            "description": "Specify if Encryption is required. It can be '0' or '1'.",
                            "default": "0"
                        },
                        "require_sign": {
                            "type": "string",
                            "description": "Specify if Signature is required. It can be '0' or '1'.",
                            "default": "0"
                        }
                    }
                }
            ],
            "description": "A representation of an AS2 site."
        },
        "PublishStatus": {
            "title": "PublishStatus",
            "type": "object",
            "required": [
                "message",
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "description": "Publish status.",
                    "enum": [
                        "OK",
                        "STARTED",
                        "RUNNING",
                        "SUCCESS",
                        "FAILED"
                    ],
                    "default": "OK"
                },
                "message": {
                    "type": "string",
                    "description": "A message that gives detailed information about publish status."
                }
            },
            "xml": {
                "name": "operationStatus"
            }
        },
        "RouteStepEncodingConversion": {
            "title": "RouteStepEncodingConversion",
            "allOf": [
                {
                    "$ref": "#/definitions/RouteStep"
                },
                {
                    "type": "object",
                    "required": [
                        "actionOnStepFailure",
                        "inputCharset"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "EncodingConversion"
                        },
                        "usePrecedingStepFiles": {
                            "type": "string",
                            "description": "If true, the route execution will continue even if the step execution fails",
                            "enum": [
                                "true",
                                "false"
                            ],
                            "default": "false"
                        },
                        "fileFilterExpression": {
                            "type": "string",
                            "description": "File name or file name expression. It is used with the file filter expression property",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "fileFilterExpressionType": {
                            "type": "string",
                            "description": "File filter expression type",
                            "enum": [
                                "GLOB",
                                "REGEXP",
                                "TEXT_FILES"
                            ]
                        },
                        "actionOnStepFailure": {
                            "type": "string",
                            "description": "Action on step failure. If set to PROCEED, the route execution will continue even if the step execution fails",
                            "enum": [
                                "FAIL",
                                "PROCEED"
                            ]
                        },
                        "inputCharset": {
                            "type": "string",
                            "description": "Specify the source file encoding. Example: UTF-8\n",
                            "minLength": 0,
                            "maxLength": 32
                        },
                        "outputCharset": {
                            "type": "string",
                            "description": "Specify output file encoding. If not specified, source file encoding is used",
                            "minLength": 0,
                            "maxLength": 32
                        }
                    }
                }
            ],
            "description": "A representation of a route step of type EncodingConversion"
        },
        "TransferConfiguration": {
            "title": "TransferConfiguration",
            "type": "object",
            "required": [
                "direction",
                "tag"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the transfer configuration"
                },
                "tag": {
                    "type": "string",
                    "description": "The tag of the transfer configuration",
                    "enum": [
                        "PARTNER-IN",
                        "PARTNER-OUT"
                    ]
                },
                "direction": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The direction of the transfer configuration. It should be 0(from account to application) or 1(from application to account)",
                    "minimum": 0,
                    "maximum": 1
                },
                "site": {
                    "type": "string",
                    "description": "The transfer site"
                },
                "transferProfile": {
                    "type": "string",
                    "description": "The transfer profile of the transfer configuration"
                },
                "dataTransformations": {
                    "type": "array",
                    "description": "The data transformations of the transfer configuration.",
                    "items": {
                        "$ref": "#/definitions/DataTransformation"
                    }
                }
            },
            "xml": {
                "name": "transferConfiguration"
            }
        },
        "EdgeProxy": {
            "title": "EdgeProxy",
            "type": "object",
            "required": [
                "proxy_protocol"
            ],
            "properties": {
                "proxy_protocol": {
                    "type": "string",
                    "xml": {
                        "name": "proxy_protocol"
                    },
                    "description": "The proxy protocol",
                    "enum": [
                        "SOCKS_PROXY",
                        "HTTP_PROXY"
                    ]
                },
                "port": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of port for the proxi"
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Define whether the proxy is enabled",
                    "default": false
                },
                "username": {
                    "type": "string",
                    "description": "The user name to authenticate to the proxy"
                },
                "isUsePassword": {
                    "type": "boolean",
                    "description": "Shows if the password should be preserved/overwritten or removed (true if the password should be preserved/overwritten with non empty one and false when the password should be removed)\n",
                    "default": false
                },
                "password": {
                    "type": "string",
                    "description": "The password for the edge proxy. Password can be set only if 'isUsePassword' is set to 'true'. This property can not be get via the ST REST API.\n"
                }
            },
            "xml": {
                "name": "proxy"
            }
        },
        "Certificates": {
            "title": "Certificates",
            "type": "object",
            "properties": {
                "certificates": {
                    "type": "array",
                    "description": "Collection of certificate entities on the ST server",
                    "items": {
                        "$ref": "#/definitions/Certificate"
                    }
                }
            },
            "xml": {
                "name": "certificates"
            }
        },
        "TransferResult": {
            "title": "TransferResult",
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "description": "The transfer result message"
                },
                "link": {
                    "type": "string",
                    "description": "The transfer log link."
                }
            },
            "xml": {
                "name": "transferResult"
            }
        },
        "Routes": {
            "title": "Routes",
            "type": "object",
            "properties": {
                "routes": {
                    "type": "array",
                    "description": "Routes collection",
                    "items": {
                        "$ref": "#/definitions/Route"
                    }
                }
            }
        },
        "RouteStepLineTruncating": {
            "title": "RouteStepLineTruncating",
            "allOf": [
                {
                    "$ref": "#/definitions/RouteStep"
                },
                {
                    "type": "object",
                    "required": [
                        "actionOnStepFailure",
                        "fileFilterExpression",
                        "fileFilterExpressionType",
                        "inputCharset",
                        "truncateLength"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "LineTruncating"
                        },
                        "usePrecedingStepFiles": {
                            "type": "string",
                            "description": "If true, the route execution will continue even if the step execution fails",
                            "enum": [
                                "true",
                                "false"
                            ],
                            "default": "false"
                        },
                        "fileFilterExpression": {
                            "type": "string",
                            "description": "File name or file name expression. It is used with the file filter expression property",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "fileFilterExpressionType": {
                            "type": "string",
                            "description": "File filter expression type",
                            "enum": [
                                "GLOB",
                                "REGEXP",
                                "TEXT_FILES"
                            ]
                        },
                        "actionOnStepFailure": {
                            "type": "string",
                            "description": "Action on step failure. If set to PROCEED, the route execution will continue even if the step execution fails",
                            "enum": [
                                "FAIL",
                                "PROCEED"
                            ]
                        },
                        "inputCharset": {
                            "type": "string",
                            "description": "Specify the source file encoding. Example: UTF-8\n",
                            "minLength": 0,
                            "maxLength": 32
                        },
                        "outputCharset": {
                            "type": "string",
                            "description": "Specify output file encoding. If not specified, source file encoding is used",
                            "minLength": 0,
                            "maxLength": 32
                        },
                        "truncateLength": {
                            "type": "integer",
                            "description": "Line Truncate trims the file lines to have a limited maximum length. Use this setting to specify the lines maximum length in number of characters/symbols. This will cause extra characters to be discarded"
                        }
                    }
                }
            ],
            "description": "A representation of a route step of type LineTruncating"
        },
        "BasicSubscription": {
            "title": "BasicSubscription",
            "allOf": [
                {
                    "$ref": "#/definitions/Subscription"
                },
                {
                    "type": "object",
                    "properties": {
                        "application": {
                            "type": "string"
                        },
                        "flowAttrsMergeMode": {
                            "type": "string",
                            "description": "Specify the flow merge mode. Three options are possible: 'preserve', 'overwrite', 'append'.",
                            "default": "false"
                        },
                        "pta.on.tempfail.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on failure after the transmission. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.on.tempfail.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on temporary failure. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        },
                        "pta.on.permfail.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on failure after the transmission. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.on.permfail.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        },
                        "pta.on.success.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        },
                        "pta.on.permfail.OUT.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on failure after the transmission. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.on.permfail.OUT.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        },
                        "pta.on.success.OUT.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on success after the transmission. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.on.success.OUT.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        }
                    }
                }
            ],
            "description": "A representation of an Basic subscription."
        },
        "IcapServers": {
            "title": "IcapServers",
            "type": "object",
            "properties": {
                "ICAP servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/IcapServer"
                    }
                }
            }
        },
        "Rules": {
            "title": "Rules",
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The count of login restriction rule entities on the ST server"
                },
                "rules": {
                    "type": "array",
                    "description": "The list of login restriction rule entities on the ST server.",
                    "items": {
                        "$ref": "#/definitions/Rule"
                    }
                }
            },
            "xml": {
                "name": "rule"
            }
        },
        "BusinessUnit": {
            "title": "BusinessUnit",
            "type": "object",
            "required": [
                "baseFolder",
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the business unit entity",
                    "minLength": 1,
                    "maxLength": 2147483647
                },
                "parent": {
                    "type": "string",
                    "description": "The name of the parent business unit entity"
                },
                "businessUnitHierarchy": {
                    "type": "string",
                    "description": "The full path hierarchy of the business unit entity"
                },
                "baseFolder": {
                    "type": "string",
                    "description": "The base folder of the business unit entity",
                    "minLength": 1,
                    "maxLength": 2147483647
                },
                "baseFolderAllowedForModifying": {
                    "type": "boolean",
                    "description": "Flag indicating if the base folder of the business unit entity is modifiable (this property defines whether the base folder for the belonging accounts may be modified)\n",
                    "default": false
                },
                "homeFolderAllowedForModifying": {
                    "type": "boolean",
                    "description": "Flag indicating if the belonging accounts' base folders are modifiable",
                    "default": false
                },
                "htmlTemplateFolderPath": {
                    "type": "string",
                    "description": "The HTML template directory path on the local system used for this business unit entity",
                    "enum": [
                        "Default HTML Template",
                        "Axway Jelly Ball 9",
                        "SecureTransport Legacy Client",
                        "Axway Box and Stripe in Blue",
                        "SecureTransport Web Access Plus"
                    ],
                    "default": "Default HTML Template"
                },
                "htmlTemplateAllowedForModifying": {
                    "type": "boolean",
                    "description": "Flag indicating if the HTML Template folder may be modified",
                    "default": false
                },
                "deliveryMethodAllowedForModifying": {
                    "type": "boolean",
                    "description": "Flag indicating if the belonging accounts' could enroll other accounts",
                    "default": false
                },
                "enrollmentTemplate": {
                    "type": "string",
                    "description": "The name of the notification template for this business unit entity",
                    "default": "Default"
                },
                "authByEmailAllowedForModifying": {
                    "type": "boolean",
                    "description": "Flag indicating if auth by email is allowed for modifying",
                    "default": false
                },
                "authByEmail": {
                    "type": "boolean",
                    "description": "Flag indicating if auth is by email",
                    "default": false
                },
                "webServiceRightsAllowedForModifying": {
                    "type": "boolean",
                    "description": "Flag indicating if web services rights are allowed for modifying",
                    "default": false
                },
                "loginRestrictionPolicyAllowedForModifying": {
                    "type": "string",
                    "description": "Flag indicating whether the login restriction policy option is modifiable on account level."
                },
                "deliveryMethod": {
                    "type": "string",
                    "description": "This property defines the delivery method. When deliveryMethod is set to 'Disabled' then Adhoc is disabled and enrollmentType/implicitEnrollmentType can not be set. When deliveryMethod is set to 'Default' then it is only available on BU and Account (setting the BU to use the value and account to use the BU value). When deliveryMethod is set to 'Anonymous' then implicit enrollment types 'Anonymous' and \"\" (Select by sender) are enabled. When deliveryMethod is set to 'Account Without Enrollment' then implicit enrollment types 'Anonymous', \"\"  (Select by sender) and 'Existing Account' are enabled. When deliveryMethod is set to 'Account With Enrollment' then implicit enrollment types 'Anonymous', \"\" (Select by sender), 'Enroll unlicensed', 'Enroll licensed' are enabled\n",
                    "enum": [
                        "Disabled",
                        "Default",
                        "Anonymous",
                        "Account Without Enrollment",
                        "Account With Enrollment",
                        "Custom"
                    ],
                    "default": "Default"
                },
                "enrollmentTypes": {
                    "type": "array",
                    "description": "This property is used for a custom delivery method and can be set only if deliveryMethod property is set to 'Custom'. Enrollment types are \n",
                    "items": {
                        "type": "string"
                    }
                },
                "implicitEnrollmentType": {
                    "type": "string",
                    "description": "The Implicit Enrollment Type value of the business unit entity. This property controls which option Web Access Plus selects initially in the User Access window and which enrollment type is used by the Axway Email Plug-ins. The choices depend on the enrollment types enabled by the Delivery Methods and Enrollment Types fields\n",
                    "enum": [
                        "",
                        "Anonymous",
                        "Existing Account",
                        "Enroll Unlicensed",
                        "Enroll Licensed"
                    ]
                },
                "notificationTemplate": {
                    "type": "string",
                    "description": "The notification template"
                },
                "dmz": {
                    "type": "string",
                    "description": "The name of the DMZ zone"
                },
                "loginRestrictionPolicy": {
                    "type": "string",
                    "description": "The login restriction policy for this business unit."
                }
            },
            "xml": {
                "name": "businessUnit"
            }
        },
        "SessionBandwidthStatisticsByLoginName": {
            "title": "SessionBandwidthStatisticsByLoginName",
            "type": "object",
            "properties": {
                "loginName": {
                    "type": "string",
                    "description": "The login name"
                },
                "inboundBandwidthUsageStat": {
                    "type": "integer",
                    "description": "The Inbound Bandwidth Usage Statistic"
                },
                "outboundBandwidthUsageStat": {
                    "type": "integer",
                    "description": "The Outbound Bandwidth Usage Statistic"
                },
                "sessionCount": {
                    "type": "integer",
                    "description": "Total sessions count"
                },
                "ftpSessionsCount": {
                    "type": "integer",
                    "description": "FTP sessions count"
                },
                "httpSessionsCount": {
                    "type": "integer",
                    "description": "HTTP sessions count"
                },
                "sshSessionsCount": {
                    "type": "integer",
                    "description": "SSH sessions count"
                },
                "maxAllowedInboundBandwidth": {
                    "type": "integer",
                    "description": "Max allowed bandwidth for inbound transfers"
                },
                "maxAllowedOutboundBandwidth": {
                    "type": "integer",
                    "description": "Max allowed bandwidth for outbound transfers"
                }
            },
            "xml": {
                "name": "sessionBandwidthStatisticsByLoginName"
            }
        },
        "Edge": {
            "title": "Edge",
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "title": {
                    "type": "string",
                    "description": "Title of the DMZ edge. Edge title can not contain characters \"\\\", \"/\", \";\" and \"'\"\n",
                    "minLength": 0,
                    "maxLength": 255,
                    "pattern": "^([^\\/\\\\;\\']*)$"
                },
                "notes": {
                    "type": "string",
                    "description": "Notes for the DMZ edge",
                    "minLength": 0,
                    "maxLength": 255
                },
                "deploymentSite": {
                    "type": "string",
                    "description": "The cluster deployment site of the edge"
                },
                "enabledProxy": {
                    "type": "boolean",
                    "description": "Check status of the proxy whether it is enabled/disabled (true if proxy is enabled, false otherwise)\n",
                    "default": false
                },
                "protocols": {
                    "description": "The protocols for the DMZ edge",
                    "$ref": "#/definitions/EdgeProtocols"
                },
                "proxies": {
                    "description": "The proxies",
                    "$ref": "#/definitions/EdgeProxies"
                },
                "ip_address": {
                    "type": "array",
                    "xml": {
                        "name": "ip_address"
                    },
                    "description": "IP addresses for the DMZ edge",
                    "items": {
                        "$ref": "#/definitions/EdgeIpAddress"
                    }
                },
                "configurationId": {
                    "type": "string",
                    "description": "The identifier of the machine"
                },
                "descriptor": {
                    "type": "string",
                    "description": "The unique identifier for current node (IP or hostname ..etc).\n"
                }
            },
            "xml": {
                "name": "edge"
            }
        },
        "Session": {
            "title": "Session",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the session"
                },
                "userName": {
                    "type": "string",
                    "description": "The user name"
                },
                "host": {
                    "type": "string",
                    "description": "The host of the client that's connected to the daemon"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol",
                    "enum": [
                        "FTP",
                        "HTTP"
                    ]
                },
                "userClass": {
                    "type": "string",
                    "description": "The user class. By default the user class can be 'VirtClass' or 'RealClass'"
                },
                "currentTransferBandwith": {
                    "type": "string",
                    "description": "The current transfer bandwith"
                },
                "command": {
                    "type": "string",
                    "description": "The command currently being executed. Like STOR, RETR, IDLE."
                },
                "sessionCreationTime": {
                    "type": "string",
                    "description": "The creation time of the session."
                }
            },
            "xml": {
                "name": "session"
            }
        },
        "TransferProfile": {
            "title": "TransferProfile",
            "type": "object",
            "required": [
                "account",
                "name"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the transfer profile"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the transfer profile"
                },
                "account": {
                    "type": "string",
                    "description": "The account for which the transfer profile is created"
                },
                "sendMapping": {
                    "type": "string",
                    "description": "The send mapping of the transfer profile. The maximum length is 250 characters",
                    "minLength": 0,
                    "maxLength": 250
                },
                "receiveMapping": {
                    "type": "string",
                    "description": "The receive mapping of the transfer profile. The transfer profile's `Receive File as` mapping may not contain '*' or '?'",
                    "minLength": 0,
                    "maxLength": 250,
                    "pattern": "^(([^\\*\\?]*))$"
                },
                "fileLabelOption": {
                    "type": "string",
                    "description": "The file label option of the transfer profile",
                    "enum": [
                        "DONT_SEND",
                        "SEND_FILENAME",
                        "SEND_FILENAME_AND_PATH"
                    ]
                },
                "transferMode": {
                    "type": "string",
                    "description": "The mode of the transfer profile",
                    "enum": [
                        "BINARY",
                        "ASCII",
                        "EBCDIC",
                        "EBCDIC NATIVE"
                    ]
                },
                "recordFormat": {
                    "type": "string",
                    "description": "The record format of the transfer profile. It can be 128 (variable) or 0 (fixed)",
                    "enum": [
                        "128",
                        "0"
                    ],
                    "default": "128"
                },
                "recordLength": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The record length of the transfer profile. It should be positive number",
                    "minimum": 1,
                    "maximum": 2147483647,
                    "default": 2048
                },
                "default": {
                    "type": "boolean",
                    "description": "Defines whether this transfer profile is default or not",
                    "default": false
                },
                "multiSelect": {
                    "type": "boolean",
                    "description": "Defines whether multi select is chosen",
                    "default": false
                },
                "sendingAcknowledgmentEnabled": {
                    "type": "boolean",
                    "description": "Defines whether the sending acknowledgment is enabled",
                    "default": false
                },
                "paddingStripEnabled": {
                    "type": "boolean",
                    "description": "Defines whether the padding strip is enabled.",
                    "default": false
                }
            },
            "xml": {
                "name": "transferProfile"
            }
        },
        "CertificateDetails": {
            "title": "CertificateDetails",
            "type": "object",
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "The certificate alias"
                },
                "certContent": {
                    "type": "array",
                    "description": "The content of all certificates in the chain / SSH public key for SSH protocol.\n",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "byte"
                        }
                    }
                }
            },
            "xml": {
                "name": "certificateDetails"
            }
        },
        "RouteStepPgpEncryption": {
            "title": "RouteStepPgpEncryption",
            "allOf": [
                {
                    "$ref": "#/definitions/RouteStep"
                },
                {
                    "type": "object",
                    "required": [
                        "actionOnStepFailure",
                        "compressionType",
                        "fileFilterExpression",
                        "fileFilterExpressionType",
                        "useAsciiArmour"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "PgpEncryption"
                        },
                        "fileFilterExpression": {
                            "type": "string",
                            "description": "File name or file name expression. It is used with the file filter expression property",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "fileFilterExpressionType": {
                            "type": "string",
                            "description": "File filter expression type",
                            "enum": [
                                "GLOB",
                                "REGEXP"
                            ]
                        },
                        "usePrecedingStepFiles": {
                            "type": "string",
                            "description": "If true, the route execution will continue even if the step execution fails",
                            "enum": [
                                "true",
                                "false"
                            ],
                            "default": "false"
                        },
                        "actionOnStepFailure": {
                            "type": "string",
                            "description": "Action on step failure. If set to PROCEED, the route execution will continue even if the step execution fails",
                            "enum": [
                                "FAIL",
                                "PROCEED"
                            ]
                        },
                        "encryptKeyOwnerExpression": {
                            "type": "string",
                            "description": "You can specify either an account name or use an EL expression to determine the recipient based on the environment information (such as filename). If an account name is unknown (e.g. expression based) its PGP certificates will be determined on runtime. PGP certificates can be expression based as well. All the encrypt key related properties (expressions, owners, types) should be set if an encrypt key is used. Encrypt or sign key usage is mandatory.",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "encryptKeyExpression": {
                            "type": "string",
                            "description": "PGP encryption name amongst PGP Public Keys (within the selected above account) or by entering an expression for this. Wild card symbols ( asterisk symbol and ?) can also be used when specifying the PGP key alias. If multiple keys match the pattern the first one will be picked up and used.",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "encryptKeyOwnerExpressionType": {
                            "type": "string",
                            "description": "Account name or expression",
                            "enum": [
                                "NAME",
                                "EXPRESSION"
                            ]
                        },
                        "encryptKeyExpressionType": {
                            "type": "string",
                            "description": "Account name or expression",
                            "enum": [
                                "ALIAS",
                                "EXPRESSION_WILDCARD"
                            ]
                        },
                        "signKeyOwnerExpression": {
                            "type": "string",
                            "description": "You can specify either an account name or use an EL expression to determine the recipient based on the environment information (such as filename). If an account name is unknown (e.g. expression based) its PGP certificates will be determined on runtime. PGP certificates can be expression based as well. All the sign key related properties (expressions, owners, types) should be set if a sign key is used.",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "signKeyExpression": {
                            "type": "string",
                            "description": "PGP encryption name amongst PGP Public Keys (within the selected above account) or by entering an expression for this. Wild card symbols ( asterisk symbol and ?) can also be used when specifying the PGP key alias. If multiple keys match the pattern the first one will be picked up and used.",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "signKeyOwnerExpressionType": {
                            "type": "string",
                            "description": "Account name or expression",
                            "enum": [
                                "NAME",
                                "EXPRESSION"
                            ]
                        },
                        "signKeyExpressionType": {
                            "type": "string",
                            "description": "PGP Key alias or expression",
                            "enum": [
                                "ALIAS",
                                "EXPRESSION_WILDCARD"
                            ]
                        },
                        "useAsciiArmour": {
                            "type": "boolean",
                            "description": "Encode Using ASCII Armor",
                            "default": false
                        },
                        "compressionType": {
                            "type": "string",
                            "description": "Numbers in string format used \"0\" - no compression, \"-1\" - use preferred, \"1\" - ZIP, \"2\" - ZLIB, \"3\" - BZIP2",
                            "enum": [
                                "-1",
                                "0",
                                "1",
                                "2",
                                "3"
                            ]
                        },
                        "compressionLevel": {
                            "type": "integer",
                            "description": "The values are 2 for FAST, 5 for NORMAL, 7 for GOOD, 9 for BEST"
                        }
                    }
                }
            ],
            "description": "A representation of a route step of type PgpEncryption"
        },
        "Route": {
            "title": "Route",
            "type": "object",
            "required": [
                "conditionType",
                "failureEmailNotification",
                "name",
                "successEmailNotification",
                "type"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Route Id",
                    "minLength": 0,
                    "maxLength": 32
                },
                "name": {
                    "type": "string",
                    "description": "Route name",
                    "minLength": 0,
                    "maxLength": 255,
                    "pattern": "^(([^\\/\\;\\']*))$"
                },
                "description": {
                    "type": "string",
                    "description": "Route description",
                    "minLength": 0,
                    "maxLength": 2048
                },
                "type": {
                    "type": "string",
                    "description": "Route types: TEMPLATE - Route Package Template, SIMPLE - Route in a Route Package Template, COMPOSITE - Assign a route with TEMPLATE type to a virtual account and its subscriptions\n",
                    "enum": [
                        "TEMPLATE",
                        "SIMPLE",
                        "COMPOSITE"
                    ]
                },
                "routeTemplate": {
                    "type": "string",
                    "description": "In COMPOSITE route this is the id of an existing template route visible by the account this route is created for",
                    "minLength": 0,
                    "maxLength": 32
                },
                "account": {
                    "type": "string",
                    "description": "The account where the route is subscribed",
                    "minLength": 0,
                    "maxLength": 80,
                    "pattern": "^(([^\\/\\;\\']*))$"
                },
                "businessUnits": {
                    "type": "array",
                    "description": "Route business unit names appropriate for the Administrator who is managing this route",
                    "items": {
                        "type": "string"
                    }
                },
                "condition": {
                    "type": "boolean",
                    "description": "Defines if condition is used"
                },
                "conditionType": {
                    "type": "string",
                    "description": "Contidion type",
                    "enum": [
                        "MATCH_ALL",
                        "MATCH_FIRST",
                        "ALWAYS",
                        "EL"
                    ]
                },
                "failureEmailNotification": {
                    "type": "boolean",
                    "description": "Notify following e-mails on route failure: true or false. Default is false\n",
                    "default": false
                },
                "failureEmailTemplate": {
                    "type": "string",
                    "description": "Notification template name on route failure"
                },
                "failureEmailName": {
                    "type": "string",
                    "description": "E-mail Notifications on route failure",
                    "minLength": 0,
                    "maxLength": 255
                },
                "successEmailNotification": {
                    "type": "boolean",
                    "description": "Notify following e-mails on route success: true or false. Default is false\n",
                    "default": false
                },
                "successEmailTemplate": {
                    "type": "string",
                    "description": "Notification template name on route success"
                },
                "successEmailName": {
                    "type": "string",
                    "description": "E-mail Notifications on route success",
                    "minLength": 0,
                    "maxLength": 255
                },
                "triggeringEmailNotification": {
                    "type": "boolean",
                    "description": "Notify following e-mails on route triggering: true or false. Default is false\n",
                    "default": false
                },
                "triggeringEmailTemplate": {
                    "type": "string",
                    "description": "Notification template name on route triggering"
                },
                "triggeringEmailName": {
                    "type": "string",
                    "description": "E-mail Notifications on route triggering",
                    "minLength": 0,
                    "maxLength": 255
                },
                "steps": {
                    "type": "array",
                    "description": "Step id collections of a route",
                    "items": {
                        "type": "string"
                    }
                },
                "subscriptions": {
                    "type": "array",
                    "description": "Collection of subscription IDs for an account",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "xml": {
                "name": "route"
            }
        },
        "FTPSite": {
            "title": "FTPSite",
            "allOf": [
                {
                    "$ref": "#/definitions/Site"
                },
                {
                    "type": "object",
                    "required": [
                        "host",
                        "port"
                    ],
                    "properties": {
                        "protocol": {
                            "type": "string",
                            "default": "ftp"
                        },
                        "host": {
                            "type": "string",
                            "description": "Specify the remote site server host.",
                            "default": ""
                        },
                        "port": {
                            "type": "string",
                            "description": "Specify the remote site server port.",
                            "default": ""
                        },
                        "dmz": {
                            "type": "string",
                            "description": "Specify the remote site network zone. It can be 'any', 'none', 'Default' or custom network zone.",
                            "default": "none"
                        },
                        "activeMode": {
                            "type": "string",
                            "description": "Define whether the Active Connection Mode is enabled. It can be '0' or '1'.",
                            "default": "0"
                        },
                        "download.folder.advanced.expression.enabled": {
                            "type": "string",
                            "description": "When it is 'true' the download folder is evaluated using expression language.",
                            "default": "false"
                        },
                        "download.folder": {
                            "type": "string",
                            "description": "Specify the download folder."
                        },
                        "download.pattern.advanced.expression.enabled": {
                            "type": "string",
                            "description": "When it is 'true' the download pattern is evaluated using expression language.",
                            "default": "false"
                        },
                        "download.pattern": {
                            "type": "string",
                            "description": "Specify the download pattern.",
                            "default": ""
                        },
                        "upload.folder.overridable": {
                            "type": "string",
                            "description": "Defines if the upload folder can be modified by the Send To Partner routing step. It can be '0' or '1'.",
                            "default": "false"
                        },
                        "upload.folder": {
                            "type": "string",
                            "description": "Specify the upload folder."
                        },
                        "transfer.mode": {
                            "type": "string",
                            "description": "Specify the transfer mode. It can be A (Ascii), I (Binary). When it is not define the transfer mode is Auto detected.",
                            "default": ""
                        },
                        "matchAnyLineTerminators": {
                            "type": "string",
                            "description": "Tanscode any line terminators in ASCII mode. It can be '0' or '1'.",
                            "default": "0"
                        },
                        "issecure": {
                            "type": "string",
                            "description": "Specify if FTPS is used or not. It can be '0' or '1'.",
                            "default": "1"
                        },
                        "verifyCert": {
                            "type": "string",
                            "description": "Verify certificate for this site. This property can be set if FTPS (issecure) is used. It can be '0' or '1'.",
                            "default": "0"
                        },
                        "ccc": {
                            "type": "string",
                            "description": "Clear command channel. This property can be set if FTPS (issecure) is used. It can be '0' or '1'.",
                            "default": "0"
                        },
                        "tlsShutdownCcc": {
                            "type": "string",
                            "description": "TLC Shutdown on CCC. This property can be set if FTPS (issecure) is used and the 'Clear Command Channel' is enabled. It can be '0' or '1'.",
                            "default": "0"
                        },
                        "fipsMode": {
                            "type": "string",
                            "description": "Specify if the FIPS Transfer Mode is enabled or disabled. This property can be set if FTPS (issecure) is used. It can be '0' or '1'.",
                            "default": "0"
                        },
                        "siteCommand": {
                            "type": "string",
                            "description": "Specify the SITE commands.",
                            "default": ""
                        },
                        "username": {
                            "type": "string",
                            "description": "Specify the site login username.",
                            "default": ""
                        },
                        "usePassword": {
                            "type": "string",
                            "description": "Specify if the login password should be set. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "password": {
                            "type": "string",
                            "description": "Specify the site login password encrypted in 'AES128'. This property should be set if 'usePassword' is 'true'.",
                            "default": ""
                        },
                        "usePasswordExpr": {
                            "type": "string",
                            "description": "Specify whether to have password expressions or not. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.OUT.do.as": {
                            "type": "string",
                            "description": "Specify a value to send the file with a different name. An expression language can be used to specify a file name e.g. ${stenv['target']}_${random()}."
                        },
                        "pta.on.tempfail.OUT.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the destination file on temporary failure after the transmission. It can be 'true' or 'false'."
                        },
                        "pta.on.tempfail.OUT.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on temporary failure. An expression language can be used to specify a file name/folder."
                        },
                        "pta.on.permfail.OUT.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the destination file on failure after the transmission. It can be 'true' or 'false'."
                        },
                        "pta.on.permfail.OUT.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder."
                        },
                        "pta.on.success.OUT.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder."
                        },
                        "pta.IN.do.as": {
                            "type": "string",
                            "description": "Specify a value to receive the file with a different name. An expression language can be used to specify a file name e.g. ${stenv['target']}_${random()}."
                        },
                        "pta.on.permfail.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the source file on failure after the transmission. It can be 'true' or 'false'."
                        },
                        "pta.on.permfail.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder."
                        },
                        "pta.on.success.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the source file on success after the transmission. It can be 'true' or 'false'."
                        },
                        "pta.on.success.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder."
                        }
                    }
                }
            ],
            "description": "A representation of an FTP(S) site."
        },
        "RouteStepStatus": {
            "title": "RouteStepStatus",
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "stepId": {
                    "type": "string",
                    "description": "Step Id",
                    "minLength": 0,
                    "maxLength": 32
                },
                "status": {
                    "type": "string",
                    "description": "Step status",
                    "enum": [
                        "ENABLED",
                        "DISABLED"
                    ]
                }
            },
            "xml": {
                "name": "stepStatus"
            }
        },
        "SiteTemplate": {
            "title": "SiteTemplate",
            "type": "object",
            "required": [
                "name",
                "protocol"
            ],
            "discriminator": "protocol",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the site template"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the site template"
                },
                "localServerPort": {
                    "type": "string",
                    "description": "The port of the local Connect:Direct server. Applicable for Connect:Direct site templates only."
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the site template. It could be 'cd' or 'synchrony transfer'"
                },
                "port": {
                    "type": "string",
                    "description": "The port for the site template. Applicable for Synchrony Transfer site templates only."
                },
                "username": {
                    "type": "string",
                    "description": "The username for the site template. Applicable for Synchrony Transfer site templates only."
                },
                "userName": {
                    "type": "string",
                    "description": "The username for the site template. Applicable for Connect:Direct site templates only."
                }
            },
            "xml": {
                "name": "siteTemplate"
            }
        },
        "ConfigurationProfiles": {
            "title": "ConfigurationProfiles",
            "type": "object",
            "properties": {
                "configurationProfiles": {
                    "type": "array",
                    "description": "The list of configuration profiles on the ST server",
                    "items": {
                        "$ref": "#/definitions/ConfigurationProfile"
                    }
                }
            }
        },
        "LogEntries": {
            "title": "LogEntries",
            "type": "object",
            "properties": {
                "logEntries": {
                    "type": "array",
                    "description": "The list of log entries on the ST server",
                    "items": {
                        "$ref": "#/definitions/LogEntry"
                    }
                }
            },
            "xml": {
                "name": "logEntries"
            }
        },
        "DataTransformations": {
            "title": "DataTransformations",
            "type": "object",
            "properties": {
                "dataTransformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DataTransformation"
                    }
                }
            },
            "xml": {
                "name": "dataTransformations"
            }
        },
        "RouteStepPgpDecryption": {
            "title": "RouteStepPgpDecryption",
            "allOf": [
                {
                    "$ref": "#/definitions/RouteStep"
                },
                {
                    "type": "object",
                    "required": [
                        "actionOnStepFailure",
                        "fileFilterExpression",
                        "fileFilterExpressionType"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "PgpDecryption"
                        },
                        "usePrecedingStepFiles": {
                            "type": "string",
                            "description": "If true, the route execution will continue even if the step execution fails",
                            "enum": [
                                "true",
                                "false"
                            ],
                            "default": "false"
                        },
                        "fileFilterExpression": {
                            "type": "string",
                            "description": "File name or file name expression. It is used with the file filter expression property",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "fileFilterExpressionType": {
                            "type": "string",
                            "description": "File filter expression type",
                            "enum": [
                                "GLOB",
                                "REGEXP"
                            ]
                        },
                        "actionOnStepFailure": {
                            "type": "string",
                            "description": "Action on step failure. If set to PROCEED, the route execution will continue even if the step execution fails",
                            "enum": [
                                "FAIL",
                                "PROCEED"
                            ]
                        },
                        "requireEncryption": {
                            "type": "boolean",
                            "description": "Require encryption",
                            "default": false
                        },
                        "requireTrustedSignature": {
                            "type": "boolean",
                            "description": "Require trusted signature",
                            "default": false
                        }
                    }
                }
            ],
            "description": "A representation of a route step of type PgpDecryption. PGP private keys will be automatically determined on runtime. They will be searched only within the key store of the account subscribed to this route."
        },
        "TransferDataEntries": {
            "title": "TransferDataEntries",
            "type": "object",
            "properties": {
                "transferData": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransferData"
                    }
                }
            },
            "xml": {
                "name": "transferDataEntries"
            }
        },
        "MailTemplate": {
            "title": "MailTemplate",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the mail template"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the mail template."
                }
            },
            "xml": {
                "name": "mailtemplate"
            }
        },
        "SharedFolderSubscription": {
            "title": "SharedFolderSubscription",
            "allOf": [
                {
                    "$ref": "#/definitions/Subscription"
                },
                {
                    "type": "object",
                    "properties": {
                        "application": {
                            "type": "string"
                        },
                        "flowAttrsMergeMode": {
                            "type": "string",
                            "description": "Specify the flow merge mode. Three options are possible: 'preserve', 'overwrite', 'append'.",
                            "default": "false"
                        },
                        "pta.on.tempfail.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on failure after the transmission. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.on.tempfail.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on temporary failure. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        },
                        "pta.on.permfail.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on failure after the transmission. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.on.permfail.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        },
                        "pta.on.success.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        }
                    }
                }
            ],
            "description": "A representation of an Shared Folder application subscription."
        },
        "HadaInstance": {
            "title": "HadaInstance",
            "type": "object",
            "properties": {
                "instanceName": {
                    "type": "string",
                    "description": "The name of instance"
                }
            },
            "xml": {
                "name": "hadaInstance"
            }
        },
        "RouteStepLinePadding": {
            "title": "RouteStepLinePadding",
            "allOf": [
                {
                    "$ref": "#/definitions/RouteStep"
                },
                {
                    "type": "object",
                    "required": [
                        "actionOnStepFailure",
                        "fileFilterExpression",
                        "fileFilterExpressionType",
                        "inputCharset",
                        "linePaddingCharacter",
                        "linePaddingLength"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "LinePadding"
                        },
                        "usePrecedingStepFiles": {
                            "type": "string",
                            "description": "If true, the route execution will continue even if the step execution fails",
                            "enum": [
                                "true",
                                "false"
                            ],
                            "default": "false"
                        },
                        "fileFilterExpression": {
                            "type": "string",
                            "description": "File name or file name expression. It is used with the file filter expression property",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "fileFilterExpressionType": {
                            "type": "string",
                            "description": "File filter expression type",
                            "enum": [
                                "GLOB",
                                "REGEXP",
                                "TEXT_FILES"
                            ]
                        },
                        "actionOnStepFailure": {
                            "type": "string",
                            "description": "Action on step failure. If set to PROCEED, the route execution will continue even if the step execution fails",
                            "enum": [
                                "FAIL",
                                "PROCEED"
                            ]
                        },
                        "linePaddingCharacter": {
                            "type": "string",
                            "description": "Specify line padding character as valid Unicode escape sequence. Example : \\u0043\n",
                            "minLength": 0,
                            "maxLength": 32
                        },
                        "linePaddingLength": {
                            "type": "integer",
                            "description": "Line padding length. Positive integer"
                        },
                        "inputCharset": {
                            "type": "string",
                            "description": "Specify the source file encoding. Example: UTF-8\n",
                            "minLength": 0,
                            "maxLength": 32
                        },
                        "outputCharset": {
                            "type": "string",
                            "description": "Specify output file encoding. If not specified, source file encoding is used",
                            "minLength": 0,
                            "maxLength": 32
                        }
                    }
                }
            ],
            "description": "A representation of a route step of type LinePadding"
        },
        "EdgeProtocol": {
            "title": "EdgeProtocol",
            "type": "object",
            "required": [
                "streaming_protocol"
            ],
            "properties": {
                "streaming_protocol": {
                    "type": "string",
                    "description": "The streaming protocol for DMZ edge",
                    "enum": [
                        "HTTP",
                        "FTP",
                        "AS2",
                        "SSH",
                        "PESIT",
                        "ADMIN"
                    ]
                },
                "port": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of port for DMZ edge on the current protocol",
                    "minimum": 1024,
                    "maximum": 65535
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Define whether the protocol is enabled to be used from the edge",
                    "default": false
                },
                "ssl_alias": {
                    "type": "string",
                    "description": "Certificate reference for DMZ edge on the current protocol."
                }
            },
            "xml": {
                "name": "protocol"
            }
        },
        "FolderMonitorSite": {
            "title": "FolderMonitorSite",
            "allOf": [
                {
                    "$ref": "#/definitions/Site"
                },
                {
                    "type": "object",
                    "required": [
                        "download.folder",
                        "download.pattern",
                        "download.pattern.type",
                        "upload.folder"
                    ],
                    "properties": {
                        "protocol": {
                            "type": "string",
                            "default": "folder"
                        },
                        "download.folder.advanced.expression.enabled": {
                            "type": "string",
                            "description": "When it is 'true' the download folder is evaluated using expression language.",
                            "default": "false"
                        },
                        "download.folder": {
                            "type": "string",
                            "description": "Specify the download folder. When 'download.folder.advanced.expression.enabled' is checked the download folder is evaluated using expression language.",
                            "default": ""
                        },
                        "download.pattern.advanced.expression.enabled": {
                            "type": "string",
                            "description": "When it is 'true' the download pattern is evaluated using expression language.",
                            "default": "false"
                        },
                        "download.pattern.type": {
                            "type": "string",
                            "description": "Specify the download pattern type. Pattern matching expression supports 'glob' and 'regex' syntaxes.When the pattern type is \"File Globbing\" then the String representation of the filename is matched using a limited pattern language that resembles regular expressions but with a simpler syntax.",
                            "default": "glob"
                        },
                        "download.pattern": {
                            "type": "string",
                            "description": "Specify the download pattern.",
                            "default": ""
                        },
                        "download.pattern.case.sensitive": {
                            "type": "string",
                            "description": "Defines whether the download pattern is case sensitive.",
                            "default": "true"
                        },
                        "download.subfolder.max.depth": {
                            "type": "string",
                            "description": "Specify the maximum depth of the subfolders to monitor.",
                            "default": "1"
                        },
                        "download.subfolder.pattern.type": {
                            "type": "string",
                            "description": "Specify the dowlnload pattern type. Pattern matching expression supports 'glob' and 'regex' syntaxes.When the pattern type is \"File Globbing\" then the String representation of the filename is matched using a limited pattern language that resembles regular expressions but with a simpler syntax.",
                            "default": "glob"
                        },
                        "download.subfolder.pattern": {
                            "type": "string",
                            "description": "Specify the pattern used to match folder names to determine whether to apply the download pattern to the folder.",
                            "default": ""
                        },
                        "download.subfolder.pattern.case.sensitive": {
                            "type": "string",
                            "description": "Defines whether the subfolder download pattern is case sensitive.",
                            "default": "true"
                        },
                        "pta.IN.do.as": {
                            "type": "string",
                            "description": "Specify a value to receive the file with a different name. An expression language can be used to specify a file name e.g. ${stenv['target']}_${random()}."
                        },
                        "upload.folder": {
                            "type": "string",
                            "description": "Specify the upload folder.",
                            "default": ""
                        },
                        "upload.folder.expressionsupport": {
                            "type": "string",
                            "description": "When it is 'true' the upload folder is evaluated using expression language.",
                            "default": "false"
                        },
                        "upload.folder.autocreate": {
                            "type": "string",
                            "description": "Defines if the Upload Folder will be automatically created if it doesn't exist.The automatically created folder will be owned by the user running the SecureTransport TM Server process. Privileges are calculated according to the OS umask (not the Users.DefaultUmask Server Configuration parameter). It can be '0' or '1'.",
                            "default": "false"
                        },
                        "upload.folder.overridable": {
                            "type": "string",
                            "description": "Defines if the upload folder can be modified by the Send To Partner routing step. It can be '0' or '1'.",
                            "default": "false"
                        },
                        "pta.OUT.do.as": {
                            "type": "string",
                            "description": "Specify a value to send the file with a different name. An expression language can be used to specify a file name e.g. ${stenv['target']}_${random()}."
                        },
                        "pta.on.permfail.OUT.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the destination file on failure after the transmission. It can be 'true' or 'false'."
                        },
                        "pta.on.permfail.OUT.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder."
                        },
                        "pta.on.success.OUT.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder."
                        }
                    }
                }
            ],
            "description": "A representation of an Folder Monitor site."
        },
        "SubtransmissionStatus": {
            "title": "SubtransmissionStatus",
            "type": "object",
            "properties": {
                "completion": {
                    "type": "string",
                    "description": "Operation status value"
                },
                "comment": {
                    "type": "string",
                    "description": "Subtransmission comment"
                },
                "result": {
                    "type": "string",
                    "description": "The result of the operation (usually a filename)"
                },
                "operationType": {
                    "type": "string",
                    "description": "The subtransmisstion operation type."
                }
            },
            "xml": {
                "name": "subtransmissionStatus"
            }
        },
        "EdgeProxies": {
            "title": "EdgeProxies",
            "type": "object",
            "properties": {
                "proxies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EdgeProxy"
                    }
                }
            },
            "description": "The list of edge proxies.",
            "xml": {
                "name": "proxies"
            }
        },
        "AccountContact": {
            "title": "AccountContact",
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The account email",
                    "maxLength": 255
                },
                "phone": {
                    "type": "string",
                    "description": "The account phone.",
                    "maxLength": 80
                }
            },
            "xml": {
                "name": "accountContact"
            }
        },
        "ConfigurationOptionsCount": {
            "title": "ConfigurationOptionsCount",
            "type": "object",
            "properties": {
                "profile": {
                    "type": "string",
                    "description": "The name of the profile to which options belong"
                },
                "node": {
                    "type": "string",
                    "description": "The name of the node to which options belong"
                },
                "filter": {
                    "type": "string",
                    "description": "The search filter of the options"
                },
                "count": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of all configuration options."
                }
            },
            "xml": {
                "name": "optionsCount"
            }
        },
        "ConfigurationProfile": {
            "title": "ConfigurationProfile",
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the configuration profile"
                },
                "parent": {
                    "type": "string",
                    "description": "The name of the parent configuration profile. If a configuration profile has no parent one then this property will not be set for the configuration profile and respectively not returned from the ST server.\n"
                }
            },
            "xml": {
                "name": "configurationProfile"
            }
        },
        "RouteStep": {
            "title": "RouteStep",
            "type": "object",
            "required": [
                "actionOnStepFailure",
                "autostart",
                "status",
                "type"
            ],
            "discriminator": "type",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Route step Id",
                    "minLength": 0,
                    "maxLength": 32
                },
                "type": {
                    "type": "string",
                    "description": "Route step type. ExecuteRoute step links the routes of type TEMPLATE and SIMPLE. The next steps are used with SIMPLE route type."
                },
                "status": {
                    "type": "string",
                    "description": "Route step status",
                    "enum": [
                        "ENABLED",
                        "DISABLED"
                    ]
                },
                "autostart": {
                    "type": "boolean",
                    "description": "Step autostart: true or false. Default is false\n",
                    "default": false
                },
                "precedingStep": {
                    "type": "string",
                    "description": "Preceding step id",
                    "minLength": 0,
                    "maxLength": 32
                },
                "executeRoute": {
                    "type": "string",
                    "description": "SIMPLE route id.",
                    "minLength": 0,
                    "maxLength": 32
                },
                "actionOnStepFailure": {
                    "type": "string",
                    "description": "Action with Route on step failure",
                    "enum": [
                        "PROCEED",
                        "FAIL"
                    ]
                }
            },
            "xml": {
                "name": "step"
            }
        },
        "LogEntryMaintApplication": {
            "title": "LogEntryMaintApplication",
            "allOf": [
                {
                    "$ref": "#/definitions/Application"
                },
                {
                    "type": "object",
                    "required": [
                        "dayMode",
                        "daysKeepingDataInFiles",
                        "exportDir",
                        "recordsPerFile",
                        "timeKeepingDataInDb"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "LogEntryMaint"
                        },
                        "timeKeepingDataInDb": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Specify how old log entries will be when they are deleted in terms of days, hours, or minutes. You cannot enter spaces-only values in this field.\n"
                        },
                        "exportDir": {
                            "type": "string",
                            "format": "int32",
                            "description": "A full directory path specifying where the export files are stored. If you are exporting from an Oracle database, you must fill in the name of the directory defined in the Oracle database ,for example, ST_DMPDIR. The value of this property will be set automatically for the folder property of the application.\n"
                        },
                        "daysKeepingDataInFiles": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Specify when SecureTransport deletes old exported log entry data. The value can be specified in days/hours/minutes depending on the dayMode property.\n"
                        },
                        "recordsPerFile": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Specify the maximum number of records that can exist in an exported file. When this value is exceeded, SecureTransport starts to export the server log entries in a new file.\n"
                        },
                        "dayMode": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The day mode. Set value 0 for days; 1 for hours or 2 for hours."
                        }
                    }
                }
            ],
            "description": "A representation of a LogEntryMaint application."
        },
        "ClusterNodesInformation": {
            "title": "ClusterNodesInformation",
            "type": "object",
            "required": [
                "isCluster"
            ],
            "properties": {
                "isCluster": {
                    "type": "boolean",
                    "description": "Define whether this a cluster environment i.e. at least one inserted node (true if in cluster environment, otherwise false)\n",
                    "default": false
                },
                "clusterMode": {
                    "type": "string",
                    "description": "The cluster mode"
                },
                "clusterNodes": {
                    "type": "array",
                    "description": "List of current cluster nodes",
                    "items": {
                        "$ref": "#/definitions/ClusterNodeInformation"
                    }
                }
            },
            "xml": {
                "name": "clusterNodesInformation"
            }
        },
        "SentinelLinkDataMaintApplication": {
            "title": "SentinelLinkDataMaintApplication",
            "allOf": [
                {
                    "$ref": "#/definitions/Application"
                },
                {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "SentinelLinkDataMaint"
                        }
                    }
                }
            ],
            "description": "A representation of a SentinelLinkDataMaint application."
        },
        "AdvancedRoutingApplication": {
            "title": "AdvancedRoutingApplication",
            "allOf": [
                {
                    "$ref": "#/definitions/Application"
                },
                {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "AdvancedRouting"
                        }
                    }
                }
            ],
            "description": "A representation of an AdvancedRouting application."
        },
        "TransferProfiles": {
            "title": "TransferProfiles",
            "type": "object",
            "properties": {
                "transferProfiles": {
                    "type": "array",
                    "description": "Collection of the transfer profiles.",
                    "items": {
                        "$ref": "#/definitions/TransferProfile"
                    }
                }
            },
            "xml": {
                "name": "transferProfiles"
            }
        },
        "PeSITSite": {
            "title": "PeSITSite",
            "allOf": [
                {
                    "$ref": "#/definitions/Site"
                },
                {
                    "type": "object",
                    "properties": {
                        "protocol": {
                            "type": "string",
                            "default": "pesit"
                        },
                        "host": {
                            "type": "string",
                            "description": "Specify the remote partner host.",
                            "default": ""
                        },
                        "port": {
                            "type": "string",
                            "description": "Specify the remote partner port.",
                            "default": ""
                        },
                        "dmz": {
                            "type": "string",
                            "description": "Specify the remote partner network zone. It can be 'any', 'none', 'Default' or custom network zone.",
                            "default": "none"
                        },
                        "useServerPassword": {
                            "type": "string",
                            "description": "Specify if the server password should be set. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "useServerPasswordExpr": {
                            "type": "string",
                            "description": "Specify whether to have server password expressions or not. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "server.password": {
                            "type": "string",
                            "description": "Specify the server password encrypted in 'AES128'. This property should be set if 'useServerPassword' is 'true'.",
                            "default": ""
                        },
                        "usePartnerPassword": {
                            "type": "string",
                            "description": "Specify if the partner password should be set. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "usePartnerPasswordExpr": {
                            "type": "string",
                            "description": "Specify whether to have partner password expressions or not. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "partner.password": {
                            "type": "string",
                            "description": "Specify the partner password encrypted in 'AES128'. This property should be set if 'usePartnerPassword' is 'true'.",
                            "default": ""
                        },
                        "compression": {
                            "type": "string",
                            "description": "Specify the transfer compression. It can be 0 (None), 1 (Horizontal), 2 (Vertical) or 3 (Both).",
                            "default": "0"
                        },
                        "resync.allowed": {
                            "type": "string",
                            "description": "Specify if the resync is allowed.",
                            "default": "0"
                        },
                        "checkpoint.interval": {
                            "type": "string",
                            "description": "Specify the checkpoint interval.",
                            "default": "1024"
                        },
                        "checkpoint.window": {
                            "type": "string",
                            "description": "Specify the checkpoint window.",
                            "default": "4"
                        },
                        "bufferSize": {
                            "type": "string",
                            "description": "Specify the PeSIT buffer size. This option is used when SecureTransport is acting as a PeSIT client. Specifies the maximum size of a PeSIT data element (PI 25). Should be greater than 800 bytes and less than 65535.",
                            "default": "8192"
                        },
                        "send.message": {
                            "type": "string",
                            "description": "Specify a user send message. An expression language can be used e.g. ${pesit.serverID}.",
                            "default": ""
                        },
                        "receive.message": {
                            "type": "string",
                            "description": "Specify a user receive message.",
                            "default": ""
                        },
                        "ptcp.connections": {
                            "type": "string",
                            "description": "Specify the number of parallel TCP connections.",
                            "default": "1"
                        },
                        "ptcp.packetSize": {
                            "type": "string",
                            "description": "Specify the TCP packet size",
                            "default": "3000"
                        },
                        "socket.SendReceive.BufferSize": {
                            "type": "string",
                            "description": "This option is used when SecureTransport is acting as a PeSIT client. Specifies the TCP Socket maximum send and receive buffer size in bytes. This setting corresponds to SO_SNDBUF and SO_RCVBUF socket parameters.",
                            "default": "65536"
                        },
                        "ptcp.connectRetryCount": {
                            "type": "string",
                            "description": "This option is used when SecureTransport is acting as a PeSIT client. It specifies the maximum times the SecureTransport will attempt to re-establish a connection with the remote server in case of \"Unknown session\" error.",
                            "default": "10"
                        },
                        "issecure": {
                            "type": "string",
                            "description": "Specify if TLS/SSL is used or not. It can be '0' or '1'.",
                            "default": "1"
                        },
                        "verifyCert": {
                            "type": "string",
                            "description": "This option is used when SecureTransport is acting as a PeSIT client. Verify whether the server certificate of the partner is chained to a trusted root. This property can be set if TLS/SSL (issecure) is used. It can be '0' or '1'.",
                            "default": "0"
                        },
                        "fipsMode": {
                            "type": "string",
                            "description": "Specify if the FIPS Transfer Mode is enabled or disabled. This property can be set if TLS/SSL (issecure) is used. It can be '0' or '1'.",
                            "default": "0"
                        },
                        "cftCompatibleSslMode": {
                            "type": "string",
                            "description": "Enable Legasy transfer CFT compatible SSL mode. Legacy Transfer CFT are versions prior to 2.7.1 SP3 or 3.0.1. This property can be set if TLS/SSL (issecure) is used and the 'Clear Command Channel' is enabled. It can be '0' or '1'.",
                            "default": "0"
                        }
                    }
                }
            ],
            "description": "A representation of an PeSIT site."
        },
        "UserClassBodyData": {
            "title": "UserClassBodyData",
            "type": "object",
            "properties": {
                "className": {
                    "type": "string",
                    "description": "User class name."
                },
                "userType": {
                    "type": "string",
                    "description": "User class type."
                },
                "order": {
                    "type": "integer",
                    "description": "The order in which user class is saved in database"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Is user class currently enabled."
                },
                "userName": {
                    "type": "string",
                    "description": "User class username."
                },
                "group": {
                    "type": "string",
                    "description": "Group of user class"
                },
                "address": {
                    "type": "string",
                    "description": "User class host."
                },
                "expression": {
                    "type": "string",
                    "description": "User class expression."
                }
            },
            "xml": {
                "name": "userClass"
            }
        },
        "MultiPart": {
            "title": "MultiPart",
            "type": "object",
            "example": "--<BOUNDARY_NAME>    # this name will be used in the Content type flag\nContent-Type:  <type>     # json and xml format can be used for the certificate data\n  <data of the imported key > \n--<BOUNDARY_NAME>\nContent-Type:  <type>      # for the certificate bodies accepted Content-Type is one of: text/plain or application/octet-stream\n  <body of the public key which will be imported > \n--<BOUNDARY_NAME>--    # add two hyphens to put end of the boundary\n"
        },
        "CertificateRequests": {
            "title": "CertificateRequests",
            "type": "object",
            "properties": {
                "certificateRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CertificateRequest"
                    }
                }
            },
            "xml": {
                "name": "certificateRequests"
            }
        },
        "PrivateCertificate": {
            "title": "PrivateCertificate",
            "allOf": [
                {
                    "$ref": "#/definitions/Certificate"
                },
                {
                    "type": "object",
                    "required": [
                        "account",
                        "name"
                    ],
                    "properties": {
                        "usage": {
                            "type": "string",
                            "default": "private"
                        },
                        "name": {
                            "type": "string"
                        },
                        "account": {
                            "type": "string"
                        }
                    }
                }
            ],
            "description": "A representation of a private certificate."
        },
        "HumanSystemApplication": {
            "title": "HumanSystemApplication",
            "allOf": [
                {
                    "$ref": "#/definitions/Application"
                },
                {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "HumanSystem"
                        }
                    }
                }
            ],
            "description": "A representation of a HumanSystem application."
        },
        "Rule": {
            "title": "Rule",
            "type": "object",
            "required": [
                "clientAddress",
                "enabled",
                "name",
                "type"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the login restriction rule. The name can not contain characters \"/\", \";\" and \"'\"\n",
                    "pattern": "^(([^\\/\\;\\']*))$"
                },
                "enabled": {
                    "type": "string",
                    "description": "Define whether the rule should be enabled (true)or disabled (false). Each rule may be temporarily disabled and in that case it will not be used until it is enabled again\n",
                    "enum": [
                        "true",
                        "false"
                    ]
                },
                "type": {
                    "type": "string",
                    "description": "The type of the login restriction rule. The type could be either `ALLOW` and defines a condition (IP and/or expression) to allow login or could be `DENY` and defines a condition (IP and/or expression) to deny login. The rules of the same type are always evaluated as one set of rules - the order is not significant. But the order of evaluation 'AllOW' and 'DENY' sets, depend on the type of the policy they belong to\n",
                    "enum": [
                        "ALLOW",
                        "DENY"
                    ],
                    "default": "ALLOW"
                },
                "clientAddress": {
                    "type": "string",
                    "description": "The client address for the login restriction rule. When the current rule is evaluated it is compared with this client address. If there is no match then the rule is assumed to not match. If the current client address matches to the one defined in the rule and any additional conditions defined in the rule(for example expressions) also match (all of them) then the rule is assumed to match to the current user connection and is applied. \n\nThe value of the client address could be one of:\n  - Specific IPv4 address\n  - Specific IPv6 address\n  - Specific IPv4 address combined with a network mask. Example: 172.23.34.0/24\n  - Specific IPv6 address combined with a network mask. Example: FC00:1234:56::/120\n  - Specific fully qualified host name. Example: host.domain.com\n  - Specific fully qualified host name, which is allowed to contain the * wildcard character. Example: *.domain.com\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression that should be evaluated to true in order for the rule to apply. This expression should be in the form of the SecureTransport expression language. It may include any environment variables, session attributes or other elements which are available at login time. For example it may include expression which evaluates the user class of the current user and compares it with some value. This expression may be not set - empty string or null value, in which case it would not be taken into account (cosider it true)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of a login restriction rule."
                }
            },
            "xml": {
                "name": "rule"
            }
        },
        "SubtransmissionStatuses": {
            "title": "SubtransmissionStatuses",
            "type": "object",
            "properties": {
                "subtransmissionStatuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubtransmissionStatus"
                    }
                }
            },
            "xml": {
                "name": "subtransmissionStatuses"
            }
        },
        "AddressBookContact": {
            "title": "AddressBookContact",
            "type": "object",
            "required": [
                "fullName",
                "primaryEmail"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the address book contact"
                },
                "fullName": {
                    "type": "string",
                    "description": "The full name of the address book contact"
                },
                "primaryEmail": {
                    "type": "string",
                    "description": "The primary email of the address book contact."
                }
            },
            "xml": {
                "name": "contact"
            }
        },
        "TransferEntry": {
            "title": "TransferEntry",
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "description": "The status of the transfer",
                    "enum": [
                        "In Progress",
                        "Processed",
                        "Failed",
                        "Aborted",
                        "Pending receipt",
                        "Failed Subtransmission",
                        "Paused",
                        "Failed Transfer Resubmit"
                    ]
                },
                "resubmitted": {
                    "type": "boolean",
                    "description": "Defines whether the transfer was resubmitted"
                },
                "secure": {
                    "type": "boolean",
                    "description": "Defines whether the transfer occurred over secure connection",
                    "default": false
                },
                "account": {
                    "type": "string",
                    "description": "The name of the account that performed the transfer"
                },
                "login": {
                    "type": "string",
                    "description": "The user login name used for this transfer"
                },
                "direction": {
                    "type": "string",
                    "description": "Define the transfer direction",
                    "enum": [
                        "Incoming",
                        "Outgoing"
                    ]
                },
                "actionBy": {
                    "type": "string",
                    "description": "Defines whether the transfer is server or client initiated",
                    "enum": [
                        "Server",
                        "User"
                    ]
                },
                "filename": {
                    "type": "string",
                    "description": "The name of the transferred file"
                },
                "filesize": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Transfered file size"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used to transfer the file",
                    "enum": [
                        "as2",
                        "ftp",
                        "http",
                        "ssh",
                        "pesit",
                        "folder",
                        "adhoc",
                        "sharepoint",
                        "smb",
                        "http-generic",
                        "amazonS3"
                    ]
                },
                "startTime": {
                    "type": "string",
                    "description": "The time when transfer started"
                },
                "duration": {
                    "type": "string",
                    "description": "Defines the time when transfer is finished"
                },
                "operationIndex": {
                    "type": "string",
                    "description": "The operation index of the transfer. It could be '(none)' or some ID."
                },
                "coreId": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "transferEntry"
            }
        },
        "RouteStepExternalScript": {
            "title": "RouteStepExternalScript",
            "allOf": [
                {
                    "$ref": "#/definitions/RouteStep"
                },
                {
                    "type": "object",
                    "required": [
                        "actionOnStepFailure",
                        "scriptPath"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "ExternalScript"
                        },
                        "scriptPath": {
                            "type": "string",
                            "description": "String or expression with an absolute path to external script. Example: For Unix environment: /usr /bin/env bash -c ${FILEDRIVEHOME}/bin/agents/example.sh For Windows environment: cmd /c ${FILEDRIVEHOME}\\bin\\agents\\example.bat\n",
                            "minLength": 0,
                            "maxLength": 256
                        },
                        "actionOnStepFailure": {
                            "type": "string",
                            "description": "Action on step failure. If set to PROCEED, the route execution will continue even if the step execution fails",
                            "enum": [
                                "FAIL",
                                "PROCEED"
                            ]
                        },
                        "logOutput": {
                            "type": "string",
                            "description": "The script will genarate standard output to Server log",
                            "enum": [
                                "true",
                                "false"
                            ],
                            "default": "false"
                        }
                    }
                }
            ],
            "description": "A representation of a route step of type ExternalScript"
        },
        "Site": {
            "title": "Site",
            "type": "object",
            "required": [
                "account",
                "name",
                "protocol"
            ],
            "discriminator": "protocol",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the site"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the site"
                },
                "account": {
                    "type": "string",
                    "description": "The account for which the site is created"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the site. It could be 'as2', 'ftp', 'http', 'ssh', 'pesit', 'folder', 'adhoc', 'cd', 'sharepoint', 'smb', 'http-generic' or 'amazonS3'"
                },
                "siteTemplate": {
                    "type": "string",
                    "description": "The site template of the site"
                },
                "transferType": {
                    "type": "string",
                    "description": "The transfer type of the site. It can be unspecified (N), internal (I), partner(E)",
                    "enum": [
                        "N",
                        "I",
                        "E"
                    ],
                    "default": "N"
                },
                "maxConcurrentConnection": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The max concurrent connection of the site",
                    "default": 0
                },
                "default": {
                    "type": "boolean",
                    "description": "Defines whether it is a default site. Only site from type PeSIT can be marked as 'Default'",
                    "default": false
                },
                "accessLevel": {
                    "type": "string",
                    "description": "The access level for this certificate.",
                    "enum": [
                        "PRIVATE",
                        "PUBLIC",
                        "BUSINESS_UNIT"
                    ]
                }
            },
            "xml": {
                "name": "site"
            }
        },
        "RouteStepsCharsets": {
            "title": "RouteStepsCharsets",
            "type": "object",
            "properties": {
                "charsets": {
                    "type": "array",
                    "xml": {
                        "name": "charset"
                    },
                    "description": "Collection of all supported charsets in the ST server.",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "xml": {
                "name": "routeStepsCharsets"
            }
        },
        "AuthenticationActionResult": {
            "title": "AuthenticationActionResult",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Authentication result message."
                }
            },
            "xml": {
                "name": "authenticationActionResult"
            }
        },
        "Applications": {
            "title": "Applications",
            "type": "object",
            "properties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Application"
                    }
                }
            },
            "xml": {
                "name": "applications"
            }
        },
        "TrustedCertificate": {
            "title": "TrustedCertificate",
            "allOf": [
                {
                    "$ref": "#/definitions/Certificate"
                },
                {
                    "type": "object",
                    "properties": {
                        "usage": {
                            "type": "string",
                            "default": "trusted"
                        }
                    }
                }
            ],
            "description": "A representation of a trusted certificate."
        },
        "Administrator": {
            "title": "Administrator",
            "type": "object",
            "properties": {
                "loginName": {
                    "type": "string",
                    "description": "The name of the administrator"
                },
                "roleName": {
                    "type": "string",
                    "description": "The role name of the administrator"
                },
                "roleType": {
                    "type": "string",
                    "description": "The role type of the administrator",
                    "enum": [
                        "Master",
                        "Limited"
                    ]
                },
                "localAuthentication": {
                    "type": "boolean",
                    "description": "Clarifies whether the administator is being authenticated by ST or external service."
                },
                "passwordExpired": {
                    "type": "boolean",
                    "description": "Clarifies whether the administator's password is expired."
                },
                "certificateDN": {
                    "type": "string",
                    "description": "Specifies the DN of the certificate used by the administrator for authentication."
                },
                "loginFailureCount": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The count of the login failures"
                },
                "lastPasswordChangeTime": {
                    "type": "string",
                    "description": "Last time the administrator's password was changed"
                },
                "lastLoginTime": {
                    "type": "string",
                    "description": "Last login time of the administrator"
                },
                "lastFailureLoginTime": {
                    "type": "string",
                    "description": "Last failure login time of the administrator"
                },
                "dualAuthentication": {
                    "type": "boolean",
                    "description": "Clarifies whether the administator is being authenticated with password and certificate or with password only."
                },
                "locked": {
                    "type": "boolean",
                    "description": "Clarifies whether the administator is enabled/active."
                },
                "parent": {
                    "type": "string",
                    "description": "Specifies the name of the parent administrator of this administrator in an administrator hierarchy."
                },
                "fullCreationPath": {
                    "type": "string",
                    "description": "Specifies the path of descendands of this administrator in an administrator hierarchy."
                },
                "canReadOnly": {
                    "type": "boolean",
                    "description": "Defines if the administrator is read only",
                    "default": false
                },
                "isMaker": {
                    "type": "boolean",
                    "description": "Defines if the administrator has Maker rights",
                    "default": false
                },
                "isChecker": {
                    "type": "boolean",
                    "description": "Defines if the administrator has Checker rights",
                    "default": false
                },
                "canCreateUsers": {
                    "type": "boolean",
                    "description": "Defines if the administrator can create users",
                    "default": false
                },
                "canUpdateUsers": {
                    "type": "boolean",
                    "description": "Defines if the administrator can update users",
                    "default": false
                },
                "canAccessHelpDesk": {
                    "type": "boolean",
                    "description": "Defines if the administrator can access help desk",
                    "default": false
                },
                "canSeeFullAuditLog": {
                    "type": "boolean",
                    "description": "Defines if the administrator can access the Audit Log",
                    "default": false
                },
                "canManageAdministrators": {
                    "type": "boolean",
                    "description": "Defines if the administrator can manage administrators",
                    "default": false
                },
                "canManageApplications": {
                    "type": "boolean",
                    "description": "Defines if the administrator can manage applications",
                    "default": false
                },
                "canManageSharedFolders": {
                    "type": "boolean",
                    "description": "Defines if the administrator can manage shared folders",
                    "default": false
                },
                "canManageBusinessUnits": {
                    "type": "boolean",
                    "description": "Defines if the administrator can manage business units",
                    "default": false
                },
                "canManageRouteTemplates": {
                    "type": "boolean",
                    "description": "Defines if the administrator can manage route templates",
                    "default": false
                },
                "canManageExternalScriptStep": {
                    "type": "boolean",
                    "description": "Defines if the administrator can manage the external script step.",
                    "default": false
                },
                "canManageLoginRestrictionPolicies": {
                    "type": "boolean",
                    "description": "Defines if the administrator can manage the login restriction policies.",
                    "default": false
                }
            },
            "xml": {
                "name": "administrator"
            }
        },
        "AdminTransferPull": {
            "title": "AdminTransferPull",
            "type": "object",
            "required": [
                "accountName",
                "destinationDirectory",
                "site"
            ],
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The account name"
                },
                "site": {
                    "type": "string",
                    "description": "The site name"
                },
                "destinationDirectory": {
                    "type": "string",
                    "description": "The destination directory"
                },
                "transferProfile": {
                    "type": "string",
                    "description": "The transfer profile name. Note: **This attribute is required in PeSIT protocol transfers only**.\n"
                }
            },
            "additionalProperties": {
                "type": "string"
            },
            "xml": {
                "name": "adminTransferPull"
            }
        },
        "AccountTemplate": {
            "title": "AccountTemplate",
            "allOf": [
                {
                    "$ref": "#/definitions/Account"
                },
                {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "template"
                        }
                    }
                }
            ],
            "description": "A representation of an account template."
        },
        "AddressBookSource": {
            "title": "AddressBookSource",
            "type": "object",
            "required": [
                "enabled",
                "id",
                "name",
                "parentGroup",
                "type"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "LOCAL",
                        "LDAP",
                        "CUSTOM"
                    ]
                },
                "parentGroup": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "description": "Address book source object."
        },
        "LoginThresholdMaintenanceApplication": {
            "title": "LoginThresholdMaintenanceApplication",
            "allOf": [
                {
                    "$ref": "#/definitions/Application"
                },
                {
                    "type": "object",
                    "required": [
                        "isUnlock"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "LoginThresholdMaintenance"
                        },
                        "isUnlock": {
                            "type": "string",
                            "description": "Define whether unlock functionality is enabled",
                            "enum": [
                                "true",
                                "false"
                            ]
                        },
                        "isReport": {
                            "type": "string",
                            "description": "If this property is set to true, a report will be sent to the specified email addresses in the emails property. If isUnlock is set to true, the report will contain a list of unlocked users. If isUnlock is set to false, the report will contain a list of locked, due to login threshold functionality, users\n",
                            "enum": [
                                "true",
                                "false"
                            ]
                        },
                        "emails": {
                            "type": "string",
                            "description": "The email address or addresses to deliver the report to. Email addresses can be separated by either a comma or a semicolon.\n"
                        },
                        "reportEmailTemplate": {
                            "type": "string",
                            "description": "The email template for the report from the Report Email Template list.",
                            "enum": [
                                "LoginThresholdReport.xhtml",
                                "AdhocDefault.xhtml",
                                "LoginThresholdNotification.xhtml",
                                "RoutingFailedNotification.xhtml",
                                "RoutingSucceededNotification.xhtml",
                                "RoutingTriggeredNotification.xhtml"
                            ],
                            "default": "LoginThresholdReport.xhtml"
                        }
                    }
                }
            ],
            "description": "A representation of a LoginThresholdMaintenance application."
        },
        "AdvancedRoutingSubscription": {
            "title": "AdvancedRoutingSubscription",
            "allOf": [
                {
                    "$ref": "#/definitions/Subscription"
                },
                {
                    "type": "object",
                    "properties": {
                        "application": {
                            "type": "string"
                        },
                        "flowAttrsMergeMode": {
                            "type": "string",
                            "description": "Specify the flow merge mode. Three options are possible: 'preserve', 'overwrite', 'append'.",
                            "default": "false"
                        },
                        "pta.on.tempfail.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on failure after the transmission. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.on.tempfail.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on temporary failure. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        },
                        "pta.on.permfail.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on failure after the transmission. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "pta.on.permfail.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder.",
                            "default": "false"
                        },
                        "triggerOnConditionEnabled": {
                            "type": "string",
                            "description": "If checked, processing of files in the subscription folder will be triggered upon a specific condition. It could be 'true' or 'false'.",
                            "default": "false"
                        },
                        "triggerOnConditionExpression": {
                            "type": "string",
                            "description": "Specify the condition on which to trigger file processing. An expression language can be used.",
                            "default": "false"
                        },
                        "submitFilterType": {
                            "type": "string",
                            "description": "Specify the submit filter type. It could be 'FILENAME_PATTERN' or 'TRIGGER_FILE_CONTENT'.\nIf 'FILENAME_PATTERN' is selected and 'submitFilenamePatternExpression' is with value '*' all files will be submitted for processing in the subscription folder.\n\nIf 'FILENAME_PATTERN' is selected and 'submitFilenamePatternExpression' is with some filename pattern, only files matching specific filename pattern will be submitted for processing.\n\nIf 'TRIGGER_FILE_CONTENT' is selected, data file names will be read from trigger file content. Each file name should be on new line. The whitespace characters before and after the file names are discarded. Also lines containing only whitespace characters are not considered as files.Trigger file format:file1.txt, file2.txt, file3.png\n",
                            "default": "false"
                        },
                        "submitFilenamePatternExpression": {
                            "type": "string",
                            "description": "Specify the file name pattern. An expression language can be used.",
                            "default": "false"
                        },
                        "ppa.on.fail.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on failure after the transmission. It can be 'true' or 'false'. This action is applied to files arrived to this folder and processed by a route package.",
                            "default": "false"
                        },
                        "ppa.on.fail.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on failure. An expression language can be used to specify a file name/folder. This action is applied to files arrived to this folder and processed by a route package.",
                            "default": "false"
                        },
                        "ppa.on.success.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the file on success after the transmission. It can be 'true' or 'false'. This action is applied to files arrived to this folder and processed by a route package.",
                            "default": "false"
                        },
                        "ppa.on.success.IN.do.move": {
                            "type": "string",
                            "description": "Specify a value to rename the file after transmission or move it to a different folder on success. An expression language can be used to specify a file name/folder. This action is applied to files arrived to this folder and processed by a route package.",
                            "default": "false"
                        },
                        "postClientDownloadType": {
                            "type": "string",
                            "description": "Specify if Post Client Download Actions will be applied to each file successfully downloaded from the subscription folder. It can be 'DELETE' or no property at all.",
                            "default": "false"
                        }
                    }
                }
            ],
            "description": "A representation of an Advanced Routing subscription."
        },
        "ReceiptVerificationResult": {
            "title": "ReceiptVerificationResult",
            "type": "object",
            "properties": {
                "fileIntegrityResult": {
                    "type": "string",
                    "description": "The file integrity result"
                },
                "signatureResult": {
                    "type": "string",
                    "description": "The signature result."
                }
            },
            "xml": {
                "name": "receiptVerificationResult"
            }
        },
        "AuditLogEntry": {
            "title": "AuditLogEntry",
            "type": "object",
            "required": [
                "configurationId",
                "dateModified",
                "id",
                "operationType"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the audit log entity"
                },
                "dateModified": {
                    "type": "string",
                    "description": "The modification date of the audit log entity"
                },
                "configurationId": {
                    "type": "string",
                    "description": "The configuration id of the node"
                },
                "operationType": {
                    "type": "string",
                    "description": "The type of the operation logged with the audit log entity",
                    "enum": [
                        "CREATE",
                        "UPDATE",
                        "DELETE",
                        "CREATE_OR_UPDATE"
                    ]
                },
                "objectType": {
                    "type": "string",
                    "description": "The type of the object for which audit log entity is added"
                },
                "objectIdentifier": {
                    "type": "string",
                    "description": "The id of the audited object"
                },
                "objectName": {
                    "type": "string",
                    "description": "The name of the audited object"
                },
                "objectString": {
                    "type": "string",
                    "description": "The string representation of the audited object"
                },
                "userName": {
                    "type": "string",
                    "description": "The name of the user who did the operation audited"
                },
                "remoteAddress": {
                    "type": "string",
                    "description": "The IP address of the remote client that sent the request"
                },
                "description": {
                    "type": "string",
                    "description": "The audit log comment."
                }
            },
            "xml": {
                "name": "auditLogEntry"
            }
        },
        "ServiceAccount": {
            "title": "ServiceAccount",
            "allOf": [
                {
                    "$ref": "#/definitions/Account"
                },
                {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "service"
                        }
                    }
                }
            ],
            "description": "A representation of a service account."
        },
        "TransferData": {
            "title": "TransferData",
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "description": "The transferred data"
                },
                "startTime": {
                    "type": "string",
                    "description": "The time when the transfer started"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the data"
                },
                "transferId": {
                    "type": "string",
                    "description": "The id of the transfer"
                },
                "receipt": {
                    "type": "boolean",
                    "description": "Defines whether the data is a receipt or not.",
                    "default": false
                }
            },
            "xml": {
                "name": "transferData"
            }
        },
        "GenericHttpSite": {
            "title": "GenericHttpSite",
            "allOf": [
                {
                    "$ref": "#/definitions/Site"
                },
                {
                    "type": "object",
                    "required": [
                        "ghttpNetworkZone"
                    ],
                    "properties": {
                        "protocol": {
                            "type": "string",
                            "default": "http-generic"
                        },
                        "ghttpUseUriEnabled": {
                            "type": "boolean",
                            "description": "Flag indicating if partner host and port or partner URL will be used",
                            "default": false
                        },
                        "ghttpHost": {
                            "type": "string",
                            "description": "The host name or IP address of the remote server to connect to",
                            "pattern": "\\S*"
                        },
                        "ghttpPort": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The port of the remote server to connect to",
                            "minimum": 0,
                            "maximum": 65535
                        },
                        "ghttpAddress": {
                            "type": "string",
                            "description": "A URL that specifies the partner host. It can also include the port and a directory",
                            "pattern": "(^$)|(^(https://|http://)?[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|])"
                        },
                        "ghttpNetworkZone": {
                            "type": "string",
                            "description": "The network zone that defines the proxy to use for transfers through the site"
                        },
                        "ghttpSecureHttpEnabled": {
                            "type": "boolean",
                            "description": "A flag indicating if the connection should be secured or not",
                            "default": false
                        },
                        "ghttpVerifyCertificateEnabled": {
                            "type": "boolean",
                            "description": "A flag indicating if there should be verification that the remote system is trusted. This verification will apply only when `ghttpSecureHttpEnabled` is set to true\n",
                            "default": false
                        },
                        "ghttpFipsModeEnabled": {
                            "type": "boolean",
                            "description": "A flag indicating if FIPS mode is enabled. If enabled - restrict HTTPS to use only FIPS 140-2 Level 1 certified cryptographic libraries. The FIPS mode enablement will apply only when `ghttpSecureHttpEnabled` is set to true\n",
                            "default": false
                        },
                        "ghttpListEnabled": {
                            "type": "boolean",
                            "description": "A flag indicating if the connector will operate in a single file download mode or will list files and then perform the download operation(s). If this property has value `true`, the connector will take as an input the result of the configured request and use it as a source for retrieving a list of files to be downloaded and then will use the first request to download each file from the list\n",
                            "default": false
                        },
                        "ghttpListUrlPath": {
                            "type": "string",
                            "description": "The HTTP server relative path that will be used to list files on the remote server:\n  - a server absolute path when specify partner using hostname (IP address) and port number - example: ```/list.php```\n  - a server relative path when specify partner using URL - example: ```list.php```\n  \nA limited expression language can be used to specify the URL. This property will be taken into account only if `ghttpListEnabled` is set to true\n"
                        },
                        "ghttpListFileExpression": {
                            "type": "string",
                            "description": "The expression for the file names that will be applied on the response for the list request to extract the files list. A Java regular expression and Secure Transprt expression language can be used to specify a pattern to match files that needs to be downloaded. A limited expression language can be used to specify the expression. This expression will be taken into account only if `ghttpListEnabled` is set to true\n"
                        },
                        "ghttpListMethod": {
                            "type": "string",
                            "description": "HTTP method to be used for the listing of files on the remote server. This property will be taken into account only if `ghttpListEnabled` is set to true",
                            "enum": [
                                "GET",
                                "POST"
                            ]
                        },
                        "ghttpListHeaders": {
                            "type": "array",
                            "description": "The HTTP headers that will be added in the HTTP request for listing files on the remote server. This property will be taken into account only if `ghttpListEnabled` is set to true.\n\nEach header should be formed as key-value pair separated with the equal sign. Example: ```[\"header=value\"]```\n",
                            "items": {
                                "type": "string"
                            }
                        },
                        "ghttpListBody": {
                            "type": "string",
                            "description": "The body of the request for listing files on the remote server. The body will be taken into account only if `ghttpListMethod` has value 'POST' and `ghttpListEnabled` is set to true. A limited expression language can be used to specify the body\n\nNote: when the body content type is `multipart/form-data` or `application/x-www-form-urlencoded` the body should be formed as key-value pairs on separate lines.\n\nExample:\n```\n   param1=value1\n   param2=value2\n```\n"
                        },
                        "ghttpListBodyContentType": {
                            "type": "string",
                            "description": "The content type of the ghttpListBody. The body content type will be taken into account only if `ghttpListMethod` has value 'POST' and `ghttpListEnabled` is set to true",
                            "enum": [
                                "multipart/form-data",
                                "application/x-www-form-urlencoded",
                                "raw"
                            ]
                        },
                        "ghttpDownloadUrlPath": {
                            "type": "string",
                            "description": "The HTTP server path used to download file(s):\n  - a server absolute path when specify partner using hostname (IP address) and port number - example: ```/download.php```\n  - a server relative path when specify partner using URL - example: ```download.php```\n\nIf `ghttpListEnabled` is set to true, this URL will be used to download single file(s) extracted from the list operation. A limited expression language can be used to specify the URL\n"
                        },
                        "ghttpDownloadMethod": {
                            "type": "string",
                            "description": "HTTP method to be used for the download operation. If `ghttpListEnabled` is set to true, this method will be used when performing all download operations for the files listed on the remote server\n",
                            "enum": [
                                "GET",
                                "POST"
                            ]
                        },
                        "ghttpDownloadHeaders": {
                            "type": "array",
                            "description": "The HTTP headers that will be added in the HTTP download request. If `ghttpListEnabled` is set to true, these headers will be added in the all HTTP download requests for the files listed on the remote server.\n\nEach header should be formed as key-value pair separated with the equal sign. Example: ```[\"header=value\"]```\n",
                            "items": {
                                "type": "string"
                            }
                        },
                        "ghttpDownloadBody": {
                            "type": "string",
                            "description": "The body of the download request. The body will be taken into account only if `ghttpDownloadMethod` has value 'POST'. If `ghttpListEnabled` is set to true, this body will be used for all download operations for the files listed on the remote server. A limited expression language can be used to specify the body.\n\nNote: when the body content type is `multipart/form-data` or `application/x-www-form-urlencoded` the body should be formed as key-value pairs on separate lines.\n\nExample:\n```\n   param1=value1\n   param2=value2\n```\n"
                        },
                        "ghttpDownloadBodyContentType": {
                            "type": "string",
                            "description": "The content type of the `ghttpDownloadBody` property. The body content type will be taken into account only if `ghttpDownloadMethod` has value 'POST'. If `ghttpListEnabled` is set to true, this body content type will be used for all download operations for the files listed on the remote server\n",
                            "enum": [
                                "multipart/form-data",
                                "application/x-www-form-urlencoded",
                                "raw"
                            ]
                        },
                        "ghttpReceiveFileAsEnabled": {
                            "type": "boolean",
                            "description": "A flag indicating if receiving file with different name than the original one is enabled",
                            "default": false
                        },
                        "ghttpReceiveFileAsExpression": {
                            "type": "string",
                            "description": "The value to be used as different name for the received file. A limited expression language can be used to specify the file name. This property will be taken into account only if `ghttpReceiveFileAsEnabled` is set to true"
                        },
                        "ghttpUploadUrlPath": {
                            "type": "string",
                            "description": "The HTTP server path to be used for uploading files to the remote server:\n  - a server absolute path when specify partner using hostname (IP address) and port number - example: ```/upload.php```\n  - a server relative path when specify partner using URL - example: ```upload.php```\n  \nA limited expression language can be used to specify the URL\n"
                        },
                        "ghttpUploadMethod": {
                            "type": "string",
                            "description": "The HTTP method to be used when uploading files to a remote server",
                            "enum": [
                                "PUT",
                                "POST"
                            ]
                        },
                        "ghttpUploadHeaders": {
                            "type": "array",
                            "description": "The HTTP headers that will be added in the HTTP request for upload.\n\nEach header should be formed as key-value pair separated with the equal sign. Example: ```[\"header=value\"]```\n",
                            "items": {
                                "type": "string"
                            }
                        },
                        "ghttpUploadBody": {
                            "type": "string",
                            "description": "The body of the request for uploading files on the remote server. The body will be taken into account only if `ghttpUploadMethod` has value 'POST'. A limited expression language can be used to specify the body.\n\nNote: the body should be formed as key-value pairs on separate lines.\n\nExample:\n```\n   param1=value1\n   param2=value2\n```\n"
                        },
                        "ghttpUploadBodyContentType": {
                            "type": "string",
                            "description": "The content type of the `ghttpUploadBody`. The body content type will be taken into account only if `ghttpUploadMethod` has value 'POST'\n",
                            "enum": [
                                "multipart/form-data"
                            ]
                        },
                        "ghttpSendFileAsEnabled": {
                            "type": "boolean",
                            "description": "A flag indicating if sending file with different name is enabled",
                            "default": false
                        },
                        "ghttpSendFileAsExpression": {
                            "type": "string",
                            "description": "The new file name to be used when sending the file. A limited expression language can be used to specify the file name. This property will be taken into account only if `ghttpSendFileAsEnabled` is set to true"
                        },
                        "clientLocalCertificate": {
                            "type": "string",
                            "description": "The client certificate ID used for mutual authentication"
                        },
                        "ghttpUserName": {
                            "type": "string",
                            "description": "The user name used to login to a remote HTTP server"
                        },
                        "ghttpUsePasswordEnabled": {
                            "type": "boolean",
                            "description": "A flag defining whether to use specified password for login to a remote HTTP server or not",
                            "default": false
                        },
                        "ghttpPassword": {
                            "type": "string",
                            "description": "The password used to login to a remote HTTP server. This property will be taken into account only if `ghttpUsePasswordEnabled` is set to true"
                        },
                        "ghttpFormAuthenticationEnabled": {
                            "type": "boolean",
                            "description": "A flag indicating if form authentication will be used",
                            "default": false
                        },
                        "ghttpFormUrlPath": {
                            "type": "string",
                            "description": "The HTTP server path used for sending the form authentication request:\n  - a server absolute path when specify partner using hostname (IP address) and port number - example: ```/form.php```\n  - a server relative path when specify partner using URL - example: ```form.php```\n  \nA limited expression language can be used to specify the URL. This property will be taken into account only if `ghttpFormAuthenticationEnabled` is set to true\n"
                        },
                        "ghttpFormMethod": {
                            "type": "string",
                            "description": "HTTP method to be used for the form authentication to the remote server. This property will be taken into account only if `ghttpFormAuthenticationEnabled` is set to true",
                            "enum": [
                                "GET",
                                "POST"
                            ]
                        },
                        "ghttpFormHeaders": {
                            "type": "array",
                            "description": "The HTTP headers that will be added in the HTTP request for form authentication. This property will be taken into account only if `ghttpFormAuthenticationEnabled` is set to true\n\nEach header should be formed as key-value pair separated with the equal sign. Example: ```[\"header=value\"]```\n",
                            "items": {
                                "type": "string"
                            }
                        },
                        "ghttpFormBody": {
                            "type": "string",
                            "description": "The body of the form authentication request. The body will be taken into account only if `ghttpFormMethod` has value 'POST' and `ghttpFormAuthenticationEnabled` is set to true. A limited expression language can be used to specify the body\n\nNote: when the body content type is `multipart/form-data` or `application/x-www-form-urlencoded` the body should be formed as key-value pairs on separate lines.\n\nExample:\n```\n   param1=value1\n   param2=value2\n```\n"
                        },
                        "ghttpFormBodyContentType": {
                            "type": "string",
                            "description": "The content type of the `ghttpFormBody`. The body content type will be taken into account only if `ghttpFormMethod` has value 'POST' and `ghttpFormAuthenticationEnabled` is set to true\n",
                            "enum": [
                                "multipart/form-data",
                                "application/x-www-form-urlencoded",
                                "raw"
                            ]
                        },
                        "ghttpFileListResponseSize": {
                            "type": "string",
                            "description": "The maximum size in KB of the file list response to handle. If the response exceeds this value, only the specified number of bytes will be processed. The default value is `\"100\"` KB\n"
                        },
                        "ghttpSslCipherSuites": {
                            "type": "array",
                            "description": "The cipher suites to be used for SSL connection. The cipher suites must be comma separated. The default value is `[\"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\", \"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384\",\n\"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\", \"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\",\n\"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\", \"TLS_DHE_DSS_WITH_AES_256_GCM_SHA384\",\n\"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256\", \"TLS_DHE_RSA_WITH_AES_256_CBC_SHA256\",\n\"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\", \"TLS_DHE_DSS_WITH_AES_128_GCM_SHA256\",\n\"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256\", \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\",\n\"TLS_RSA_WITH_AES_256_CBC_SHA256\", \"TLS_EMPTY_RENEGOTIATION_INFO_SCSV\"]`\n",
                            "items": {
                                "type": "string"
                            }
                        },
                        "ghttpSslProtocol": {
                            "type": "string",
                            "description": "The SSL protocol to be used for SSL connection. The default value is `\"TLS\"`\n"
                        },
                        "ghttpSslProtocols": {
                            "type": "array",
                            "description": "The enabled SSL protocols. The protocols must be comma separated. The default value is `[\"TLSv1.2\"]`\n",
                            "items": {
                                "type": "string"
                            }
                        },
                        "ghttpReceiveTimeout": {
                            "type": "string",
                            "description": "The socket timeout in seconds. Any non-zero time out will block the input stream associated with the socket with this amount of time. A timeout of zero is interpreted as an infinite timeout. The default value is `\"25\"` seconds\n"
                        },
                        "ghttpConnectTimeout": {
                            "type": "string",
                            "description": "The connection timeout in seconds. A timeout of zero is interpreted as an infinite timeout. The connection will then block until established or an error occurs. The default value is `\"25\"` seconds\n"
                        },
                        "ghttpMaxRedirects": {
                            "type": "string",
                            "description": "The maximum number of redirects to be followed. The limit on number of redirects is intended to prevent infinite loops. The default value is `\"1\"` redirect.\n"
                        }
                    }
                }
            ],
            "description": "A representation of an GenericHttp site."
        },
        "Schedules": {
            "title": "Schedules",
            "type": "object",
            "properties": {
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Schedule"
                    }
                }
            },
            "xml": {
                "name": "schedules"
            }
        },
        "UnlicensedAccountMaintApplication": {
            "title": "UnlicensedAccountMaintApplication",
            "allOf": [
                {
                    "$ref": "#/definitions/Application"
                },
                {
                    "type": "object",
                    "required": [
                        "inactivePeriod"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "UnlicensedAccountMaint"
                        },
                        "inactivePeriod": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Specify how long in days an unlicensed account must be inactive before it is deleted."
                        }
                    }
                }
            ],
            "description": "A representation of an UnlicensedAccountMaint application."
        },
        "TransferLogDetails": {
            "title": "TransferLogDetails",
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "description": "The status of the transfer"
                },
                "startTime": {
                    "type": "string",
                    "description": "The time when the transfer started"
                },
                "duration": {
                    "type": "string",
                    "description": "The transfer duration"
                },
                "account": {
                    "type": "string",
                    "description": "The name of the account that performed the transfer"
                },
                "login": {
                    "type": "string",
                    "description": "The user login name used for this transfer"
                },
                "userClass": {
                    "type": "string",
                    "description": "The user class. By default the user class can be `VirtClass` or `RealClass`"
                },
                "userType": {
                    "type": "string",
                    "description": "The user type"
                },
                "application": {
                    "type": "string",
                    "description": "The application of the transfer"
                },
                "transferType": {
                    "type": "string",
                    "description": "The transfer type",
                    "enum": [
                        "Unspecified",
                        "Internal",
                        "Partner"
                    ]
                },
                "transferSite": {
                    "type": "string",
                    "description": "The transfer site"
                },
                "file": {
                    "type": "string",
                    "description": "The transferred file"
                },
                "size": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The size of the transferred file"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol of the transfer",
                    "enum": [
                        "as2",
                        "ftp",
                        "http",
                        "ssh",
                        "pesit",
                        "folder",
                        "adhoc",
                        "sharepoint",
                        "smb",
                        "http-generic",
                        "amazonS3"
                    ]
                },
                "mode": {
                    "type": "string",
                    "description": "The transfer mode",
                    "enum": [
                        "BINARY",
                        "ASCII",
                        "EBCDIC",
                        "EBCDIC NATIVE"
                    ]
                },
                "remoteHost": {
                    "type": "string",
                    "description": "The remote host"
                },
                "remoteFolder": {
                    "type": "string",
                    "description": "The remote folder"
                },
                "accountFolder": {
                    "type": "string",
                    "description": "The account folder"
                },
                "realFile": {
                    "type": "string",
                    "description": "The real file path"
                },
                "transferId": {
                    "type": "string",
                    "description": "The id of the transfer"
                },
                "sessionId": {
                    "type": "string",
                    "description": "The session ID of the transfer"
                },
                "archivedAs": {
                    "type": "string",
                    "description": "The name under which the transferred file is archived"
                },
                "successMessage": {
                    "type": "string",
                    "description": "The transfer success message"
                },
                "errorMessage": {
                    "type": "string",
                    "description": "The transfer error message"
                },
                "pesitAcknowledge": {
                    "type": "string",
                    "description": "The PeSIT acknowledge"
                },
                "operationIndex": {
                    "type": "string",
                    "description": "The transfer's operation index"
                },
                "protocolCommands": {
                    "type": "string",
                    "description": "The transfer protocol commands"
                },
                "coreId": {
                    "type": "string"
                },
                "subtransmissionStatuses": {
                    "description": "Status of the subtransmission operations (if there are any)",
                    "$ref": "#/definitions/SubtransmissionStatuses"
                },
                "requestEntity": {
                    "type": "string",
                    "description": "Representation of the rest api call that initiated the transfer(if submitted through the ST RESTful API)."
                },
                "additionalInformation": {
                    "type": "string",
                    "description": "The additional information related to this transfer."
                }
            },
            "xml": {
                "name": "transferLogDetails"
            }
        },
        "BasicApplication": {
            "title": "BasicApplication",
            "allOf": [
                {
                    "$ref": "#/definitions/Application"
                },
                {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "Basic"
                        }
                    }
                }
            ],
            "description": "A representation of a Basic application."
        },
        "AdministratorBUs": {
            "title": "AdministratorBUs",
            "type": "object",
            "properties": {
                "businessUnits": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "EdgeProtocols": {
            "title": "EdgeProtocols",
            "type": "object",
            "properties": {
                "protocols": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EdgeProtocol"
                    }
                }
            },
            "description": "The list of edge protocols.",
            "xml": {
                "name": "protocols"
            }
        },
        "Schedule": {
            "title": "Schedule",
            "type": "object",
            "required": [
                "startDate",
                "tag",
                "target",
                "type"
            ],
            "properties": {
                "target": {
                    "type": "string",
                    "description": "The target",
                    "enum": [
                        "application",
                        "subscription"
                    ]
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "The subscription identifier"
                },
                "applicationName": {
                    "type": "string",
                    "description": "The name of the application"
                },
                "tag": {
                    "type": "string",
                    "description": "The type of the application or subscription. \nFor application schedule are valid the following application types: 'HumanSystem', 'StandardRouter', 'SiteMailbox', 'SharedFolde'r, 'TransferLogMaint', 'Basic', 'AdvancedRouting', 'LogEntryMaint', 'ArchiveMaint', 'SentinelLinkDataMaint', 'SynchronyTransfer', 'MBFT', 'PackageRetentionMaint', 'UnlicensedAccountMaint', 'AuditLogMaint'. \nFor subscription schedule are valid the following options : 'PARTNER-IN', 'PARTNER-OUT'.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the schedule",
                    "enum": [
                        "ONCE",
                        "HOURLY",
                        "DAILY",
                        "WEEKLY",
                        "MONTHLY",
                        "YEARLY"
                    ]
                },
                "executionTimes": {
                    "type": "array",
                    "description": "The execution times",
                    "items": {
                        "type": "string"
                    },
                    "x-nullable": true
                },
                "daysOfMonth": {
                    "type": "array",
                    "description": "The days of month",
                    "items": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "x-nullable": true
                },
                "daysOfWeek": {
                    "type": "array",
                    "description": "The days of week",
                    "items": {
                        "type": "string",
                        "enum": [
                            "SUNDAY",
                            "MONDAY",
                            "TUESDAY",
                            "WEDNESDAY",
                            "THURSDAY",
                            "FRIDAY",
                            "SATURDAY"
                        ]
                    },
                    "x-nullable": true
                },
                "months": {
                    "type": "array",
                    "description": "The months",
                    "items": {
                        "type": "string",
                        "enum": [
                            "JANUARY",
                            "FEBRUARY",
                            "MARCH",
                            "APRIL",
                            "MAY",
                            "JUNE",
                            "JULY",
                            "AUGUST",
                            "SEPTEMBER",
                            "OCTOBER",
                            "NOVEMBER",
                            "DECEMBER"
                        ]
                    },
                    "x-nullable": true
                },
                "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start date in date-time format"
                },
                "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end date in date-time format"
                },
                "hourlyStep": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The hourly step"
                },
                "weekOfMonth": {
                    "type": "string",
                    "description": "The week of the month",
                    "enum": [
                        "FIRST",
                        "SECOND",
                        "THIRD",
                        "FOURTH",
                        "LAST"
                    ]
                },
                "skipHolidays": {
                    "type": "boolean",
                    "description": "Determine whether to skip holidays",
                    "default": false
                },
                "hourlyType": {
                    "type": "string",
                    "description": "The hourly type",
                    "enum": [
                        "PERHOURS",
                        "PERMINUTES"
                    ]
                },
                "dailyType": {
                    "type": "string",
                    "description": "The daily type",
                    "enum": [
                        "EVERYDAY",
                        "EVERY_WEEKDAY"
                    ]
                },
                "monthlyType": {
                    "type": "string",
                    "description": "The monthly type",
                    "enum": [
                        "EXACT",
                        "SEQUENCE_WEEKLY",
                        "SEQUENCE_MONTHLY"
                    ]
                }
            },
            "xml": {
                "name": "schedule"
            }
        },
        "UserClass": {
            "title": "UserClass",
            "type": "object",
            "properties": {
                "userClass": {
                    "type": "string",
                    "description": "The user class. By default the user class can be 'VirtClass' or 'RealClass'"
                },
                "loggedIn": {
                    "type": "string",
                    "description": "The global logged in field. For example '1 (1/0/0)'"
                },
                "maxAllowed": {
                    "type": "string",
                    "description": "The max allowed field",
                    "enum": [
                        "unlimited",
                        "some number"
                    ]
                },
                "instantaneousFTPBandwidth": {
                    "type": "string",
                    "description": "The instantaneous FTP bandwidth. For example '0 bytes/sec'."
                },
                "localLoggedIn": {
                    "type": "string",
                    "description": "The local logged in field. For example '1 (1/0/0)'"
                }
            },
            "xml": {
                "name": "userClass"
            }
        },
        "AmazonS3Site": {
            "title": "AmazonS3Site",
            "allOf": [
                {
                    "$ref": "#/definitions/Site"
                },
                {
                    "type": "object",
                    "required": [
                        "s3AccessKey",
                        "s3Bucket",
                        "s3SecretKey"
                    ],
                    "properties": {
                        "protocol": {
                            "type": "string",
                            "default": "s3"
                        },
                        "s3Bucket": {
                            "type": "string",
                            "description": "Specify the bucket for Amazon S3 Service. A limited expression language can be used to specify the bucket.",
                            "default": ""
                        },
                        "s3AccessKey": {
                            "type": "string",
                            "description": "Access key for Amazon S3 authentication.",
                            "default": ""
                        },
                        "s3SecretKey": {
                            "type": "string",
                            "description": "Secret key for Amazon S3 authentication.",
                            "default": ""
                        },
                        "s3NetworkZone": {
                            "type": "string",
                            "description": "Specify the remote site network zone. It can be 'any', 'none', 'Default' or custom network zone. \nAmazon S3 connector only supports HTTP proxy type.If the selected Network Zone does not have an HTTP Proxy configured, it would be ignored.\n",
                            "default": "none"
                        },
                        "s3Region": {
                            "type": "string",
                            "description": "Amazon S3 region used for connection configuration.",
                            "default": "us-east-1"
                        },
                        "s3DownloadObjectKey": {
                            "type": "string",
                            "description": "Specify the target Amazon S3 object(file or folder) for download.\nIf the specified object ID corresponds to an S3 folder, the contents of that folder will be downloaded recursively.\nIf the field is left empty, no objects will be downloaded. \nA limited expression language can be used for this property.\n"
                        },
                        "s3PatternType": {
                            "type": "string",
                            "description": "Specify the download pattern type. Pattern matching expression supports 'glob' and 'regex' syntaxes. \nWhen the pattern type is \"File Globbing\" then the String representation of the filename is matched using \na limited pattern language that resembles regular expressions but with a simpler syntax.\n",
                            "default": "glob"
                        },
                        "s3DownloadPattern": {
                            "type": "string",
                            "description": "Specify the download pattern. A limited expression language can be used for this property.",
                            "default": ""
                        },
                        "s3ReceiveFileAsEnabled": {
                            "type": "string",
                            "description": "Flag defining if receiving file with different name is enabled.",
                            "default": ""
                        },
                        "s3ReceiveFileAsExpr": {
                            "type": "string",
                            "description": "The expression for the name of the recived file. A limited expression language can be used for this property.",
                            "default": ""
                        },
                        "s3ReceivePtaFailure": {
                            "type": "string",
                            "description": "The action on the failure download to be executed.",
                            "enum": [
                                "noAction",
                                "deleteSourceFile",
                                "moveRenameFile"
                            ],
                            "default": "noAction"
                        },
                        "s3ReceivePtaFailureMoveRenameFileExpr": {
                            "type": "string",
                            "description": "The filename expression for move/rename the file on download failure. \nThis property can be set if receivePtaFailure has value moveRenameFile. \nA limited expression language can be used for this property.\n"
                        },
                        "s3ReceivePtaSuccess": {
                            "type": "string",
                            "description": "The action on the success download to be executed.",
                            "enum": [
                                "noAction",
                                "deleteSourceFile",
                                "moveRenameFile"
                            ],
                            "default": "noAction"
                        },
                        "s3ReceivePtaSuccessMoveRenameFileExpr": {
                            "type": "string",
                            "description": "The filename expression for move/rename the file on download success. \nThis property can be set if receivePtaSuccess has value moveRenameFile. \nA limited expression language can be used for this property.\n"
                        },
                        "s3SendFileAsEnabled": {
                            "type": "string",
                            "description": "Flag defining if uploading file with different name is enabled.",
                            "default": ""
                        },
                        "s3SendFileAsExpr": {
                            "type": "string",
                            "description": "The expression for the name of the uploaded file. \nNote: Do not use Amazon S3 folder (forward slash) symbol \"/\".\nA limited expression language can be used for this property.\n",
                            "default": ""
                        },
                        "s3UploadDestination": {
                            "type": "string",
                            "description": "Specifies upload destination Amazon S3 folder. \n\"Upload destination\" should represents S3 folder, consider that forward slash \"/\", \nwhich is the Amazon S3 object folder identification symbol, is automatically appended from the bucket. \nPath should look like this: \"folder1/folder2/.../folderN/\".\nIf \"Upload destination\" is not specified, the file will be uploaded to bucket main \"folder\". \nA limited expression language can be used for this property.\n"
                        },
                        "s3UploadMode": {
                            "type": "string",
                            "description": "Specifies Amazon S3 upload mode.",
                            "default": "auto"
                        },
                        "s3SystemMetadata": {
                            "type": "string",
                            "description": "Specify system defined metadata paramaters as key-value pairs for upload requests. \nFor Example:\nSetting server side encryption: x-amz-server-side-encryption=AES256\nSetting Content Type: Content-Type=text/html; charset=utf-8\nA limited expression language can be used for this property.\n",
                            "default": ""
                        },
                        "s3UserMetadata": {
                            "type": "string",
                            "description": "Specify user defined metadata paramaters as key-value pairs for upload requests. \nFor example: key=value\nA limited expression language can be used for this property.\n",
                            "default": ""
                        },
                        "s3AutoCreateBucketCheck": {
                            "type": "string",
                            "description": "Autocreate the specified bucket if it does not exists on the server side.",
                            "default": "false"
                        }
                    }
                }
            ],
            "description": "A representation of an Amazon S3 site."
        },
        "SynchronizationStatus": {
            "title": "SynchronizationStatus",
            "type": "object",
            "required": [
                "message",
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "description": "Synchronization status.",
                    "enum": [
                        "OK",
                        "STARTED",
                        "RUNNING",
                        "FAILED",
                        "SUCCESS"
                    ]
                },
                "message": {
                    "type": "string",
                    "description": "A message that gives detailed information about status."
                }
            },
            "xml": {
                "name": "operationStatus"
            }
        },
        "ResubmissionStatus": {
            "title": "ResubmissionStatus",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "The resubmission status result."
                },
                "status": {
                    "type": "string",
                    "description": "The overall status of the transfer.",
                    "enum": [
                        "OK",
                        "ERROR"
                    ]
                }
            },
            "xml": {
                "name": "resubmissionStatus"
            }
        },
        "Zones": {
            "title": "Zones",
            "type": "object",
            "properties": {
                "zones": {
                    "type": "array",
                    "description": "The list of DMZ zones",
                    "items": {
                        "$ref": "#/definitions/Zone"
                    }
                }
            },
            "xml": {
                "name": "zones"
            }
        },
        "TransferConfigurations": {
            "title": "TransferConfigurations",
            "type": "object",
            "properties": {
                "transferConfigurations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TransferConfiguration"
                    }
                }
            },
            "xml": {
                "name": "transferConfigurations"
            }
        },
        "ConfigurationOption": {
            "title": "ConfigurationOption",
            "type": "object",
            "required": [
                "disabled",
                "encrypted",
                "name",
                "readOnly",
                "specified"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the configuration option entity."
                },
                "values": {
                    "type": "array",
                    "description": "The configuration option values",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the configuration option entity"
                },
                "node": {
                    "type": "string",
                    "description": "The identifier of the cluster node (machine)",
                    "default": "UNSPECIFIED"
                },
                "encrypted": {
                    "type": "boolean",
                    "description": "Define if the configuration option value is encrypted",
                    "default": false
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Define if the configuration option value can be modified",
                    "default": false
                },
                "composite": {
                    "type": "boolean",
                    "description": "Define if the configuration option is composite",
                    "default": false
                },
                "specified": {
                    "type": "boolean",
                    "description": "Define if the configuration option value is specified",
                    "default": false
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Define if the configuration option is disabled",
                    "default": false
                }
            },
            "xml": {
                "name": "configurationOption"
            }
        },
        "RouteStepRename": {
            "title": "RouteStepRename",
            "allOf": [
                {
                    "$ref": "#/definitions/RouteStep"
                },
                {
                    "type": "object",
                    "required": [
                        "actionOnStepFailure",
                        "fileFilterExpression",
                        "fileFilterExpressionType",
                        "outputFileName"
                    ],
                    "properties": {
                        "type": {
                            "type": "string",
                            "default": "Rename"
                        },
                        "usePrecedingStepFiles": {
                            "type": "string",
                            "description": "If true, the route execution will continue even if the step execution fails",
                            "enum": [
                                "true",
                                "false"
                            ],
                            "default": "false"
                        },
                        "outputFileName": {
                            "type": "string",
                            "description": "Output file name or expression. Example: ${basename(currentfulltarget)}.transformed\n",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "fileFilterExpression": {
                            "type": "string",
                            "description": "File name or file name expression. It is used with the file filter expression property",
                            "minLength": 0,
                            "maxLength": 64
                        },
                        "fileFilterExpressionType": {
                            "type": "string",
                            "description": "File filter expression type",
                            "enum": [
                                "GLOB",
                                "REGEXP",
                                "TEXT_FILES"
                            ]
                        },
                        "actionOnStepFailure": {
                            "type": "string",
                            "description": "Action on step failure. If set to PROCEED, the route execution will continue even if the step execution fails",
                            "enum": [
                                "FAIL",
                                "PROCEED"
                            ]
                        }
                    }
                }
            ],
            "description": "A representation of a route step of type Rename"
        },
        "ConfigurationOptions": {
            "title": "ConfigurationOptions",
            "type": "object",
            "properties": {
                "configurationOptions": {
                    "type": "array",
                    "description": "The list of configuration options",
                    "items": {
                        "$ref": "#/definitions/ConfigurationOption"
                    }
                }
            },
            "xml": {
                "name": "configurationOptions"
            }
        },
        "HTTPSite": {
            "title": "HTTPSite",
            "allOf": [
                {
                    "$ref": "#/definitions/Site"
                },
                {
                    "type": "object",
                    "properties": {
                        "protocol": {
                            "type": "string",
                            "default": "http"
                        },
                        "host": {
                            "type": "string",
                            "description": "Specify the remote site server host.",
                            "default": ""
                        },
                        "port": {
                            "type": "string",
                            "description": "Specify the remote site server port.",
                            "default": ""
                        },
                        "useUri": {
                            "type": "string",
                            "description": "Specify whether to define partner URL or not. If it's 'false', 'host' and 'port' should be specified. Otherwise 'url' should be specified.",
                            "default": "false"
                        },
                        "uri": {
                            "type": "string",
                            "description": "Specify the partner URL.",
                            "default": ""
                        },
                        "dmz": {
                            "type": "string",
                            "description": "Specify the remote site network zone. It can be 'any', 'none', 'Default' or custom network zone.",
                            "default": "none"
                        },
                        "download.folder.advanced.expression.enabled": {
                            "type": "string",
                            "description": "When it is 'true' the download folder is evaluated using expression language.",
                            "default": "false"
                        },
                        "download.folder": {
                            "type": "string",
                            "description": "Specify the download folder."
                        },
                        "download.pattern.advanced.expression.enabled": {
                            "type": "string",
                            "description": "When it is 'true' the download pattern is evaluated using expression language.",
                            "default": "false"
                        },
                        "download.pattern": {
                            "type": "string",
                            "description": "Specify the download pattern.",
                            "default": ""
                        },
                        "upload.folder.overridable": {
                            "type": "string",
                            "description": "Defines if the upload folder can be modified by the Send To Partner routing step. It can be '0' or '1'.",
                            "default": "false"
                        },
                        "upload.folder": {
                            "type": "string",
                            "description": "Specify the upload folder."
                        },
                        "transfer.mode": {
                            "type": "string",
                            "description": "Specify the transfer mode. It can be A (Ascii), I (Binary). When it is not define the transfer mode is Auto detected.",
                            "default": ""
                        },
                        "issecure": {
                            "type": "string",
                            "description": "Specify if FTPS is used or not. It can be '0' or '1'.",
                            "default": "1"
                        },
                        "verifyCert": {
                            "type": "string",
                            "description": "Verify certificate for this site. This property can be set if FTPS (issecure) is used. It can be '0' or '1'.",
                            "default": "0"
                        },
                        "fipsMode": {
                            "type": "string",
                            "description": "Specify if the FIPS Transfer Mode is enabled or disabled. This property can be set if FTPS (issecure) is used. It can be '0' or '1'.",
                            "default": "0"
                        },
                        "username": {
                            "type": "string",
                            "description": "Specify the site login username.",
                            "default": ""
                        },
                        "usePassword": {
                            "type": "string",
                            "description": "Specify if the login password should be set. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "usePasswordExpr": {
                            "type": "string",
                            "description": "Specify whether to have password expressions or not. It can be 'true' or 'false'.",
                            "default": "false"
                        },
                        "password": {
                            "type": "string",
                            "description": "Specify the site login password encrypted in 'AES128'. This property should be set if 'usePassword' is 'true'.",
                            "default": ""
                        },
                        "pta.OUT.do.as": {
                            "type": "string",
                            "description": "Specify a value to send the file with a different name. An expression language can be used to specify a file name e.g. ${stenv['target']}_${random()}."
                        },
                        "pta.on.tempfail.OUT.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the destination file on temporary failure after the transmission. It can be 'true' or 'false'."
                        },
                        "pta.on.permfail.OUT.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the destination file on failure after the transmission. It can be 'true' or 'false'."
                        },
                        "pta.IN.do.as": {
                            "type": "string",
                            "description": "Specify a value to receive the file with a different name. An expression language can be used to specify a file name e.g. ${stenv['target']}_${random()}."
                        },
                        "pta.on.permfail.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the source file on failure after the transmission. It can be 'true' or 'false'."
                        },
                        "pta.on.success.IN.do.delete": {
                            "type": "string",
                            "description": "Defines whether to delete the source file on success after the transmission. It can be 'true' or 'false'."
                        }
                    }
                }
            ],
            "description": "A representation of an HTTP(S) site."
        },
        "RouteStepMetadata": {
            "title": "RouteStepMetadata",
            "type": "object",
            "required": [
                "endpointSchema",
                "stepCategory",
                "stepDisplayName",
                "stepPropertyBean",
                "stepType",
                "uiPagePath"
            ],
            "properties": {
                "stepType": {
                    "type": "string",
                    "description": "The step types",
                    "enum": [
                        "PgpEncryption",
                        "PgpDecryption",
                        "Compress",
                        "Decompress",
                        "LineEnding",
                        "ExternalScript",
                        "EncodingConversion",
                        "CharactersReplace",
                        "LinePadding",
                        "LineTruncating",
                        "LineFolding",
                        "Rename",
                        "Publish",
                        "SendToPartner"
                    ]
                },
                "stepCategory": {
                    "type": "string",
                    "description": "The step category",
                    "enum": [
                        "Transformation",
                        "Routing"
                    ]
                },
                "stepDisplayName": {
                    "type": "string",
                    "description": "The step name"
                },
                "endpointSchema": {
                    "type": "string",
                    "description": "The endpoint schema"
                },
                "uiPagePath": {
                    "type": "string",
                    "description": "The ui page path"
                },
                "stepPropertyBean": {
                    "type": "string",
                    "description": "The step property bean"
                },
                "routeBuilderClassName": {
                    "type": "string",
                    "description": "The route builder classname"
                },
                "stepValidatorClassName": {
                    "type": "string",
                    "description": "The step validator classname"
                },
                "stepPropertyTransformer": {
                    "type": "string",
                    "description": "The step property transformer."
                }
            },
            "xml": {
                "name": "routeStepMetadata"
            }
        },
        "BusinessUnits": {
            "title": "BusinessUnits",
            "type": "object",
            "properties": {
                "businessUnits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/BusinessUnit"
                    }
                }
            },
            "xml": {
                "name": "businessUnits"
            }
        },
        "SharePointSite": {
            "title": "SharePointSite",
            "allOf": [
                {
                    "$ref": "#/definitions/Site"
                },
                {
                    "type": "object",
                    "properties": {
                        "protocol": {
                            "type": "string",
                            "default": "SharePoint"
                        },
                        "sharepoint_useUri": {
                            "type": "boolean",
                            "description": "Flag indicating id host and port or URL will be specified",
                            "default": false
                        },
                        "sharepoint_host": {
                            "type": "string",
                            "description": "The SharePoint host"
                        },
                        "sharepoint_port": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The SharePoint port",
                            "minimum": 0,
                            "maximum": 65535
                        },
                        "sharepoint_uri": {
                            "type": "string",
                            "description": "The URI for the SharePoint"
                        },
                        "sharepoint_siteName": {
                            "type": "string",
                            "description": "The SharePoint site name"
                        },
                        "sharepoint_networkZone": {
                            "type": "string",
                            "description": "The network zone"
                        },
                        "sharepoint_downloadFolderAdvancedExpressionEnabled": {
                            "type": "boolean",
                            "description": "Flag to define whether to set the download folder as advanced expression or with regular folder name",
                            "default": false
                        },
                        "sharepoint_downloadFolder": {
                            "type": "string",
                            "description": "The folder name of the SharePoint repository to download files from. This property is expression language enabled if sharepoint_downloadFolderAdvancedExpressionEnabled is set to true"
                        },
                        "sharepoint_patternType": {
                            "type": "string",
                            "description": "The pattern type",
                            "enum": [
                                "regex",
                                "glob"
                            ]
                        },
                        "sharepoint_downloadPatternAdvancedExpressionEnabled": {
                            "type": "boolean",
                            "description": "Flag to define whether to set download pattern as advanced expression or with regex/glob.\nWhen is set to true, the sharepoint_advanced_download_start_date and sharepoint_advanced_download_end_date can be set with an expressin.\n",
                            "default": false
                        },
                        "sharepoint_downloadPattern": {
                            "type": "string",
                            "description": "The download pattern. This property is expression language enabled if sharepoint_downloadPatternAdvancedExpressionEnabled is set to true"
                        },
                        "sharepoint_useAdvancedDownloadOptions": {
                            "type": "boolean",
                            "description": "Flag to define whether to enable advanced download options",
                            "default": false
                        },
                        "sharepoint_advancedDownloadOption": {
                            "type": "string",
                            "description": "The advanced download option",
                            "enum": [
                                "downloadVersion",
                                "downloadVersionByDate"
                            ]
                        },
                        "sharepoint_download_file_version": {
                            "type": "string",
                            "description": "The download file version",
                            "enum": [
                                "specific",
                                "first",
                                "last"
                            ],
                            "default": "last"
                        },
                        "sharepoint_download_files_count": {
                            "type": "string",
                            "description": "SharePoint download file(s) count or specific file version label (if download file version is 'specific')\n",
                            "default": "1"
                        },
                        "sharepoint_download_file_version_type": {
                            "type": "string",
                            "description": "SharePoint download file version type.",
                            "enum": [
                                "Any",
                                "Minor",
                                "Major"
                            ],
                            "default": "Any"
                        },
                        "sharepoint_advanced_download_start_date": {
                            "type": "string",
                            "description": "The start date for downloading. This property can be set only if advancedDownloadOption is set to 'downloadVersionByDate'. The sharepoint_advanced_download_end_date must be set, too. All files on the SharePoint repository that are created after the specified start date and before specified end date will be downloaded. This property is expression language enabled\n"
                        },
                        "sharepoint_advanced_download_end_date": {
                            "type": "string",
                            "description": "The end date for downloading. This property can be set only if advancedDownloadOption is set to 'downloadVersionByDate'. The sharepoint_advanced_download_startd_date must be set, too. All files on the SharePoint repository that are created after the specified start date and before specified end date will be downloaded. This property is expression language enabled\n"
                        },
                        "sharepoint_receiveFileAsEnabled": {
                            "type": "boolean",
                            "description": "Flag defining if receiving file with different name is enabled",
                            "default": false
                        },
                        "sharepoint_receiveFileAsExpr": {
                            "type": "string",
                            "description": "The expression for the name of the file"
                        },
                        "sharepoint_receivePtaFailure": {
                            "type": "string",
                            "description": "The action on the failure download to be executed",
                            "enum": [
                                "noAction",
                                "deleteSourceFile",
                                "deleteFileVersionOnly",
                                "moveRenameFile"
                            ],
                            "default": "noAction"
                        },
                        "sharepoint_receivePtaFailure_moveRenameFileExpr": {
                            "type": "string",
                            "description": "The filename expression for move/rename the file on download failure. This property can be set if receivePtaFailure has value moveRenameFile"
                        },
                        "sharepoint_receivePtaSuccess": {
                            "type": "string",
                            "description": "The action on the success download to be executed.",
                            "enum": [
                                "noAction",
                                "deleteSourceFile",
                                "deleteFileVersionOnly",
                                "moveRenameFile"
                            ],
                            "default": "noAction"
                        },
                        "sharepoint_receivePtaSuccess_moveRenameFileExpr": {
                            "type": "string",
                            "description": "The filename expression for move/rename the file on download success. This property can be set if receivePtaSuccess has value moveRenameFile"
                        },
                        "sharepoint_uploadFolderAdvancedExpressionEnabled": {
                            "type": "boolean",
                            "description": "Flag to define whether to set the upload folder as advanced expression or with regular folder name",
                            "default": false
                        },
                        "sharepoint_uploadFolder": {
                            "type": "string",
                            "description": "The name of the upload folder"
                        },
                        "sharepoint_sendFileAsEnabled": {
                            "type": "boolean",
                            "description": "Flag defining if sending file with different name is enabled",
                            "default": false
                        },
                        "sharepoint_sendFileAsExpr": {
                            "type": "string",
                            "description": "The expression for the name of the file to send"
                        },
                        "sharepoint_sendPtaSuccess": {
                            "type": "string",
                            "description": "The action on the success upload to be executed.",
                            "enum": [
                                "noAction",
                                "publish"
                            ],
                            "default": "noAction"
                        },
                        "sharepoint_sendPtaSuccessExpr_publish": {
                            "type": "string",
                            "description": "The check-in comment for the publish file action. This property can be set if sendPtaSuccess has value publish"
                        },
                        "sharepoint_username": {
                            "type": "string",
                            "description": "The user name to log in the SharePoint repository"
                        },
                        "sharepoint_usePassword_Control": {
                            "type": "boolean",
                            "description": "Flag to define whether to use specified password for logging in the SharePoint repository",
                            "default": false
                        },
                        "sharepoint_secureHTTP": {
                            "type": "boolean",
                            "description": "flag to define whether to enable secure HTTP connection",
                            "default": false
                        },
                        "sharepoint_verifyCert": {
                            "type": "boolean",
                            "description": "Flag to define whether to verify certificate.",
                            "default": false
                        }
                    }
                }
            ],
            "description": "A representation of an SharePoint site."
        }
    }
}